// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#include "Protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Protocol {
PROTOBUF_CONSTEXPR C_CREATEACCOUNT::C_CREATEACCOUNT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.passward_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_CREATEACCOUNTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_CREATEACCOUNTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_CREATEACCOUNTDefaultTypeInternal() {}
  union {
    C_CREATEACCOUNT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_CREATEACCOUNTDefaultTypeInternal _C_CREATEACCOUNT_default_instance_;
PROTOBUF_CONSTEXPR S_CREATEACCOUNT::S_CREATEACCOUNT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_CREATEACCOUNTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_CREATEACCOUNTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_CREATEACCOUNTDefaultTypeInternal() {}
  union {
    S_CREATEACCOUNT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_CREATEACCOUNTDefaultTypeInternal _S_CREATEACCOUNT_default_instance_;
PROTOBUF_CONSTEXPR C_LOGIN::C_LOGIN(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.passward_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_LOGINDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_LOGINDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_LOGINDefaultTypeInternal() {}
  union {
    C_LOGIN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_LOGINDefaultTypeInternal _C_LOGIN_default_instance_;
PROTOBUF_CONSTEXPR S_LOGIN::S_LOGIN(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_.playerindex_)*/uint64_t{0u}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_LOGINDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_LOGINDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_LOGINDefaultTypeInternal() {}
  union {
    S_LOGIN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_LOGINDefaultTypeInternal _S_LOGIN_default_instance_;
PROTOBUF_CONSTEXPR C_LOGOUT::C_LOGOUT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_LOGOUTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_LOGOUTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_LOGOUTDefaultTypeInternal() {}
  union {
    C_LOGOUT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_LOGOUTDefaultTypeInternal _C_LOGOUT_default_instance_;
PROTOBUF_CONSTEXPR S_LOGOUT::S_LOGOUT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerindex_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_LOGOUTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_LOGOUTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_LOGOUTDefaultTypeInternal() {}
  union {
    S_LOGOUT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_LOGOUTDefaultTypeInternal _S_LOGOUT_default_instance_;
PROTOBUF_CONSTEXPR C_ENTER_GAME::C_ENTER_GAME(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerindex_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_ENTER_GAMEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_ENTER_GAMEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_ENTER_GAMEDefaultTypeInternal() {}
  union {
    C_ENTER_GAME _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_ENTER_GAMEDefaultTypeInternal _C_ENTER_GAME_default_instance_;
PROTOBUF_CONSTEXPR S_ENTER_GAME::S_ENTER_GAME(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_ENTER_GAMEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_ENTER_GAMEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_ENTER_GAMEDefaultTypeInternal() {}
  union {
    S_ENTER_GAME _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_ENTER_GAMEDefaultTypeInternal _S_ENTER_GAME_default_instance_;
PROTOBUF_CONSTEXPR C_ENTER_ROOM::C_ENTER_ROOM(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.room_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_ENTER_ROOMDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_ENTER_ROOMDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_ENTER_ROOMDefaultTypeInternal() {}
  union {
    C_ENTER_ROOM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_ENTER_ROOMDefaultTypeInternal _C_ENTER_ROOM_default_instance_;
PROTOBUF_CONSTEXPR S_ENTER_ROOM::S_ENTER_ROOM(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_ENTER_ROOMDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_ENTER_ROOMDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_ENTER_ROOMDefaultTypeInternal() {}
  union {
    S_ENTER_ROOM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_ENTER_ROOMDefaultTypeInternal _S_ENTER_ROOM_default_instance_;
PROTOBUF_CONSTEXPR C_LEAVE_GAME::C_LEAVE_GAME(
    ::_pbi::ConstantInitialized) {}
struct C_LEAVE_GAMEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_LEAVE_GAMEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_LEAVE_GAMEDefaultTypeInternal() {}
  union {
    C_LEAVE_GAME _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_LEAVE_GAMEDefaultTypeInternal _C_LEAVE_GAME_default_instance_;
PROTOBUF_CONSTEXPR S_LEAVE_GAME::S_LEAVE_GAME(
    ::_pbi::ConstantInitialized) {}
struct S_LEAVE_GAMEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_LEAVE_GAMEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_LEAVE_GAMEDefaultTypeInternal() {}
  union {
    S_LEAVE_GAME _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_LEAVE_GAMEDefaultTypeInternal _S_LEAVE_GAME_default_instance_;
PROTOBUF_CONSTEXPR S_SPAWN::S_SPAWN(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_.monsters_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_SPAWNDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_SPAWNDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_SPAWNDefaultTypeInternal() {}
  union {
    S_SPAWN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_SPAWNDefaultTypeInternal _S_SPAWN_default_instance_;
PROTOBUF_CONSTEXPR S_SPAWNPLAYER::S_SPAWNPLAYER(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_SPAWNPLAYERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_SPAWNPLAYERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_SPAWNPLAYERDefaultTypeInternal() {}
  union {
    S_SPAWNPLAYER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_SPAWNPLAYERDefaultTypeInternal _S_SPAWNPLAYER_default_instance_;
PROTOBUF_CONSTEXPR S_SPAWNMONSTER::S_SPAWNMONSTER(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.monsters_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_SPAWNMONSTERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_SPAWNMONSTERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_SPAWNMONSTERDefaultTypeInternal() {}
  union {
    S_SPAWNMONSTER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_SPAWNMONSTERDefaultTypeInternal _S_SPAWNMONSTER_default_instance_;
PROTOBUF_CONSTEXPR C_DROPITEM::C_DROPITEM(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_DROPITEMDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_DROPITEMDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_DROPITEMDefaultTypeInternal() {}
  union {
    C_DROPITEM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_DROPITEMDefaultTypeInternal _C_DROPITEM_default_instance_;
PROTOBUF_CONSTEXPR C_INVENTORY_UPDATE::C_INVENTORY_UPDATE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_)*/{}
  , /*decltype(_impl_._index_cached_byte_size_)*/{0}
  , /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_INVENTORY_UPDATEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_INVENTORY_UPDATEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_INVENTORY_UPDATEDefaultTypeInternal() {}
  union {
    C_INVENTORY_UPDATE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_INVENTORY_UPDATEDefaultTypeInternal _C_INVENTORY_UPDATE_default_instance_;
PROTOBUF_CONSTEXPR S_INVENTORY_UPDATE::S_INVENTORY_UPDATE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_)*/{}
  , /*decltype(_impl_._index_cached_byte_size_)*/{0}
  , /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_INVENTORY_UPDATEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_INVENTORY_UPDATEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_INVENTORY_UPDATEDefaultTypeInternal() {}
  union {
    S_INVENTORY_UPDATE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_INVENTORY_UPDATEDefaultTypeInternal _S_INVENTORY_UPDATE_default_instance_;
PROTOBUF_CONSTEXPR C_INVENTORY_REMOVE::C_INVENTORY_REMOVE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_)*/{}
  , /*decltype(_impl_._index_cached_byte_size_)*/{0}
  , /*decltype(_impl_.count_items_)*/{}
  , /*decltype(_impl_._count_items_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_INVENTORY_REMOVEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_INVENTORY_REMOVEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_INVENTORY_REMOVEDefaultTypeInternal() {}
  union {
    C_INVENTORY_REMOVE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_INVENTORY_REMOVEDefaultTypeInternal _C_INVENTORY_REMOVE_default_instance_;
PROTOBUF_CONSTEXPR S_INVENTORY_REMOVE::S_INVENTORY_REMOVE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_)*/{}
  , /*decltype(_impl_._index_cached_byte_size_)*/{0}
  , /*decltype(_impl_.count_items_)*/{}
  , /*decltype(_impl_._count_items_cached_byte_size_)*/{0}
  , /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_INVENTORY_REMOVEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_INVENTORY_REMOVEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_INVENTORY_REMOVEDefaultTypeInternal() {}
  union {
    S_INVENTORY_REMOVE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_INVENTORY_REMOVEDefaultTypeInternal _S_INVENTORY_REMOVE_default_instance_;
PROTOBUF_CONSTEXPR C_SWAP_INVENTORY_TO_INVENTORY::C_SWAP_INVENTORY_TO_INVENTORY(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.from_object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.from_index_)*/0u
  , /*decltype(_impl_.from_count_)*/0u
  , /*decltype(_impl_.to_object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.to_index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_SWAP_INVENTORY_TO_INVENTORYDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_SWAP_INVENTORY_TO_INVENTORYDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_SWAP_INVENTORY_TO_INVENTORYDefaultTypeInternal() {}
  union {
    C_SWAP_INVENTORY_TO_INVENTORY _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_SWAP_INVENTORY_TO_INVENTORYDefaultTypeInternal _C_SWAP_INVENTORY_TO_INVENTORY_default_instance_;
PROTOBUF_CONSTEXPR C_TRY_PICK_ITEM_TO_INVENTORY::C_TRY_PICK_ITEM_TO_INVENTORY(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_id_)*/uint64_t{0u}
  , /*decltype(_impl_.to_object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.to_index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_TRY_PICK_ITEM_TO_INVENTORYDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_TRY_PICK_ITEM_TO_INVENTORYDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_TRY_PICK_ITEM_TO_INVENTORYDefaultTypeInternal() {}
  union {
    C_TRY_PICK_ITEM_TO_INVENTORY _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_TRY_PICK_ITEM_TO_INVENTORYDefaultTypeInternal _C_TRY_PICK_ITEM_TO_INVENTORY_default_instance_;
PROTOBUF_CONSTEXPR S_SPAWNITEM::S_SPAWNITEM(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_SPAWNITEMDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_SPAWNITEMDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_SPAWNITEMDefaultTypeInternal() {}
  union {
    S_SPAWNITEM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_SPAWNITEMDefaultTypeInternal _S_SPAWNITEM_default_instance_;
PROTOBUF_CONSTEXPR S_SPAWNBOX::S_SPAWNBOX(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.box_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_SPAWNBOXDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_SPAWNBOXDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_SPAWNBOXDefaultTypeInternal() {}
  union {
    S_SPAWNBOX _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_SPAWNBOXDefaultTypeInternal _S_SPAWNBOX_default_instance_;
PROTOBUF_CONSTEXPR S_DESPAWN::S_DESPAWN(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_ids_)*/{}
  , /*decltype(_impl_._object_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_DESPAWNDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_DESPAWNDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_DESPAWNDefaultTypeInternal() {}
  union {
    S_DESPAWN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_DESPAWNDefaultTypeInternal _S_DESPAWN_default_instance_;
PROTOBUF_CONSTEXPR S_DEATH::S_DEATH(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_ids_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_DEATHDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_DEATHDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_DEATHDefaultTypeInternal() {}
  union {
    S_DEATH _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_DEATHDefaultTypeInternal _S_DEATH_default_instance_;
PROTOBUF_CONSTEXPR C_MOVE::C_MOVE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_MOVEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_MOVEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_MOVEDefaultTypeInternal() {}
  union {
    C_MOVE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_MOVEDefaultTypeInternal _C_MOVE_default_instance_;
PROTOBUF_CONSTEXPR S_MOVE::S_MOVE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_MOVEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_MOVEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_MOVEDefaultTypeInternal() {}
  union {
    S_MOVE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_MOVEDefaultTypeInternal _S_MOVE_default_instance_;
PROTOBUF_CONSTEXPR C_STATUS::C_STATUS(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_STATUSDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_STATUSDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_STATUSDefaultTypeInternal() {}
  union {
    C_STATUS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_STATUSDefaultTypeInternal _C_STATUS_default_instance_;
PROTOBUF_CONSTEXPR S_STATUS::S_STATUS(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_STATUSDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_STATUSDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_STATUSDefaultTypeInternal() {}
  union {
    S_STATUS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_STATUSDefaultTypeInternal _S_STATUS_default_instance_;
PROTOBUF_CONSTEXPR C_CHAT::C_CHAT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.playerid_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_CHATDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_CHATDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_CHATDefaultTypeInternal() {}
  union {
    C_CHAT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_CHATDefaultTypeInternal _C_CHAT_default_instance_;
PROTOBUF_CONSTEXPR S_CHAT::S_CHAT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_CHATDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_CHATDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_CHATDefaultTypeInternal() {}
  union {
    S_CHAT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_CHATDefaultTypeInternal _S_CHAT_default_instance_;
PROTOBUF_CONSTEXPR S_MELEEATTACK::S_MELEEATTACK(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ability_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_MELEEATTACKDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_MELEEATTACKDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_MELEEATTACKDefaultTypeInternal() {}
  union {
    S_MELEEATTACK _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_MELEEATTACKDefaultTypeInternal _S_MELEEATTACK_default_instance_;
PROTOBUF_CONSTEXPR C_MELEEATTACK::C_MELEEATTACK(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ability_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_MELEEATTACKDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_MELEEATTACKDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_MELEEATTACKDefaultTypeInternal() {}
  union {
    C_MELEEATTACK _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_MELEEATTACKDefaultTypeInternal _C_MELEEATTACK_default_instance_;
PROTOBUF_CONSTEXPR C_PATHFINDING::C_PATHFINDING(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.info_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_PATHFINDINGDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_PATHFINDINGDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_PATHFINDINGDefaultTypeInternal() {}
  union {
    C_PATHFINDING _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_PATHFINDINGDefaultTypeInternal _C_PATHFINDING_default_instance_;
PROTOBUF_CONSTEXPR S_PATHFINDING::S_PATHFINDING(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.info_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_PATHFINDINGDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_PATHFINDINGDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_PATHFINDINGDefaultTypeInternal() {}
  union {
    S_PATHFINDING _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_PATHFINDINGDefaultTypeInternal _S_PATHFINDING_default_instance_;
PROTOBUF_CONSTEXPR C_SHOOTPROJECTILE::C_SHOOTPROJECTILE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.info_)*/{}
  , /*decltype(_impl_.shooter_yaw_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_SHOOTPROJECTILEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_SHOOTPROJECTILEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_SHOOTPROJECTILEDefaultTypeInternal() {}
  union {
    C_SHOOTPROJECTILE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_SHOOTPROJECTILEDefaultTypeInternal _C_SHOOTPROJECTILE_default_instance_;
PROTOBUF_CONSTEXPR S_SHOOTPROJECTILE::S_SHOOTPROJECTILE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.info_)*/{}
  , /*decltype(_impl_.shooterid_)*/uint64_t{0u}
  , /*decltype(_impl_.shooter_yaw_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_SHOOTPROJECTILEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_SHOOTPROJECTILEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_SHOOTPROJECTILEDefaultTypeInternal() {}
  union {
    S_SHOOTPROJECTILE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_SHOOTPROJECTILEDefaultTypeInternal _S_SHOOTPROJECTILE_default_instance_;
PROTOBUF_CONSTEXPR C_HITDAMAGE::C_HITDAMAGE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_HITDAMAGEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_HITDAMAGEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_HITDAMAGEDefaultTypeInternal() {}
  union {
    C_HITDAMAGE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_HITDAMAGEDefaultTypeInternal _C_HITDAMAGE_default_instance_;
PROTOBUF_CONSTEXPR S_HITDAMAGE::S_HITDAMAGE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_HITDAMAGEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_HITDAMAGEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_HITDAMAGEDefaultTypeInternal() {}
  union {
    S_HITDAMAGE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_HITDAMAGEDefaultTypeInternal _S_HITDAMAGE_default_instance_;
PROTOBUF_CONSTEXPR S_SHOP_ITEM_LIST::S_SHOP_ITEM_LIST(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_SHOP_ITEM_LISTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_SHOP_ITEM_LISTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_SHOP_ITEM_LISTDefaultTypeInternal() {}
  union {
    S_SHOP_ITEM_LIST _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_SHOP_ITEM_LISTDefaultTypeInternal _S_SHOP_ITEM_LIST_default_instance_;
PROTOBUF_CONSTEXPR C_REFRESH_ITEM_LIST::C_REFRESH_ITEM_LIST(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_REFRESH_ITEM_LISTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_REFRESH_ITEM_LISTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_REFRESH_ITEM_LISTDefaultTypeInternal() {}
  union {
    C_REFRESH_ITEM_LIST _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_REFRESH_ITEM_LISTDefaultTypeInternal _C_REFRESH_ITEM_LIST_default_instance_;
PROTOBUF_CONSTEXPR C_BUY_SHOP_ITEM::C_BUY_SHOP_ITEM(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_index_)*/0u
  , /*decltype(_impl_.full_inventory_)*/false
  , /*decltype(_impl_.inventory_index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_BUY_SHOP_ITEMDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_BUY_SHOP_ITEMDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_BUY_SHOP_ITEMDefaultTypeInternal() {}
  union {
    C_BUY_SHOP_ITEM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_BUY_SHOP_ITEMDefaultTypeInternal _C_BUY_SHOP_ITEM_default_instance_;
PROTOBUF_CONSTEXPR S_BUY_SHOP_ITEM::S_BUY_SHOP_ITEM(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.info_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.item_index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_BUY_SHOP_ITEMDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_BUY_SHOP_ITEMDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_BUY_SHOP_ITEMDefaultTypeInternal() {}
  union {
    S_BUY_SHOP_ITEM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_BUY_SHOP_ITEMDefaultTypeInternal _S_BUY_SHOP_ITEM_default_instance_;
PROTOBUF_CONSTEXPR S_MAIL_SEND::S_MAIL_SEND(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mail_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_MAIL_SENDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_MAIL_SENDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_MAIL_SENDDefaultTypeInternal() {}
  union {
    S_MAIL_SEND _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_MAIL_SENDDefaultTypeInternal _S_MAIL_SEND_default_instance_;
PROTOBUF_CONSTEXPR S_MAIL_LIST::S_MAIL_LIST(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mailbox_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_MAIL_LISTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_MAIL_LISTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_MAIL_LISTDefaultTypeInternal() {}
  union {
    S_MAIL_LIST _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_MAIL_LISTDefaultTypeInternal _S_MAIL_LIST_default_instance_;
PROTOBUF_CONSTEXPR C_MAIL_LIST::C_MAIL_LIST(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_MAIL_LISTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_MAIL_LISTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_MAIL_LISTDefaultTypeInternal() {}
  union {
    C_MAIL_LIST _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_MAIL_LISTDefaultTypeInternal _C_MAIL_LIST_default_instance_;
PROTOBUF_CONSTEXPR C_MAIL_ITEM_RECV::C_MAIL_ITEM_RECV(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mailindex_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_MAIL_ITEM_RECVDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_MAIL_ITEM_RECVDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_MAIL_ITEM_RECVDefaultTypeInternal() {}
  union {
    C_MAIL_ITEM_RECV _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_MAIL_ITEM_RECVDefaultTypeInternal _C_MAIL_ITEM_RECV_default_instance_;
PROTOBUF_CONSTEXPR S_GOLD::S_GOLD(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_GOLDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_GOLDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_GOLDDefaultTypeInternal() {}
  union {
    S_GOLD _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_GOLDDefaultTypeInternal _S_GOLD_default_instance_;
PROTOBUF_CONSTEXPR C_GOLD::C_GOLD(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_GOLDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_GOLDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_GOLDDefaultTypeInternal() {}
  union {
    C_GOLD _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_GOLDDefaultTypeInternal _C_GOLD_default_instance_;
}  // namespace Protocol
static ::_pb::Metadata file_level_metadata_Protocol_2eproto[50];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Protocol_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Protocol_2eproto = nullptr;

const uint32_t TableStruct_Protocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CREATEACCOUNT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CREATEACCOUNT, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CREATEACCOUNT, _impl_.passward_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CREATEACCOUNT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CREATEACCOUNT, _impl_.success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_LOGIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_LOGIN, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_LOGIN, _impl_.passward_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LOGIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LOGIN, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LOGIN, _impl_.players_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LOGIN, _impl_.playerindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_LOGOUT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_LOGOUT, _impl_.playerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LOGOUT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LOGOUT, _impl_.playerindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ENTER_GAME, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ENTER_GAME, _impl_.playerindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENTER_GAME, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENTER_GAME, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENTER_GAME, _impl_.player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ENTER_ROOM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ENTER_ROOM, _impl_.room_name_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ENTER_ROOM, _impl_.player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENTER_ROOM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENTER_ROOM, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENTER_ROOM, _impl_.player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_LEAVE_GAME, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LEAVE_GAME, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SPAWN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SPAWN, _impl_.players_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SPAWN, _impl_.monsters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SPAWNPLAYER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SPAWNPLAYER, _impl_.players_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SPAWNMONSTER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SPAWNMONSTER, _impl_.monsters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_DROPITEM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_DROPITEM, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_INVENTORY_UPDATE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_INVENTORY_UPDATE, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_INVENTORY_UPDATE, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_INVENTORY_UPDATE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_INVENTORY_UPDATE, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_INVENTORY_UPDATE, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_INVENTORY_UPDATE, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_INVENTORY_REMOVE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_INVENTORY_REMOVE, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_INVENTORY_REMOVE, _impl_.count_items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_INVENTORY_REMOVE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_INVENTORY_REMOVE, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_INVENTORY_REMOVE, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_INVENTORY_REMOVE, _impl_.count_items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SWAP_INVENTORY_TO_INVENTORY, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SWAP_INVENTORY_TO_INVENTORY, _impl_.from_object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SWAP_INVENTORY_TO_INVENTORY, _impl_.from_index_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SWAP_INVENTORY_TO_INVENTORY, _impl_.from_count_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SWAP_INVENTORY_TO_INVENTORY, _impl_.to_object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SWAP_INVENTORY_TO_INVENTORY, _impl_.to_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_TRY_PICK_ITEM_TO_INVENTORY, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_TRY_PICK_ITEM_TO_INVENTORY, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_TRY_PICK_ITEM_TO_INVENTORY, _impl_.to_object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_TRY_PICK_ITEM_TO_INVENTORY, _impl_.to_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SPAWNITEM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SPAWNITEM, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SPAWNBOX, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SPAWNBOX, _impl_.box_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DESPAWN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DESPAWN, _impl_.object_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DEATH, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DEATH, _impl_.object_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MOVE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MOVE, _impl_.info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MOVE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MOVE, _impl_.info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_STATUS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_STATUS, _impl_.info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_STATUS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_STATUS, _impl_.info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CHAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CHAT, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CHAT, _impl_.msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHAT, _impl_.msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MELEEATTACK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MELEEATTACK, _impl_.ability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MELEEATTACK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MELEEATTACK, _impl_.ability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PATHFINDING, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PATHFINDING, _impl_.info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PATHFINDING, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PATHFINDING, _impl_.info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SHOOTPROJECTILE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SHOOTPROJECTILE, _impl_.info_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SHOOTPROJECTILE, _impl_.shooter_yaw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SHOOTPROJECTILE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SHOOTPROJECTILE, _impl_.shooterid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SHOOTPROJECTILE, _impl_.info_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SHOOTPROJECTILE, _impl_.shooter_yaw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_HITDAMAGE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_HITDAMAGE, _impl_.info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_HITDAMAGE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_HITDAMAGE, _impl_.info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SHOP_ITEM_LIST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SHOP_ITEM_LIST, _impl_.info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_REFRESH_ITEM_LIST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_REFRESH_ITEM_LIST, _impl_.success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_BUY_SHOP_ITEM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_BUY_SHOP_ITEM, _impl_.item_index_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_BUY_SHOP_ITEM, _impl_.full_inventory_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_BUY_SHOP_ITEM, _impl_.inventory_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BUY_SHOP_ITEM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BUY_SHOP_ITEM, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BUY_SHOP_ITEM, _impl_.item_index_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BUY_SHOP_ITEM, _impl_.info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MAIL_SEND, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MAIL_SEND, _impl_.mail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MAIL_LIST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MAIL_LIST, _impl_.mailbox_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MAIL_LIST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MAIL_LIST, _impl_.success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MAIL_ITEM_RECV, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MAIL_ITEM_RECV, _impl_.mailindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_GOLD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_GOLD, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_GOLD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_GOLD, _impl_.value_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Protocol::C_CREATEACCOUNT)},
  { 8, -1, -1, sizeof(::Protocol::S_CREATEACCOUNT)},
  { 15, -1, -1, sizeof(::Protocol::C_LOGIN)},
  { 23, -1, -1, sizeof(::Protocol::S_LOGIN)},
  { 32, -1, -1, sizeof(::Protocol::C_LOGOUT)},
  { 39, -1, -1, sizeof(::Protocol::S_LOGOUT)},
  { 46, -1, -1, sizeof(::Protocol::C_ENTER_GAME)},
  { 53, -1, -1, sizeof(::Protocol::S_ENTER_GAME)},
  { 61, -1, -1, sizeof(::Protocol::C_ENTER_ROOM)},
  { 69, -1, -1, sizeof(::Protocol::S_ENTER_ROOM)},
  { 77, -1, -1, sizeof(::Protocol::C_LEAVE_GAME)},
  { 83, -1, -1, sizeof(::Protocol::S_LEAVE_GAME)},
  { 89, -1, -1, sizeof(::Protocol::S_SPAWN)},
  { 97, -1, -1, sizeof(::Protocol::S_SPAWNPLAYER)},
  { 104, -1, -1, sizeof(::Protocol::S_SPAWNMONSTER)},
  { 111, -1, -1, sizeof(::Protocol::C_DROPITEM)},
  { 118, -1, -1, sizeof(::Protocol::C_INVENTORY_UPDATE)},
  { 126, -1, -1, sizeof(::Protocol::S_INVENTORY_UPDATE)},
  { 135, -1, -1, sizeof(::Protocol::C_INVENTORY_REMOVE)},
  { 143, -1, -1, sizeof(::Protocol::S_INVENTORY_REMOVE)},
  { 152, -1, -1, sizeof(::Protocol::C_SWAP_INVENTORY_TO_INVENTORY)},
  { 163, -1, -1, sizeof(::Protocol::C_TRY_PICK_ITEM_TO_INVENTORY)},
  { 172, -1, -1, sizeof(::Protocol::S_SPAWNITEM)},
  { 179, -1, -1, sizeof(::Protocol::S_SPAWNBOX)},
  { 186, -1, -1, sizeof(::Protocol::S_DESPAWN)},
  { 193, -1, -1, sizeof(::Protocol::S_DEATH)},
  { 200, -1, -1, sizeof(::Protocol::C_MOVE)},
  { 207, -1, -1, sizeof(::Protocol::S_MOVE)},
  { 214, -1, -1, sizeof(::Protocol::C_STATUS)},
  { 221, -1, -1, sizeof(::Protocol::S_STATUS)},
  { 228, -1, -1, sizeof(::Protocol::C_CHAT)},
  { 236, -1, -1, sizeof(::Protocol::S_CHAT)},
  { 243, -1, -1, sizeof(::Protocol::S_MELEEATTACK)},
  { 250, -1, -1, sizeof(::Protocol::C_MELEEATTACK)},
  { 257, -1, -1, sizeof(::Protocol::C_PATHFINDING)},
  { 264, -1, -1, sizeof(::Protocol::S_PATHFINDING)},
  { 271, -1, -1, sizeof(::Protocol::C_SHOOTPROJECTILE)},
  { 279, -1, -1, sizeof(::Protocol::S_SHOOTPROJECTILE)},
  { 288, -1, -1, sizeof(::Protocol::C_HITDAMAGE)},
  { 295, -1, -1, sizeof(::Protocol::S_HITDAMAGE)},
  { 302, -1, -1, sizeof(::Protocol::S_SHOP_ITEM_LIST)},
  { 309, -1, -1, sizeof(::Protocol::C_REFRESH_ITEM_LIST)},
  { 316, -1, -1, sizeof(::Protocol::C_BUY_SHOP_ITEM)},
  { 325, -1, -1, sizeof(::Protocol::S_BUY_SHOP_ITEM)},
  { 334, -1, -1, sizeof(::Protocol::S_MAIL_SEND)},
  { 341, -1, -1, sizeof(::Protocol::S_MAIL_LIST)},
  { 348, -1, -1, sizeof(::Protocol::C_MAIL_LIST)},
  { 355, -1, -1, sizeof(::Protocol::C_MAIL_ITEM_RECV)},
  { 362, -1, -1, sizeof(::Protocol::S_GOLD)},
  { 369, -1, -1, sizeof(::Protocol::C_GOLD)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Protocol::_C_CREATEACCOUNT_default_instance_._instance,
  &::Protocol::_S_CREATEACCOUNT_default_instance_._instance,
  &::Protocol::_C_LOGIN_default_instance_._instance,
  &::Protocol::_S_LOGIN_default_instance_._instance,
  &::Protocol::_C_LOGOUT_default_instance_._instance,
  &::Protocol::_S_LOGOUT_default_instance_._instance,
  &::Protocol::_C_ENTER_GAME_default_instance_._instance,
  &::Protocol::_S_ENTER_GAME_default_instance_._instance,
  &::Protocol::_C_ENTER_ROOM_default_instance_._instance,
  &::Protocol::_S_ENTER_ROOM_default_instance_._instance,
  &::Protocol::_C_LEAVE_GAME_default_instance_._instance,
  &::Protocol::_S_LEAVE_GAME_default_instance_._instance,
  &::Protocol::_S_SPAWN_default_instance_._instance,
  &::Protocol::_S_SPAWNPLAYER_default_instance_._instance,
  &::Protocol::_S_SPAWNMONSTER_default_instance_._instance,
  &::Protocol::_C_DROPITEM_default_instance_._instance,
  &::Protocol::_C_INVENTORY_UPDATE_default_instance_._instance,
  &::Protocol::_S_INVENTORY_UPDATE_default_instance_._instance,
  &::Protocol::_C_INVENTORY_REMOVE_default_instance_._instance,
  &::Protocol::_S_INVENTORY_REMOVE_default_instance_._instance,
  &::Protocol::_C_SWAP_INVENTORY_TO_INVENTORY_default_instance_._instance,
  &::Protocol::_C_TRY_PICK_ITEM_TO_INVENTORY_default_instance_._instance,
  &::Protocol::_S_SPAWNITEM_default_instance_._instance,
  &::Protocol::_S_SPAWNBOX_default_instance_._instance,
  &::Protocol::_S_DESPAWN_default_instance_._instance,
  &::Protocol::_S_DEATH_default_instance_._instance,
  &::Protocol::_C_MOVE_default_instance_._instance,
  &::Protocol::_S_MOVE_default_instance_._instance,
  &::Protocol::_C_STATUS_default_instance_._instance,
  &::Protocol::_S_STATUS_default_instance_._instance,
  &::Protocol::_C_CHAT_default_instance_._instance,
  &::Protocol::_S_CHAT_default_instance_._instance,
  &::Protocol::_S_MELEEATTACK_default_instance_._instance,
  &::Protocol::_C_MELEEATTACK_default_instance_._instance,
  &::Protocol::_C_PATHFINDING_default_instance_._instance,
  &::Protocol::_S_PATHFINDING_default_instance_._instance,
  &::Protocol::_C_SHOOTPROJECTILE_default_instance_._instance,
  &::Protocol::_S_SHOOTPROJECTILE_default_instance_._instance,
  &::Protocol::_C_HITDAMAGE_default_instance_._instance,
  &::Protocol::_S_HITDAMAGE_default_instance_._instance,
  &::Protocol::_S_SHOP_ITEM_LIST_default_instance_._instance,
  &::Protocol::_C_REFRESH_ITEM_LIST_default_instance_._instance,
  &::Protocol::_C_BUY_SHOP_ITEM_default_instance_._instance,
  &::Protocol::_S_BUY_SHOP_ITEM_default_instance_._instance,
  &::Protocol::_S_MAIL_SEND_default_instance_._instance,
  &::Protocol::_S_MAIL_LIST_default_instance_._instance,
  &::Protocol::_C_MAIL_LIST_default_instance_._instance,
  &::Protocol::_C_MAIL_ITEM_RECV_default_instance_._instance,
  &::Protocol::_S_GOLD_default_instance_._instance,
  &::Protocol::_C_GOLD_default_instance_._instance,
};

const char descriptor_table_protodef_Protocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016Protocol.proto\022\010Protocol\032\nEnum.proto\032\014"
  "Struct.proto\"5\n\017C_CREATEACCOUNT\022\020\n\010playe"
  "rId\030\001 \001(\t\022\020\n\010passward\030\002 \001(\t\"\"\n\017S_CREATEA"
  "CCOUNT\022\017\n\007success\030\001 \001(\010\"-\n\007C_LOGIN\022\020\n\010pl"
  "ayerId\030\001 \001(\t\022\020\n\010passward\030\002 \001(\t\"V\n\007S_LOGI"
  "N\022\017\n\007success\030\001 \001(\010\022%\n\007players\030\002 \003(\0132\024.Pr"
  "otocol.PlayerInfo\022\023\n\013playerIndex\030\003 \001(\004\"\034"
  "\n\010C_LOGOUT\022\020\n\010playerId\030\001 \001(\t\"\037\n\010S_LOGOUT"
  "\022\023\n\013playerIndex\030\001 \001(\004\"#\n\014C_ENTER_GAME\022\023\n"
  "\013playerIndex\030\001 \001(\004\"E\n\014S_ENTER_GAME\022\017\n\007su"
  "ccess\030\001 \001(\010\022$\n\006player\030\002 \001(\0132\024.Protocol.P"
  "layerInfo\"G\n\014C_ENTER_ROOM\022\021\n\troom_name\030\001"
  " \001(\t\022$\n\006player\030\002 \001(\0132\024.Protocol.PlayerIn"
  "fo\"E\n\014S_ENTER_ROOM\022\017\n\007success\030\001 \001(\010\022$\n\006p"
  "layer\030\002 \001(\0132\024.Protocol.PlayerInfo\"\016\n\014C_L"
  "EAVE_GAME\"\016\n\014S_LEAVE_GAME\"X\n\007S_SPAWN\022%\n\007"
  "players\030\001 \003(\0132\024.Protocol.ObjectInfo\022&\n\010m"
  "onsters\030\002 \003(\0132\024.Protocol.ObjectInfo\"6\n\rS"
  "_SPAWNPLAYER\022%\n\007players\030\001 \003(\0132\024.Protocol"
  ".PlayerInfo\"9\n\016S_SPAWNMONSTER\022\'\n\010monster"
  "s\030\001 \003(\0132\025.Protocol.MonsterInfo\"/\n\nC_DROP"
  "ITEM\022!\n\005items\030\001 \003(\0132\022.Protocol.ItemInfo\""
  "F\n\022C_INVENTORY_UPDATE\022\r\n\005index\030\001 \003(\r\022!\n\005"
  "items\030\002 \003(\0132\022.Protocol.ItemInfo\"Y\n\022S_INV"
  "ENTORY_UPDATE\022\021\n\tobject_id\030\001 \001(\004\022\r\n\005inde"
  "x\030\002 \003(\r\022!\n\005items\030\003 \003(\0132\022.Protocol.ItemIn"
  "fo\"8\n\022C_INVENTORY_REMOVE\022\r\n\005index\030\001 \003(\r\022"
  "\023\n\013count_items\030\002 \003(\r\"K\n\022S_INVENTORY_REMO"
  "VE\022\021\n\tobject_id\030\001 \001(\004\022\r\n\005index\030\002 \003(\r\022\023\n\013"
  "count_items\030\003 \003(\r\"\207\001\n\035C_SWAP_INVENTORY_T"
  "O_INVENTORY\022\026\n\016from_object_id\030\001 \001(\004\022\022\n\nf"
  "rom_index\030\002 \001(\r\022\022\n\nfrom_count\030\003 \001(\r\022\024\n\014t"
  "o_object_id\030\004 \001(\004\022\020\n\010to_index\030\005 \001(\r\"W\n\034C"
  "_TRY_PICK_ITEM_TO_INVENTORY\022\017\n\007item_id\030\001"
  " \001(\004\022\024\n\014to_object_id\030\002 \001(\004\022\020\n\010to_index\030\003"
  " \001(\r\"6\n\013S_SPAWNITEM\022\'\n\005items\030\001 \003(\0132\030.Pro"
  "tocol.ObjectItemInfo\"0\n\nS_SPAWNBOX\022\"\n\003bo"
  "x\030\001 \003(\0132\025.Protocol.ItemBoxInfo\"\037\n\tS_DESP"
  "AWN\022\022\n\nobject_ids\030\001 \003(\004\"\035\n\007S_DEATH\022\022\n\nob"
  "ject_ids\030\001 \001(\004\")\n\006C_MOVE\022\037\n\004info\030\001 \001(\0132\021"
  ".Protocol.PosInfo\")\n\006S_MOVE\022\037\n\004info\030\001 \001("
  "\0132\021.Protocol.PosInfo\".\n\010C_STATUS\022\"\n\004info"
  "\030\001 \001(\0132\024.Protocol.StatusInfo\".\n\010S_STATUS"
  "\022\"\n\004info\030\001 \001(\0132\024.Protocol.StatusInfo\"\'\n\006"
  "C_CHAT\022\020\n\010playerId\030\001 \001(\004\022\013\n\003msg\030\002 \001(\t\"\025\n"
  "\006S_CHAT\022\013\n\003msg\030\001 \001(\t\";\n\rS_MELEEATTACK\022*\n"
  "\007ability\030\001 \001(\0132\031.Protocol.MeleeAttackInf"
  "o\";\n\rC_MELEEATTACK\022*\n\007ability\030\001 \001(\0132\031.Pr"
  "otocol.MeleeAttackInfo\"0\n\rC_PATHFINDING\022"
  "\037\n\004info\030\001 \003(\0132\021.Protocol.PosInfo\"0\n\rS_PA"
  "THFINDING\022\037\n\004info\030\001 \003(\0132\021.Protocol.PosIn"
  "fo\"P\n\021C_SHOOTPROJECTILE\022&\n\004info\030\001 \003(\0132\030."
  "Protocol.ProjectileInfo\022\023\n\013shooter_yaw\030\002"
  " \001(\002\"c\n\021S_SHOOTPROJECTILE\022\021\n\tshooterid\030\001"
  " \001(\004\022&\n\004info\030\002 \003(\0132\030.Protocol.Projectile"
  "Info\022\023\n\013shooter_yaw\030\003 \001(\002\".\n\013C_HITDAMAGE"
  "\022\037\n\004info\030\001 \001(\0132\021.Protocol.HitInfo\".\n\013S_H"
  "ITDAMAGE\022\037\n\004info\030\001 \001(\0132\021.Protocol.HitInf"
  "o\"4\n\020S_SHOP_ITEM_LIST\022 \n\004info\030\001 \001(\0132\022.Pr"
  "otocol.ShopInfo\"&\n\023C_REFRESH_ITEM_LIST\022\017"
  "\n\007success\030\001 \001(\010\"V\n\017C_BUY_SHOP_ITEM\022\022\n\nit"
  "em_index\030\001 \001(\r\022\026\n\016full_inventory\030\002 \001(\010\022\027"
  "\n\017inventory_index\030\003 \001(\r\"\\\n\017S_BUY_SHOP_IT"
  "EM\022\017\n\007success\030\001 \001(\010\022\022\n\nitem_index\030\002 \001(\r\022"
  "$\n\004info\030\003 \001(\0132\026.Protocol.ShopItemInfo\"/\n"
  "\013S_MAIL_SEND\022 \n\004mail\030\001 \001(\0132\022.Protocol.Ma"
  "ilInfo\"5\n\013S_MAIL_LIST\022&\n\007mailbox\030\001 \001(\0132\025"
  ".Protocol.MailBoxInfo\"\036\n\013C_MAIL_LIST\022\017\n\007"
  "success\030\001 \001(\010\"%\n\020C_MAIL_ITEM_RECV\022\021\n\tmai"
  "lIndex\030\001 \001(\r\"\027\n\006S_GOLD\022\r\n\005value\030\001 \001(\004\"\027\n"
  "\006C_GOLD\022\r\n\005value\030\001 \001(\004b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_Protocol_2eproto_deps[2] = {
  &::descriptor_table_Enum_2eproto,
  &::descriptor_table_Struct_2eproto,
};
static ::_pbi::once_flag descriptor_table_Protocol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Protocol_2eproto = {
    false, false, 2830, descriptor_table_protodef_Protocol_2eproto,
    "Protocol.proto",
    &descriptor_table_Protocol_2eproto_once, descriptor_table_Protocol_2eproto_deps, 2, 50,
    schemas, file_default_instances, TableStruct_Protocol_2eproto::offsets,
    file_level_metadata_Protocol_2eproto, file_level_enum_descriptors_Protocol_2eproto,
    file_level_service_descriptors_Protocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Protocol_2eproto_getter() {
  return &descriptor_table_Protocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Protocol_2eproto(&descriptor_table_Protocol_2eproto);
namespace Protocol {

// ===================================================================

class C_CREATEACCOUNT::_Internal {
 public:
};

C_CREATEACCOUNT::C_CREATEACCOUNT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_CREATEACCOUNT)
}
C_CREATEACCOUNT::C_CREATEACCOUNT(const C_CREATEACCOUNT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_CREATEACCOUNT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){}
    , decltype(_impl_.passward_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.playerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playerid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_playerid().empty()) {
    _this->_impl_.playerid_.Set(from._internal_playerid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.passward_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.passward_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_passward().empty()) {
    _this->_impl_.passward_.Set(from._internal_passward(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_CREATEACCOUNT)
}

inline void C_CREATEACCOUNT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){}
    , decltype(_impl_.passward_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.playerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playerid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.passward_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.passward_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_CREATEACCOUNT::~C_CREATEACCOUNT() {
  // @@protoc_insertion_point(destructor:Protocol.C_CREATEACCOUNT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_CREATEACCOUNT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.playerid_.Destroy();
  _impl_.passward_.Destroy();
}

void C_CREATEACCOUNT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_CREATEACCOUNT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_CREATEACCOUNT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.playerid_.ClearToEmpty();
  _impl_.passward_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_CREATEACCOUNT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_playerid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_CREATEACCOUNT.playerId"));
        } else
          goto handle_unusual;
        continue;
      // string passward = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_passward();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_CREATEACCOUNT.passward"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_CREATEACCOUNT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_CREATEACCOUNT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string playerId = 1;
  if (!this->_internal_playerid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_playerid().data(), static_cast<int>(this->_internal_playerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_CREATEACCOUNT.playerId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_playerid(), target);
  }

  // string passward = 2;
  if (!this->_internal_passward().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_passward().data(), static_cast<int>(this->_internal_passward().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_CREATEACCOUNT.passward");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_passward(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_CREATEACCOUNT)
  return target;
}

size_t C_CREATEACCOUNT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_CREATEACCOUNT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string playerId = 1;
  if (!this->_internal_playerid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playerid());
  }

  // string passward = 2;
  if (!this->_internal_passward().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_passward());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_CREATEACCOUNT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_CREATEACCOUNT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_CREATEACCOUNT::GetClassData() const { return &_class_data_; }


void C_CREATEACCOUNT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_CREATEACCOUNT*>(&to_msg);
  auto& from = static_cast<const C_CREATEACCOUNT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_CREATEACCOUNT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_playerid().empty()) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  if (!from._internal_passward().empty()) {
    _this->_internal_set_passward(from._internal_passward());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_CREATEACCOUNT::CopyFrom(const C_CREATEACCOUNT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_CREATEACCOUNT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_CREATEACCOUNT::IsInitialized() const {
  return true;
}

void C_CREATEACCOUNT::InternalSwap(C_CREATEACCOUNT* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.playerid_, lhs_arena,
      &other->_impl_.playerid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.passward_, lhs_arena,
      &other->_impl_.passward_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata C_CREATEACCOUNT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[0]);
}

// ===================================================================

class S_CREATEACCOUNT::_Internal {
 public:
};

S_CREATEACCOUNT::S_CREATEACCOUNT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_CREATEACCOUNT)
}
S_CREATEACCOUNT::S_CREATEACCOUNT(const S_CREATEACCOUNT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_CREATEACCOUNT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_CREATEACCOUNT)
}

inline void S_CREATEACCOUNT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_CREATEACCOUNT::~S_CREATEACCOUNT() {
  // @@protoc_insertion_point(destructor:Protocol.S_CREATEACCOUNT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_CREATEACCOUNT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_CREATEACCOUNT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_CREATEACCOUNT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_CREATEACCOUNT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_CREATEACCOUNT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_CREATEACCOUNT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_CREATEACCOUNT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_CREATEACCOUNT)
  return target;
}

size_t S_CREATEACCOUNT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_CREATEACCOUNT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_CREATEACCOUNT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_CREATEACCOUNT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_CREATEACCOUNT::GetClassData() const { return &_class_data_; }


void S_CREATEACCOUNT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_CREATEACCOUNT*>(&to_msg);
  auto& from = static_cast<const S_CREATEACCOUNT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_CREATEACCOUNT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_CREATEACCOUNT::CopyFrom(const S_CREATEACCOUNT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_CREATEACCOUNT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_CREATEACCOUNT::IsInitialized() const {
  return true;
}

void S_CREATEACCOUNT::InternalSwap(S_CREATEACCOUNT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_CREATEACCOUNT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[1]);
}

// ===================================================================

class C_LOGIN::_Internal {
 public:
};

C_LOGIN::C_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_LOGIN)
}
C_LOGIN::C_LOGIN(const C_LOGIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_LOGIN* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){}
    , decltype(_impl_.passward_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.playerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playerid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_playerid().empty()) {
    _this->_impl_.playerid_.Set(from._internal_playerid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.passward_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.passward_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_passward().empty()) {
    _this->_impl_.passward_.Set(from._internal_passward(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_LOGIN)
}

inline void C_LOGIN::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){}
    , decltype(_impl_.passward_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.playerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playerid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.passward_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.passward_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_LOGIN::~C_LOGIN() {
  // @@protoc_insertion_point(destructor:Protocol.C_LOGIN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_LOGIN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.playerid_.Destroy();
  _impl_.passward_.Destroy();
}

void C_LOGIN::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_LOGIN::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_LOGIN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.playerid_.ClearToEmpty();
  _impl_.passward_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_LOGIN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_playerid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_LOGIN.playerId"));
        } else
          goto handle_unusual;
        continue;
      // string passward = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_passward();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_LOGIN.passward"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_LOGIN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_LOGIN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string playerId = 1;
  if (!this->_internal_playerid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_playerid().data(), static_cast<int>(this->_internal_playerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_LOGIN.playerId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_playerid(), target);
  }

  // string passward = 2;
  if (!this->_internal_passward().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_passward().data(), static_cast<int>(this->_internal_passward().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_LOGIN.passward");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_passward(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_LOGIN)
  return target;
}

size_t C_LOGIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_LOGIN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string playerId = 1;
  if (!this->_internal_playerid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playerid());
  }

  // string passward = 2;
  if (!this->_internal_passward().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_passward());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_LOGIN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_LOGIN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_LOGIN::GetClassData() const { return &_class_data_; }


void C_LOGIN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_LOGIN*>(&to_msg);
  auto& from = static_cast<const C_LOGIN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_LOGIN)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_playerid().empty()) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  if (!from._internal_passward().empty()) {
    _this->_internal_set_passward(from._internal_passward());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_LOGIN::CopyFrom(const C_LOGIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_LOGIN::IsInitialized() const {
  return true;
}

void C_LOGIN::InternalSwap(C_LOGIN* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.playerid_, lhs_arena,
      &other->_impl_.playerid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.passward_, lhs_arena,
      &other->_impl_.passward_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata C_LOGIN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[2]);
}

// ===================================================================

class S_LOGIN::_Internal {
 public:
};

void S_LOGIN::clear_players() {
  _impl_.players_.Clear();
}
S_LOGIN::S_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_LOGIN)
}
S_LOGIN::S_LOGIN(const S_LOGIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_LOGIN* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){from._impl_.players_}
    , decltype(_impl_.playerindex_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.playerindex_, &from._impl_.playerindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.success_) -
    reinterpret_cast<char*>(&_impl_.playerindex_)) + sizeof(_impl_.success_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_LOGIN)
}

inline void S_LOGIN::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){arena}
    , decltype(_impl_.playerindex_){uint64_t{0u}}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_LOGIN::~S_LOGIN() {
  // @@protoc_insertion_point(destructor:Protocol.S_LOGIN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_LOGIN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
}

void S_LOGIN::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_LOGIN::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_LOGIN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  ::memset(&_impl_.playerindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.success_) -
      reinterpret_cast<char*>(&_impl_.playerindex_)) + sizeof(_impl_.success_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_LOGIN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Protocol.PlayerInfo players = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 playerIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.playerindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_LOGIN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_LOGIN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // repeated .Protocol.PlayerInfo players = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 playerIndex = 3;
  if (this->_internal_playerindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_playerindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_LOGIN)
  return target;
}

size_t S_LOGIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_LOGIN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.PlayerInfo players = 2;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 playerIndex = 3;
  if (this->_internal_playerindex() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_playerindex());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_LOGIN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_LOGIN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_LOGIN::GetClassData() const { return &_class_data_; }


void S_LOGIN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_LOGIN*>(&to_msg);
  auto& from = static_cast<const S_LOGIN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_LOGIN)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  if (from._internal_playerindex() != 0) {
    _this->_internal_set_playerindex(from._internal_playerindex());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_LOGIN::CopyFrom(const S_LOGIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_LOGIN::IsInitialized() const {
  return true;
}

void S_LOGIN::InternalSwap(S_LOGIN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_LOGIN, _impl_.success_)
      + sizeof(S_LOGIN::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(S_LOGIN, _impl_.playerindex_)>(
          reinterpret_cast<char*>(&_impl_.playerindex_),
          reinterpret_cast<char*>(&other->_impl_.playerindex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_LOGIN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[3]);
}

// ===================================================================

class C_LOGOUT::_Internal {
 public:
};

C_LOGOUT::C_LOGOUT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_LOGOUT)
}
C_LOGOUT::C_LOGOUT(const C_LOGOUT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_LOGOUT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.playerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playerid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_playerid().empty()) {
    _this->_impl_.playerid_.Set(from._internal_playerid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_LOGOUT)
}

inline void C_LOGOUT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.playerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playerid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_LOGOUT::~C_LOGOUT() {
  // @@protoc_insertion_point(destructor:Protocol.C_LOGOUT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_LOGOUT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.playerid_.Destroy();
}

void C_LOGOUT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_LOGOUT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_LOGOUT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.playerid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_LOGOUT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_playerid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_LOGOUT.playerId"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_LOGOUT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_LOGOUT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string playerId = 1;
  if (!this->_internal_playerid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_playerid().data(), static_cast<int>(this->_internal_playerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_LOGOUT.playerId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_playerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_LOGOUT)
  return target;
}

size_t C_LOGOUT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_LOGOUT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string playerId = 1;
  if (!this->_internal_playerid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_LOGOUT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_LOGOUT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_LOGOUT::GetClassData() const { return &_class_data_; }


void C_LOGOUT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_LOGOUT*>(&to_msg);
  auto& from = static_cast<const C_LOGOUT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_LOGOUT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_playerid().empty()) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_LOGOUT::CopyFrom(const C_LOGOUT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_LOGOUT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_LOGOUT::IsInitialized() const {
  return true;
}

void C_LOGOUT::InternalSwap(C_LOGOUT* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.playerid_, lhs_arena,
      &other->_impl_.playerid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata C_LOGOUT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[4]);
}

// ===================================================================

class S_LOGOUT::_Internal {
 public:
};

S_LOGOUT::S_LOGOUT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_LOGOUT)
}
S_LOGOUT::S_LOGOUT(const S_LOGOUT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_LOGOUT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerindex_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.playerindex_ = from._impl_.playerindex_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_LOGOUT)
}

inline void S_LOGOUT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerindex_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_LOGOUT::~S_LOGOUT() {
  // @@protoc_insertion_point(destructor:Protocol.S_LOGOUT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_LOGOUT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_LOGOUT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_LOGOUT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_LOGOUT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.playerindex_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_LOGOUT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 playerIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_LOGOUT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_LOGOUT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 playerIndex = 1;
  if (this->_internal_playerindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_playerindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_LOGOUT)
  return target;
}

size_t S_LOGOUT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_LOGOUT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 playerIndex = 1;
  if (this->_internal_playerindex() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_playerindex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_LOGOUT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_LOGOUT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_LOGOUT::GetClassData() const { return &_class_data_; }


void S_LOGOUT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_LOGOUT*>(&to_msg);
  auto& from = static_cast<const S_LOGOUT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_LOGOUT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playerindex() != 0) {
    _this->_internal_set_playerindex(from._internal_playerindex());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_LOGOUT::CopyFrom(const S_LOGOUT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_LOGOUT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_LOGOUT::IsInitialized() const {
  return true;
}

void S_LOGOUT::InternalSwap(S_LOGOUT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.playerindex_, other->_impl_.playerindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_LOGOUT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[5]);
}

// ===================================================================

class C_ENTER_GAME::_Internal {
 public:
};

C_ENTER_GAME::C_ENTER_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_ENTER_GAME)
}
C_ENTER_GAME::C_ENTER_GAME(const C_ENTER_GAME& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_ENTER_GAME* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerindex_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.playerindex_ = from._impl_.playerindex_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_ENTER_GAME)
}

inline void C_ENTER_GAME::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerindex_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_ENTER_GAME::~C_ENTER_GAME() {
  // @@protoc_insertion_point(destructor:Protocol.C_ENTER_GAME)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_ENTER_GAME::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_ENTER_GAME::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_ENTER_GAME::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_ENTER_GAME)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.playerindex_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_ENTER_GAME::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 playerIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_ENTER_GAME::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_ENTER_GAME)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 playerIndex = 1;
  if (this->_internal_playerindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_playerindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_ENTER_GAME)
  return target;
}

size_t C_ENTER_GAME::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_ENTER_GAME)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 playerIndex = 1;
  if (this->_internal_playerindex() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_playerindex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_ENTER_GAME::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_ENTER_GAME::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_ENTER_GAME::GetClassData() const { return &_class_data_; }


void C_ENTER_GAME::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_ENTER_GAME*>(&to_msg);
  auto& from = static_cast<const C_ENTER_GAME&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_ENTER_GAME)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playerindex() != 0) {
    _this->_internal_set_playerindex(from._internal_playerindex());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_ENTER_GAME::CopyFrom(const C_ENTER_GAME& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_ENTER_GAME)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_ENTER_GAME::IsInitialized() const {
  return true;
}

void C_ENTER_GAME::InternalSwap(C_ENTER_GAME* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.playerindex_, other->_impl_.playerindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_ENTER_GAME::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[6]);
}

// ===================================================================

class S_ENTER_GAME::_Internal {
 public:
  static const ::Protocol::PlayerInfo& player(const S_ENTER_GAME* msg);
};

const ::Protocol::PlayerInfo&
S_ENTER_GAME::_Internal::player(const S_ENTER_GAME* msg) {
  return *msg->_impl_.player_;
}
void S_ENTER_GAME::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
S_ENTER_GAME::S_ENTER_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_ENTER_GAME)
}
S_ENTER_GAME::S_ENTER_GAME(const S_ENTER_GAME& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_ENTER_GAME* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::Protocol::PlayerInfo(*from._impl_.player_);
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_ENTER_GAME)
}

inline void S_ENTER_GAME::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_ENTER_GAME::~S_ENTER_GAME() {
  // @@protoc_insertion_point(destructor:Protocol.S_ENTER_GAME)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_ENTER_GAME::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_;
}

void S_ENTER_GAME::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_ENTER_GAME::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_ENTER_GAME)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ENTER_GAME::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PlayerInfo player = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ENTER_GAME::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_ENTER_GAME)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // .Protocol.PlayerInfo player = 2;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_ENTER_GAME)
  return target;
}

size_t S_ENTER_GAME::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_ENTER_GAME)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.PlayerInfo player = 2;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ENTER_GAME::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_ENTER_GAME::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ENTER_GAME::GetClassData() const { return &_class_data_; }


void S_ENTER_GAME::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_ENTER_GAME*>(&to_msg);
  auto& from = static_cast<const S_ENTER_GAME&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_ENTER_GAME)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::Protocol::PlayerInfo::MergeFrom(
        from._internal_player());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ENTER_GAME::CopyFrom(const S_ENTER_GAME& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_ENTER_GAME)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ENTER_GAME::IsInitialized() const {
  return true;
}

void S_ENTER_GAME::InternalSwap(S_ENTER_GAME* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_ENTER_GAME, _impl_.success_)
      + sizeof(S_ENTER_GAME::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(S_ENTER_GAME, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ENTER_GAME::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[7]);
}

// ===================================================================

class C_ENTER_ROOM::_Internal {
 public:
  static const ::Protocol::PlayerInfo& player(const C_ENTER_ROOM* msg);
};

const ::Protocol::PlayerInfo&
C_ENTER_ROOM::_Internal::player(const C_ENTER_ROOM* msg) {
  return *msg->_impl_.player_;
}
void C_ENTER_ROOM::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
C_ENTER_ROOM::C_ENTER_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_ENTER_ROOM)
}
C_ENTER_ROOM::C_ENTER_ROOM(const C_ENTER_ROOM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_ENTER_ROOM* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.room_name_){}
    , decltype(_impl_.player_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.room_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_name().empty()) {
    _this->_impl_.room_name_.Set(from._internal_room_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::Protocol::PlayerInfo(*from._impl_.player_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_ENTER_ROOM)
}

inline void C_ENTER_ROOM::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.room_name_){}
    , decltype(_impl_.player_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.room_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_ENTER_ROOM::~C_ENTER_ROOM() {
  // @@protoc_insertion_point(destructor:Protocol.C_ENTER_ROOM)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_ENTER_ROOM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.room_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.player_;
}

void C_ENTER_ROOM::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_ENTER_ROOM::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_ENTER_ROOM)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.room_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_ENTER_ROOM::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string room_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_room_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_ENTER_ROOM.room_name"));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PlayerInfo player = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_ENTER_ROOM::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_ENTER_ROOM)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string room_name = 1;
  if (!this->_internal_room_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_name().data(), static_cast<int>(this->_internal_room_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_ENTER_ROOM.room_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_room_name(), target);
  }

  // .Protocol.PlayerInfo player = 2;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_ENTER_ROOM)
  return target;
}

size_t C_ENTER_ROOM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_ENTER_ROOM)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string room_name = 1;
  if (!this->_internal_room_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_name());
  }

  // .Protocol.PlayerInfo player = 2;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_ENTER_ROOM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_ENTER_ROOM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_ENTER_ROOM::GetClassData() const { return &_class_data_; }


void C_ENTER_ROOM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_ENTER_ROOM*>(&to_msg);
  auto& from = static_cast<const C_ENTER_ROOM&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_ENTER_ROOM)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_room_name().empty()) {
    _this->_internal_set_room_name(from._internal_room_name());
  }
  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::Protocol::PlayerInfo::MergeFrom(
        from._internal_player());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_ENTER_ROOM::CopyFrom(const C_ENTER_ROOM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_ENTER_ROOM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_ENTER_ROOM::IsInitialized() const {
  return true;
}

void C_ENTER_ROOM::InternalSwap(C_ENTER_ROOM* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.room_name_, lhs_arena,
      &other->_impl_.room_name_, rhs_arena
  );
  swap(_impl_.player_, other->_impl_.player_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_ENTER_ROOM::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[8]);
}

// ===================================================================

class S_ENTER_ROOM::_Internal {
 public:
  static const ::Protocol::PlayerInfo& player(const S_ENTER_ROOM* msg);
};

const ::Protocol::PlayerInfo&
S_ENTER_ROOM::_Internal::player(const S_ENTER_ROOM* msg) {
  return *msg->_impl_.player_;
}
void S_ENTER_ROOM::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
S_ENTER_ROOM::S_ENTER_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_ENTER_ROOM)
}
S_ENTER_ROOM::S_ENTER_ROOM(const S_ENTER_ROOM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_ENTER_ROOM* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::Protocol::PlayerInfo(*from._impl_.player_);
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_ENTER_ROOM)
}

inline void S_ENTER_ROOM::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_ENTER_ROOM::~S_ENTER_ROOM() {
  // @@protoc_insertion_point(destructor:Protocol.S_ENTER_ROOM)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_ENTER_ROOM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_;
}

void S_ENTER_ROOM::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_ENTER_ROOM::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_ENTER_ROOM)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ENTER_ROOM::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PlayerInfo player = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ENTER_ROOM::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_ENTER_ROOM)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // .Protocol.PlayerInfo player = 2;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_ENTER_ROOM)
  return target;
}

size_t S_ENTER_ROOM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_ENTER_ROOM)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.PlayerInfo player = 2;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ENTER_ROOM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_ENTER_ROOM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ENTER_ROOM::GetClassData() const { return &_class_data_; }


void S_ENTER_ROOM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_ENTER_ROOM*>(&to_msg);
  auto& from = static_cast<const S_ENTER_ROOM&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_ENTER_ROOM)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::Protocol::PlayerInfo::MergeFrom(
        from._internal_player());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ENTER_ROOM::CopyFrom(const S_ENTER_ROOM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_ENTER_ROOM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ENTER_ROOM::IsInitialized() const {
  return true;
}

void S_ENTER_ROOM::InternalSwap(S_ENTER_ROOM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_ENTER_ROOM, _impl_.success_)
      + sizeof(S_ENTER_ROOM::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(S_ENTER_ROOM, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ENTER_ROOM::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[9]);
}

// ===================================================================

class C_LEAVE_GAME::_Internal {
 public:
};

C_LEAVE_GAME::C_LEAVE_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.C_LEAVE_GAME)
}
C_LEAVE_GAME::C_LEAVE_GAME(const C_LEAVE_GAME& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  C_LEAVE_GAME* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.C_LEAVE_GAME)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_LEAVE_GAME::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_LEAVE_GAME::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata C_LEAVE_GAME::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[10]);
}

// ===================================================================

class S_LEAVE_GAME::_Internal {
 public:
};

S_LEAVE_GAME::S_LEAVE_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.S_LEAVE_GAME)
}
S_LEAVE_GAME::S_LEAVE_GAME(const S_LEAVE_GAME& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  S_LEAVE_GAME* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_LEAVE_GAME)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_LEAVE_GAME::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_LEAVE_GAME::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata S_LEAVE_GAME::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[11]);
}

// ===================================================================

class S_SPAWN::_Internal {
 public:
};

void S_SPAWN::clear_players() {
  _impl_.players_.Clear();
}
void S_SPAWN::clear_monsters() {
  _impl_.monsters_.Clear();
}
S_SPAWN::S_SPAWN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_SPAWN)
}
S_SPAWN::S_SPAWN(const S_SPAWN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_SPAWN* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){from._impl_.players_}
    , decltype(_impl_.monsters_){from._impl_.monsters_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_SPAWN)
}

inline void S_SPAWN::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){arena}
    , decltype(_impl_.monsters_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_SPAWN::~S_SPAWN() {
  // @@protoc_insertion_point(destructor:Protocol.S_SPAWN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_SPAWN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
  _impl_.monsters_.~RepeatedPtrField();
}

void S_SPAWN::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_SPAWN::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_SPAWN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  _impl_.monsters_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_SPAWN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Protocol.ObjectInfo players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Protocol.ObjectInfo monsters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_monsters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_SPAWN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_SPAWN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Protocol.ObjectInfo players = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Protocol.ObjectInfo monsters = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_monsters_size()); i < n; i++) {
    const auto& repfield = this->_internal_monsters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_SPAWN)
  return target;
}

size_t S_SPAWN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_SPAWN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.ObjectInfo players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Protocol.ObjectInfo monsters = 2;
  total_size += 1UL * this->_internal_monsters_size();
  for (const auto& msg : this->_impl_.monsters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_SPAWN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_SPAWN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_SPAWN::GetClassData() const { return &_class_data_; }


void S_SPAWN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_SPAWN*>(&to_msg);
  auto& from = static_cast<const S_SPAWN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_SPAWN)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  _this->_impl_.monsters_.MergeFrom(from._impl_.monsters_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_SPAWN::CopyFrom(const S_SPAWN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_SPAWN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_SPAWN::IsInitialized() const {
  return true;
}

void S_SPAWN::InternalSwap(S_SPAWN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  _impl_.monsters_.InternalSwap(&other->_impl_.monsters_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_SPAWN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[12]);
}

// ===================================================================

class S_SPAWNPLAYER::_Internal {
 public:
};

void S_SPAWNPLAYER::clear_players() {
  _impl_.players_.Clear();
}
S_SPAWNPLAYER::S_SPAWNPLAYER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_SPAWNPLAYER)
}
S_SPAWNPLAYER::S_SPAWNPLAYER(const S_SPAWNPLAYER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_SPAWNPLAYER* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){from._impl_.players_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_SPAWNPLAYER)
}

inline void S_SPAWNPLAYER::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_SPAWNPLAYER::~S_SPAWNPLAYER() {
  // @@protoc_insertion_point(destructor:Protocol.S_SPAWNPLAYER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_SPAWNPLAYER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
}

void S_SPAWNPLAYER::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_SPAWNPLAYER::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_SPAWNPLAYER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_SPAWNPLAYER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Protocol.PlayerInfo players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_SPAWNPLAYER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_SPAWNPLAYER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Protocol.PlayerInfo players = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_SPAWNPLAYER)
  return target;
}

size_t S_SPAWNPLAYER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_SPAWNPLAYER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.PlayerInfo players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_SPAWNPLAYER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_SPAWNPLAYER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_SPAWNPLAYER::GetClassData() const { return &_class_data_; }


void S_SPAWNPLAYER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_SPAWNPLAYER*>(&to_msg);
  auto& from = static_cast<const S_SPAWNPLAYER&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_SPAWNPLAYER)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_SPAWNPLAYER::CopyFrom(const S_SPAWNPLAYER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_SPAWNPLAYER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_SPAWNPLAYER::IsInitialized() const {
  return true;
}

void S_SPAWNPLAYER::InternalSwap(S_SPAWNPLAYER* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_SPAWNPLAYER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[13]);
}

// ===================================================================

class S_SPAWNMONSTER::_Internal {
 public:
};

void S_SPAWNMONSTER::clear_monsters() {
  _impl_.monsters_.Clear();
}
S_SPAWNMONSTER::S_SPAWNMONSTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_SPAWNMONSTER)
}
S_SPAWNMONSTER::S_SPAWNMONSTER(const S_SPAWNMONSTER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_SPAWNMONSTER* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.monsters_){from._impl_.monsters_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_SPAWNMONSTER)
}

inline void S_SPAWNMONSTER::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.monsters_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_SPAWNMONSTER::~S_SPAWNMONSTER() {
  // @@protoc_insertion_point(destructor:Protocol.S_SPAWNMONSTER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_SPAWNMONSTER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.monsters_.~RepeatedPtrField();
}

void S_SPAWNMONSTER::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_SPAWNMONSTER::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_SPAWNMONSTER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.monsters_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_SPAWNMONSTER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Protocol.MonsterInfo monsters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_monsters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_SPAWNMONSTER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_SPAWNMONSTER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Protocol.MonsterInfo monsters = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_monsters_size()); i < n; i++) {
    const auto& repfield = this->_internal_monsters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_SPAWNMONSTER)
  return target;
}

size_t S_SPAWNMONSTER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_SPAWNMONSTER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.MonsterInfo monsters = 1;
  total_size += 1UL * this->_internal_monsters_size();
  for (const auto& msg : this->_impl_.monsters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_SPAWNMONSTER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_SPAWNMONSTER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_SPAWNMONSTER::GetClassData() const { return &_class_data_; }


void S_SPAWNMONSTER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_SPAWNMONSTER*>(&to_msg);
  auto& from = static_cast<const S_SPAWNMONSTER&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_SPAWNMONSTER)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.monsters_.MergeFrom(from._impl_.monsters_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_SPAWNMONSTER::CopyFrom(const S_SPAWNMONSTER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_SPAWNMONSTER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_SPAWNMONSTER::IsInitialized() const {
  return true;
}

void S_SPAWNMONSTER::InternalSwap(S_SPAWNMONSTER* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.monsters_.InternalSwap(&other->_impl_.monsters_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_SPAWNMONSTER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[14]);
}

// ===================================================================

class C_DROPITEM::_Internal {
 public:
};

void C_DROPITEM::clear_items() {
  _impl_.items_.Clear();
}
C_DROPITEM::C_DROPITEM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_DROPITEM)
}
C_DROPITEM::C_DROPITEM(const C_DROPITEM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_DROPITEM* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.C_DROPITEM)
}

inline void C_DROPITEM::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_DROPITEM::~C_DROPITEM() {
  // @@protoc_insertion_point(destructor:Protocol.C_DROPITEM)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_DROPITEM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void C_DROPITEM::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_DROPITEM::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_DROPITEM)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_DROPITEM::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Protocol.ItemInfo items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_DROPITEM::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_DROPITEM)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Protocol.ItemInfo items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_DROPITEM)
  return target;
}

size_t C_DROPITEM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_DROPITEM)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.ItemInfo items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_DROPITEM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_DROPITEM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_DROPITEM::GetClassData() const { return &_class_data_; }


void C_DROPITEM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_DROPITEM*>(&to_msg);
  auto& from = static_cast<const C_DROPITEM&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_DROPITEM)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_DROPITEM::CopyFrom(const C_DROPITEM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_DROPITEM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_DROPITEM::IsInitialized() const {
  return true;
}

void C_DROPITEM::InternalSwap(C_DROPITEM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_DROPITEM::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[15]);
}

// ===================================================================

class C_INVENTORY_UPDATE::_Internal {
 public:
};

void C_INVENTORY_UPDATE::clear_items() {
  _impl_.items_.Clear();
}
C_INVENTORY_UPDATE::C_INVENTORY_UPDATE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_INVENTORY_UPDATE)
}
C_INVENTORY_UPDATE::C_INVENTORY_UPDATE(const C_INVENTORY_UPDATE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_INVENTORY_UPDATE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){from._impl_.index_}
    , /*decltype(_impl_._index_cached_byte_size_)*/{0}
    , decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.C_INVENTORY_UPDATE)
}

inline void C_INVENTORY_UPDATE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){arena}
    , /*decltype(_impl_._index_cached_byte_size_)*/{0}
    , decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_INVENTORY_UPDATE::~C_INVENTORY_UPDATE() {
  // @@protoc_insertion_point(destructor:Protocol.C_INVENTORY_UPDATE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_INVENTORY_UPDATE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.index_.~RepeatedField();
  _impl_.items_.~RepeatedPtrField();
}

void C_INVENTORY_UPDATE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_INVENTORY_UPDATE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_INVENTORY_UPDATE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.index_.Clear();
  _impl_.items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_INVENTORY_UPDATE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Protocol.ItemInfo items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_INVENTORY_UPDATE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_INVENTORY_UPDATE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 index = 1;
  {
    int byte_size = _impl_._index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_index(), byte_size, target);
    }
  }

  // repeated .Protocol.ItemInfo items = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_INVENTORY_UPDATE)
  return target;
}

size_t C_INVENTORY_UPDATE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_INVENTORY_UPDATE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 index = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.index_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .Protocol.ItemInfo items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_INVENTORY_UPDATE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_INVENTORY_UPDATE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_INVENTORY_UPDATE::GetClassData() const { return &_class_data_; }


void C_INVENTORY_UPDATE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_INVENTORY_UPDATE*>(&to_msg);
  auto& from = static_cast<const C_INVENTORY_UPDATE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_INVENTORY_UPDATE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.index_.MergeFrom(from._impl_.index_);
  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_INVENTORY_UPDATE::CopyFrom(const C_INVENTORY_UPDATE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_INVENTORY_UPDATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_INVENTORY_UPDATE::IsInitialized() const {
  return true;
}

void C_INVENTORY_UPDATE::InternalSwap(C_INVENTORY_UPDATE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.index_.InternalSwap(&other->_impl_.index_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_INVENTORY_UPDATE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[16]);
}

// ===================================================================

class S_INVENTORY_UPDATE::_Internal {
 public:
};

void S_INVENTORY_UPDATE::clear_items() {
  _impl_.items_.Clear();
}
S_INVENTORY_UPDATE::S_INVENTORY_UPDATE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_INVENTORY_UPDATE)
}
S_INVENTORY_UPDATE::S_INVENTORY_UPDATE(const S_INVENTORY_UPDATE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_INVENTORY_UPDATE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){from._impl_.index_}
    , /*decltype(_impl_._index_cached_byte_size_)*/{0}
    , decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.object_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.object_id_ = from._impl_.object_id_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_INVENTORY_UPDATE)
}

inline void S_INVENTORY_UPDATE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){arena}
    , /*decltype(_impl_._index_cached_byte_size_)*/{0}
    , decltype(_impl_.items_){arena}
    , decltype(_impl_.object_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_INVENTORY_UPDATE::~S_INVENTORY_UPDATE() {
  // @@protoc_insertion_point(destructor:Protocol.S_INVENTORY_UPDATE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_INVENTORY_UPDATE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.index_.~RepeatedField();
  _impl_.items_.~RepeatedPtrField();
}

void S_INVENTORY_UPDATE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_INVENTORY_UPDATE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_INVENTORY_UPDATE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.index_.Clear();
  _impl_.items_.Clear();
  _impl_.object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_INVENTORY_UPDATE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Protocol.ItemInfo items = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_INVENTORY_UPDATE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_INVENTORY_UPDATE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // repeated uint32 index = 2;
  {
    int byte_size = _impl_._index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_index(), byte_size, target);
    }
  }

  // repeated .Protocol.ItemInfo items = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_INVENTORY_UPDATE)
  return target;
}

size_t S_INVENTORY_UPDATE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_INVENTORY_UPDATE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 index = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.index_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .Protocol.ItemInfo items = 3;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_INVENTORY_UPDATE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_INVENTORY_UPDATE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_INVENTORY_UPDATE::GetClassData() const { return &_class_data_; }


void S_INVENTORY_UPDATE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_INVENTORY_UPDATE*>(&to_msg);
  auto& from = static_cast<const S_INVENTORY_UPDATE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_INVENTORY_UPDATE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.index_.MergeFrom(from._impl_.index_);
  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_INVENTORY_UPDATE::CopyFrom(const S_INVENTORY_UPDATE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_INVENTORY_UPDATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_INVENTORY_UPDATE::IsInitialized() const {
  return true;
}

void S_INVENTORY_UPDATE::InternalSwap(S_INVENTORY_UPDATE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.index_.InternalSwap(&other->_impl_.index_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  swap(_impl_.object_id_, other->_impl_.object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_INVENTORY_UPDATE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[17]);
}

// ===================================================================

class C_INVENTORY_REMOVE::_Internal {
 public:
};

C_INVENTORY_REMOVE::C_INVENTORY_REMOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_INVENTORY_REMOVE)
}
C_INVENTORY_REMOVE::C_INVENTORY_REMOVE(const C_INVENTORY_REMOVE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_INVENTORY_REMOVE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){from._impl_.index_}
    , /*decltype(_impl_._index_cached_byte_size_)*/{0}
    , decltype(_impl_.count_items_){from._impl_.count_items_}
    , /*decltype(_impl_._count_items_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.C_INVENTORY_REMOVE)
}

inline void C_INVENTORY_REMOVE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){arena}
    , /*decltype(_impl_._index_cached_byte_size_)*/{0}
    , decltype(_impl_.count_items_){arena}
    , /*decltype(_impl_._count_items_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_INVENTORY_REMOVE::~C_INVENTORY_REMOVE() {
  // @@protoc_insertion_point(destructor:Protocol.C_INVENTORY_REMOVE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_INVENTORY_REMOVE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.index_.~RepeatedField();
  _impl_.count_items_.~RepeatedField();
}

void C_INVENTORY_REMOVE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_INVENTORY_REMOVE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_INVENTORY_REMOVE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.index_.Clear();
  _impl_.count_items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_INVENTORY_REMOVE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 count_items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_count_items(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_count_items(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_INVENTORY_REMOVE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_INVENTORY_REMOVE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 index = 1;
  {
    int byte_size = _impl_._index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_index(), byte_size, target);
    }
  }

  // repeated uint32 count_items = 2;
  {
    int byte_size = _impl_._count_items_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_count_items(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_INVENTORY_REMOVE)
  return target;
}

size_t C_INVENTORY_REMOVE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_INVENTORY_REMOVE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 index = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.index_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 count_items = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.count_items_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._count_items_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_INVENTORY_REMOVE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_INVENTORY_REMOVE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_INVENTORY_REMOVE::GetClassData() const { return &_class_data_; }


void C_INVENTORY_REMOVE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_INVENTORY_REMOVE*>(&to_msg);
  auto& from = static_cast<const C_INVENTORY_REMOVE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_INVENTORY_REMOVE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.index_.MergeFrom(from._impl_.index_);
  _this->_impl_.count_items_.MergeFrom(from._impl_.count_items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_INVENTORY_REMOVE::CopyFrom(const C_INVENTORY_REMOVE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_INVENTORY_REMOVE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_INVENTORY_REMOVE::IsInitialized() const {
  return true;
}

void C_INVENTORY_REMOVE::InternalSwap(C_INVENTORY_REMOVE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.index_.InternalSwap(&other->_impl_.index_);
  _impl_.count_items_.InternalSwap(&other->_impl_.count_items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_INVENTORY_REMOVE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[18]);
}

// ===================================================================

class S_INVENTORY_REMOVE::_Internal {
 public:
};

S_INVENTORY_REMOVE::S_INVENTORY_REMOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_INVENTORY_REMOVE)
}
S_INVENTORY_REMOVE::S_INVENTORY_REMOVE(const S_INVENTORY_REMOVE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_INVENTORY_REMOVE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){from._impl_.index_}
    , /*decltype(_impl_._index_cached_byte_size_)*/{0}
    , decltype(_impl_.count_items_){from._impl_.count_items_}
    , /*decltype(_impl_._count_items_cached_byte_size_)*/{0}
    , decltype(_impl_.object_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.object_id_ = from._impl_.object_id_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_INVENTORY_REMOVE)
}

inline void S_INVENTORY_REMOVE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){arena}
    , /*decltype(_impl_._index_cached_byte_size_)*/{0}
    , decltype(_impl_.count_items_){arena}
    , /*decltype(_impl_._count_items_cached_byte_size_)*/{0}
    , decltype(_impl_.object_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_INVENTORY_REMOVE::~S_INVENTORY_REMOVE() {
  // @@protoc_insertion_point(destructor:Protocol.S_INVENTORY_REMOVE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_INVENTORY_REMOVE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.index_.~RepeatedField();
  _impl_.count_items_.~RepeatedField();
}

void S_INVENTORY_REMOVE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_INVENTORY_REMOVE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_INVENTORY_REMOVE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.index_.Clear();
  _impl_.count_items_.Clear();
  _impl_.object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_INVENTORY_REMOVE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 count_items = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_count_items(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_count_items(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_INVENTORY_REMOVE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_INVENTORY_REMOVE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // repeated uint32 index = 2;
  {
    int byte_size = _impl_._index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_index(), byte_size, target);
    }
  }

  // repeated uint32 count_items = 3;
  {
    int byte_size = _impl_._count_items_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_count_items(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_INVENTORY_REMOVE)
  return target;
}

size_t S_INVENTORY_REMOVE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_INVENTORY_REMOVE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 index = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.index_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 count_items = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.count_items_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._count_items_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_INVENTORY_REMOVE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_INVENTORY_REMOVE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_INVENTORY_REMOVE::GetClassData() const { return &_class_data_; }


void S_INVENTORY_REMOVE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_INVENTORY_REMOVE*>(&to_msg);
  auto& from = static_cast<const S_INVENTORY_REMOVE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_INVENTORY_REMOVE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.index_.MergeFrom(from._impl_.index_);
  _this->_impl_.count_items_.MergeFrom(from._impl_.count_items_);
  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_INVENTORY_REMOVE::CopyFrom(const S_INVENTORY_REMOVE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_INVENTORY_REMOVE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_INVENTORY_REMOVE::IsInitialized() const {
  return true;
}

void S_INVENTORY_REMOVE::InternalSwap(S_INVENTORY_REMOVE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.index_.InternalSwap(&other->_impl_.index_);
  _impl_.count_items_.InternalSwap(&other->_impl_.count_items_);
  swap(_impl_.object_id_, other->_impl_.object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_INVENTORY_REMOVE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[19]);
}

// ===================================================================

class C_SWAP_INVENTORY_TO_INVENTORY::_Internal {
 public:
};

C_SWAP_INVENTORY_TO_INVENTORY::C_SWAP_INVENTORY_TO_INVENTORY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_SWAP_INVENTORY_TO_INVENTORY)
}
C_SWAP_INVENTORY_TO_INVENTORY::C_SWAP_INVENTORY_TO_INVENTORY(const C_SWAP_INVENTORY_TO_INVENTORY& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_SWAP_INVENTORY_TO_INVENTORY* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.from_object_id_){}
    , decltype(_impl_.from_index_){}
    , decltype(_impl_.from_count_){}
    , decltype(_impl_.to_object_id_){}
    , decltype(_impl_.to_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.from_object_id_, &from._impl_.from_object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.to_index_) -
    reinterpret_cast<char*>(&_impl_.from_object_id_)) + sizeof(_impl_.to_index_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_SWAP_INVENTORY_TO_INVENTORY)
}

inline void C_SWAP_INVENTORY_TO_INVENTORY::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.from_object_id_){uint64_t{0u}}
    , decltype(_impl_.from_index_){0u}
    , decltype(_impl_.from_count_){0u}
    , decltype(_impl_.to_object_id_){uint64_t{0u}}
    , decltype(_impl_.to_index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_SWAP_INVENTORY_TO_INVENTORY::~C_SWAP_INVENTORY_TO_INVENTORY() {
  // @@protoc_insertion_point(destructor:Protocol.C_SWAP_INVENTORY_TO_INVENTORY)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_SWAP_INVENTORY_TO_INVENTORY::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_SWAP_INVENTORY_TO_INVENTORY::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_SWAP_INVENTORY_TO_INVENTORY::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_SWAP_INVENTORY_TO_INVENTORY)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.from_object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.to_index_) -
      reinterpret_cast<char*>(&_impl_.from_object_id_)) + sizeof(_impl_.to_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_SWAP_INVENTORY_TO_INVENTORY::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 from_object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.from_object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 from_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.from_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 from_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.from_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 to_object_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.to_object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 to_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.to_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_SWAP_INVENTORY_TO_INVENTORY::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_SWAP_INVENTORY_TO_INVENTORY)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 from_object_id = 1;
  if (this->_internal_from_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_from_object_id(), target);
  }

  // uint32 from_index = 2;
  if (this->_internal_from_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_from_index(), target);
  }

  // uint32 from_count = 3;
  if (this->_internal_from_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_from_count(), target);
  }

  // uint64 to_object_id = 4;
  if (this->_internal_to_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_to_object_id(), target);
  }

  // uint32 to_index = 5;
  if (this->_internal_to_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_to_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_SWAP_INVENTORY_TO_INVENTORY)
  return target;
}

size_t C_SWAP_INVENTORY_TO_INVENTORY::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_SWAP_INVENTORY_TO_INVENTORY)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 from_object_id = 1;
  if (this->_internal_from_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_from_object_id());
  }

  // uint32 from_index = 2;
  if (this->_internal_from_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_from_index());
  }

  // uint32 from_count = 3;
  if (this->_internal_from_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_from_count());
  }

  // uint64 to_object_id = 4;
  if (this->_internal_to_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_to_object_id());
  }

  // uint32 to_index = 5;
  if (this->_internal_to_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_to_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_SWAP_INVENTORY_TO_INVENTORY::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_SWAP_INVENTORY_TO_INVENTORY::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_SWAP_INVENTORY_TO_INVENTORY::GetClassData() const { return &_class_data_; }


void C_SWAP_INVENTORY_TO_INVENTORY::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_SWAP_INVENTORY_TO_INVENTORY*>(&to_msg);
  auto& from = static_cast<const C_SWAP_INVENTORY_TO_INVENTORY&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_SWAP_INVENTORY_TO_INVENTORY)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_from_object_id() != 0) {
    _this->_internal_set_from_object_id(from._internal_from_object_id());
  }
  if (from._internal_from_index() != 0) {
    _this->_internal_set_from_index(from._internal_from_index());
  }
  if (from._internal_from_count() != 0) {
    _this->_internal_set_from_count(from._internal_from_count());
  }
  if (from._internal_to_object_id() != 0) {
    _this->_internal_set_to_object_id(from._internal_to_object_id());
  }
  if (from._internal_to_index() != 0) {
    _this->_internal_set_to_index(from._internal_to_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_SWAP_INVENTORY_TO_INVENTORY::CopyFrom(const C_SWAP_INVENTORY_TO_INVENTORY& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_SWAP_INVENTORY_TO_INVENTORY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_SWAP_INVENTORY_TO_INVENTORY::IsInitialized() const {
  return true;
}

void C_SWAP_INVENTORY_TO_INVENTORY::InternalSwap(C_SWAP_INVENTORY_TO_INVENTORY* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_SWAP_INVENTORY_TO_INVENTORY, _impl_.to_index_)
      + sizeof(C_SWAP_INVENTORY_TO_INVENTORY::_impl_.to_index_)
      - PROTOBUF_FIELD_OFFSET(C_SWAP_INVENTORY_TO_INVENTORY, _impl_.from_object_id_)>(
          reinterpret_cast<char*>(&_impl_.from_object_id_),
          reinterpret_cast<char*>(&other->_impl_.from_object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_SWAP_INVENTORY_TO_INVENTORY::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[20]);
}

// ===================================================================

class C_TRY_PICK_ITEM_TO_INVENTORY::_Internal {
 public:
};

C_TRY_PICK_ITEM_TO_INVENTORY::C_TRY_PICK_ITEM_TO_INVENTORY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_TRY_PICK_ITEM_TO_INVENTORY)
}
C_TRY_PICK_ITEM_TO_INVENTORY::C_TRY_PICK_ITEM_TO_INVENTORY(const C_TRY_PICK_ITEM_TO_INVENTORY& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_TRY_PICK_ITEM_TO_INVENTORY* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_id_){}
    , decltype(_impl_.to_object_id_){}
    , decltype(_impl_.to_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_id_, &from._impl_.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.to_index_) -
    reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.to_index_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_TRY_PICK_ITEM_TO_INVENTORY)
}

inline void C_TRY_PICK_ITEM_TO_INVENTORY::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_id_){uint64_t{0u}}
    , decltype(_impl_.to_object_id_){uint64_t{0u}}
    , decltype(_impl_.to_index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_TRY_PICK_ITEM_TO_INVENTORY::~C_TRY_PICK_ITEM_TO_INVENTORY() {
  // @@protoc_insertion_point(destructor:Protocol.C_TRY_PICK_ITEM_TO_INVENTORY)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_TRY_PICK_ITEM_TO_INVENTORY::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_TRY_PICK_ITEM_TO_INVENTORY::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_TRY_PICK_ITEM_TO_INVENTORY::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_TRY_PICK_ITEM_TO_INVENTORY)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.to_index_) -
      reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.to_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_TRY_PICK_ITEM_TO_INVENTORY::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 to_object_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.to_object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 to_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.to_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_TRY_PICK_ITEM_TO_INVENTORY::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_TRY_PICK_ITEM_TO_INVENTORY)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 item_id = 1;
  if (this->_internal_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_id(), target);
  }

  // uint64 to_object_id = 2;
  if (this->_internal_to_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_to_object_id(), target);
  }

  // uint32 to_index = 3;
  if (this->_internal_to_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_to_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_TRY_PICK_ITEM_TO_INVENTORY)
  return target;
}

size_t C_TRY_PICK_ITEM_TO_INVENTORY::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_TRY_PICK_ITEM_TO_INVENTORY)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 item_id = 1;
  if (this->_internal_item_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_item_id());
  }

  // uint64 to_object_id = 2;
  if (this->_internal_to_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_to_object_id());
  }

  // uint32 to_index = 3;
  if (this->_internal_to_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_to_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_TRY_PICK_ITEM_TO_INVENTORY::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_TRY_PICK_ITEM_TO_INVENTORY::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_TRY_PICK_ITEM_TO_INVENTORY::GetClassData() const { return &_class_data_; }


void C_TRY_PICK_ITEM_TO_INVENTORY::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_TRY_PICK_ITEM_TO_INVENTORY*>(&to_msg);
  auto& from = static_cast<const C_TRY_PICK_ITEM_TO_INVENTORY&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_TRY_PICK_ITEM_TO_INVENTORY)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_item_id() != 0) {
    _this->_internal_set_item_id(from._internal_item_id());
  }
  if (from._internal_to_object_id() != 0) {
    _this->_internal_set_to_object_id(from._internal_to_object_id());
  }
  if (from._internal_to_index() != 0) {
    _this->_internal_set_to_index(from._internal_to_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_TRY_PICK_ITEM_TO_INVENTORY::CopyFrom(const C_TRY_PICK_ITEM_TO_INVENTORY& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_TRY_PICK_ITEM_TO_INVENTORY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_TRY_PICK_ITEM_TO_INVENTORY::IsInitialized() const {
  return true;
}

void C_TRY_PICK_ITEM_TO_INVENTORY::InternalSwap(C_TRY_PICK_ITEM_TO_INVENTORY* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_TRY_PICK_ITEM_TO_INVENTORY, _impl_.to_index_)
      + sizeof(C_TRY_PICK_ITEM_TO_INVENTORY::_impl_.to_index_)
      - PROTOBUF_FIELD_OFFSET(C_TRY_PICK_ITEM_TO_INVENTORY, _impl_.item_id_)>(
          reinterpret_cast<char*>(&_impl_.item_id_),
          reinterpret_cast<char*>(&other->_impl_.item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_TRY_PICK_ITEM_TO_INVENTORY::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[21]);
}

// ===================================================================

class S_SPAWNITEM::_Internal {
 public:
};

void S_SPAWNITEM::clear_items() {
  _impl_.items_.Clear();
}
S_SPAWNITEM::S_SPAWNITEM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_SPAWNITEM)
}
S_SPAWNITEM::S_SPAWNITEM(const S_SPAWNITEM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_SPAWNITEM* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_SPAWNITEM)
}

inline void S_SPAWNITEM::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_SPAWNITEM::~S_SPAWNITEM() {
  // @@protoc_insertion_point(destructor:Protocol.S_SPAWNITEM)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_SPAWNITEM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void S_SPAWNITEM::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_SPAWNITEM::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_SPAWNITEM)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_SPAWNITEM::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Protocol.ObjectItemInfo items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_SPAWNITEM::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_SPAWNITEM)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Protocol.ObjectItemInfo items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_SPAWNITEM)
  return target;
}

size_t S_SPAWNITEM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_SPAWNITEM)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.ObjectItemInfo items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_SPAWNITEM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_SPAWNITEM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_SPAWNITEM::GetClassData() const { return &_class_data_; }


void S_SPAWNITEM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_SPAWNITEM*>(&to_msg);
  auto& from = static_cast<const S_SPAWNITEM&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_SPAWNITEM)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_SPAWNITEM::CopyFrom(const S_SPAWNITEM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_SPAWNITEM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_SPAWNITEM::IsInitialized() const {
  return true;
}

void S_SPAWNITEM::InternalSwap(S_SPAWNITEM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_SPAWNITEM::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[22]);
}

// ===================================================================

class S_SPAWNBOX::_Internal {
 public:
};

void S_SPAWNBOX::clear_box() {
  _impl_.box_.Clear();
}
S_SPAWNBOX::S_SPAWNBOX(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_SPAWNBOX)
}
S_SPAWNBOX::S_SPAWNBOX(const S_SPAWNBOX& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_SPAWNBOX* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.box_){from._impl_.box_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_SPAWNBOX)
}

inline void S_SPAWNBOX::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.box_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_SPAWNBOX::~S_SPAWNBOX() {
  // @@protoc_insertion_point(destructor:Protocol.S_SPAWNBOX)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_SPAWNBOX::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.box_.~RepeatedPtrField();
}

void S_SPAWNBOX::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_SPAWNBOX::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_SPAWNBOX)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.box_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_SPAWNBOX::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Protocol.ItemBoxInfo box = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_box(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_SPAWNBOX::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_SPAWNBOX)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Protocol.ItemBoxInfo box = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_box_size()); i < n; i++) {
    const auto& repfield = this->_internal_box(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_SPAWNBOX)
  return target;
}

size_t S_SPAWNBOX::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_SPAWNBOX)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.ItemBoxInfo box = 1;
  total_size += 1UL * this->_internal_box_size();
  for (const auto& msg : this->_impl_.box_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_SPAWNBOX::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_SPAWNBOX::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_SPAWNBOX::GetClassData() const { return &_class_data_; }


void S_SPAWNBOX::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_SPAWNBOX*>(&to_msg);
  auto& from = static_cast<const S_SPAWNBOX&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_SPAWNBOX)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.box_.MergeFrom(from._impl_.box_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_SPAWNBOX::CopyFrom(const S_SPAWNBOX& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_SPAWNBOX)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_SPAWNBOX::IsInitialized() const {
  return true;
}

void S_SPAWNBOX::InternalSwap(S_SPAWNBOX* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.box_.InternalSwap(&other->_impl_.box_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_SPAWNBOX::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[23]);
}

// ===================================================================

class S_DESPAWN::_Internal {
 public:
};

S_DESPAWN::S_DESPAWN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_DESPAWN)
}
S_DESPAWN::S_DESPAWN(const S_DESPAWN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_DESPAWN* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_ids_){from._impl_.object_ids_}
    , /*decltype(_impl_._object_ids_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_DESPAWN)
}

inline void S_DESPAWN::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_ids_){arena}
    , /*decltype(_impl_._object_ids_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_DESPAWN::~S_DESPAWN() {
  // @@protoc_insertion_point(destructor:Protocol.S_DESPAWN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_DESPAWN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.object_ids_.~RepeatedField();
}

void S_DESPAWN::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_DESPAWN::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_DESPAWN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.object_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_DESPAWN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 object_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_object_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_object_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_DESPAWN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_DESPAWN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 object_ids = 1;
  {
    int byte_size = _impl_._object_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_object_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_DESPAWN)
  return target;
}

size_t S_DESPAWN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_DESPAWN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 object_ids = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.object_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._object_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_DESPAWN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_DESPAWN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_DESPAWN::GetClassData() const { return &_class_data_; }


void S_DESPAWN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_DESPAWN*>(&to_msg);
  auto& from = static_cast<const S_DESPAWN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_DESPAWN)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.object_ids_.MergeFrom(from._impl_.object_ids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_DESPAWN::CopyFrom(const S_DESPAWN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_DESPAWN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_DESPAWN::IsInitialized() const {
  return true;
}

void S_DESPAWN::InternalSwap(S_DESPAWN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.object_ids_.InternalSwap(&other->_impl_.object_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_DESPAWN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[24]);
}

// ===================================================================

class S_DEATH::_Internal {
 public:
};

S_DEATH::S_DEATH(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_DEATH)
}
S_DEATH::S_DEATH(const S_DEATH& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_DEATH* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_ids_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.object_ids_ = from._impl_.object_ids_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_DEATH)
}

inline void S_DEATH::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_ids_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_DEATH::~S_DEATH() {
  // @@protoc_insertion_point(destructor:Protocol.S_DEATH)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_DEATH::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_DEATH::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_DEATH::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_DEATH)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.object_ids_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_DEATH::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_ids_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_DEATH::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_DEATH)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_ids = 1;
  if (this->_internal_object_ids() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_ids(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_DEATH)
  return target;
}

size_t S_DEATH::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_DEATH)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_ids = 1;
  if (this->_internal_object_ids() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_ids());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_DEATH::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_DEATH::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_DEATH::GetClassData() const { return &_class_data_; }


void S_DEATH::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_DEATH*>(&to_msg);
  auto& from = static_cast<const S_DEATH&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_DEATH)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_ids() != 0) {
    _this->_internal_set_object_ids(from._internal_object_ids());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_DEATH::CopyFrom(const S_DEATH& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_DEATH)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_DEATH::IsInitialized() const {
  return true;
}

void S_DEATH::InternalSwap(S_DEATH* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.object_ids_, other->_impl_.object_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_DEATH::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[25]);
}

// ===================================================================

class C_MOVE::_Internal {
 public:
  static const ::Protocol::PosInfo& info(const C_MOVE* msg);
};

const ::Protocol::PosInfo&
C_MOVE::_Internal::info(const C_MOVE* msg) {
  return *msg->_impl_.info_;
}
void C_MOVE::clear_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
}
C_MOVE::C_MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_MOVE)
}
C_MOVE::C_MOVE(const C_MOVE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_MOVE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    _this->_impl_.info_ = new ::Protocol::PosInfo(*from._impl_.info_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_MOVE)
}

inline void C_MOVE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_MOVE::~C_MOVE() {
  // @@protoc_insertion_point(destructor:Protocol.C_MOVE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_MOVE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.info_;
}

void C_MOVE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_MOVE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_MOVE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_MOVE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.PosInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_MOVE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_MOVE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.PosInfo info = 1;
  if (this->_internal_has_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_MOVE)
  return target;
}

size_t C_MOVE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_MOVE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.PosInfo info = 1;
  if (this->_internal_has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_MOVE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_MOVE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_MOVE::GetClassData() const { return &_class_data_; }


void C_MOVE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_MOVE*>(&to_msg);
  auto& from = static_cast<const C_MOVE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_MOVE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_info()) {
    _this->_internal_mutable_info()->::Protocol::PosInfo::MergeFrom(
        from._internal_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_MOVE::CopyFrom(const C_MOVE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_MOVE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_MOVE::IsInitialized() const {
  return true;
}

void C_MOVE::InternalSwap(C_MOVE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.info_, other->_impl_.info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_MOVE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[26]);
}

// ===================================================================

class S_MOVE::_Internal {
 public:
  static const ::Protocol::PosInfo& info(const S_MOVE* msg);
};

const ::Protocol::PosInfo&
S_MOVE::_Internal::info(const S_MOVE* msg) {
  return *msg->_impl_.info_;
}
void S_MOVE::clear_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
}
S_MOVE::S_MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_MOVE)
}
S_MOVE::S_MOVE(const S_MOVE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_MOVE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    _this->_impl_.info_ = new ::Protocol::PosInfo(*from._impl_.info_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_MOVE)
}

inline void S_MOVE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_MOVE::~S_MOVE() {
  // @@protoc_insertion_point(destructor:Protocol.S_MOVE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_MOVE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.info_;
}

void S_MOVE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_MOVE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_MOVE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_MOVE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.PosInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_MOVE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_MOVE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.PosInfo info = 1;
  if (this->_internal_has_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_MOVE)
  return target;
}

size_t S_MOVE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_MOVE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.PosInfo info = 1;
  if (this->_internal_has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_MOVE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_MOVE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_MOVE::GetClassData() const { return &_class_data_; }


void S_MOVE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_MOVE*>(&to_msg);
  auto& from = static_cast<const S_MOVE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_MOVE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_info()) {
    _this->_internal_mutable_info()->::Protocol::PosInfo::MergeFrom(
        from._internal_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_MOVE::CopyFrom(const S_MOVE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_MOVE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_MOVE::IsInitialized() const {
  return true;
}

void S_MOVE::InternalSwap(S_MOVE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.info_, other->_impl_.info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_MOVE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[27]);
}

// ===================================================================

class C_STATUS::_Internal {
 public:
  static const ::Protocol::StatusInfo& info(const C_STATUS* msg);
};

const ::Protocol::StatusInfo&
C_STATUS::_Internal::info(const C_STATUS* msg) {
  return *msg->_impl_.info_;
}
void C_STATUS::clear_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
}
C_STATUS::C_STATUS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_STATUS)
}
C_STATUS::C_STATUS(const C_STATUS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_STATUS* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    _this->_impl_.info_ = new ::Protocol::StatusInfo(*from._impl_.info_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_STATUS)
}

inline void C_STATUS::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_STATUS::~C_STATUS() {
  // @@protoc_insertion_point(destructor:Protocol.C_STATUS)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_STATUS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.info_;
}

void C_STATUS::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_STATUS::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_STATUS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_STATUS::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.StatusInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_STATUS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_STATUS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.StatusInfo info = 1;
  if (this->_internal_has_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_STATUS)
  return target;
}

size_t C_STATUS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_STATUS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.StatusInfo info = 1;
  if (this->_internal_has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_STATUS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_STATUS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_STATUS::GetClassData() const { return &_class_data_; }


void C_STATUS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_STATUS*>(&to_msg);
  auto& from = static_cast<const C_STATUS&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_STATUS)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_info()) {
    _this->_internal_mutable_info()->::Protocol::StatusInfo::MergeFrom(
        from._internal_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_STATUS::CopyFrom(const C_STATUS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_STATUS::IsInitialized() const {
  return true;
}

void C_STATUS::InternalSwap(C_STATUS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.info_, other->_impl_.info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_STATUS::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[28]);
}

// ===================================================================

class S_STATUS::_Internal {
 public:
  static const ::Protocol::StatusInfo& info(const S_STATUS* msg);
};

const ::Protocol::StatusInfo&
S_STATUS::_Internal::info(const S_STATUS* msg) {
  return *msg->_impl_.info_;
}
void S_STATUS::clear_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
}
S_STATUS::S_STATUS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_STATUS)
}
S_STATUS::S_STATUS(const S_STATUS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_STATUS* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    _this->_impl_.info_ = new ::Protocol::StatusInfo(*from._impl_.info_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_STATUS)
}

inline void S_STATUS::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_STATUS::~S_STATUS() {
  // @@protoc_insertion_point(destructor:Protocol.S_STATUS)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_STATUS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.info_;
}

void S_STATUS::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_STATUS::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_STATUS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_STATUS::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.StatusInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_STATUS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_STATUS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.StatusInfo info = 1;
  if (this->_internal_has_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_STATUS)
  return target;
}

size_t S_STATUS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_STATUS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.StatusInfo info = 1;
  if (this->_internal_has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_STATUS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_STATUS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_STATUS::GetClassData() const { return &_class_data_; }


void S_STATUS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_STATUS*>(&to_msg);
  auto& from = static_cast<const S_STATUS&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_STATUS)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_info()) {
    _this->_internal_mutable_info()->::Protocol::StatusInfo::MergeFrom(
        from._internal_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_STATUS::CopyFrom(const S_STATUS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_STATUS::IsInitialized() const {
  return true;
}

void S_STATUS::InternalSwap(S_STATUS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.info_, other->_impl_.info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_STATUS::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[29]);
}

// ===================================================================

class C_CHAT::_Internal {
 public:
};

C_CHAT::C_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_CHAT)
}
C_CHAT::C_CHAT(const C_CHAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_CHAT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , decltype(_impl_.playerid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.playerid_ = from._impl_.playerid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_CHAT)
}

inline void C_CHAT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , decltype(_impl_.playerid_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_CHAT::~C_CHAT() {
  // @@protoc_insertion_point(destructor:Protocol.C_CHAT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_CHAT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
}

void C_CHAT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_CHAT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_CHAT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_.ClearToEmpty();
  _impl_.playerid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_CHAT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_CHAT.msg"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_CHAT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_CHAT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 playerId = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_playerid(), target);
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_CHAT.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_CHAT)
  return target;
}

size_t C_CHAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_CHAT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // uint64 playerId = 1;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_playerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_CHAT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_CHAT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_CHAT::GetClassData() const { return &_class_data_; }


void C_CHAT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_CHAT*>(&to_msg);
  auto& from = static_cast<const C_CHAT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_CHAT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_CHAT::CopyFrom(const C_CHAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_CHAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_CHAT::IsInitialized() const {
  return true;
}

void C_CHAT::InternalSwap(C_CHAT* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  swap(_impl_.playerid_, other->_impl_.playerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_CHAT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[30]);
}

// ===================================================================

class S_CHAT::_Internal {
 public:
};

S_CHAT::S_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_CHAT)
}
S_CHAT::S_CHAT(const S_CHAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_CHAT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_CHAT)
}

inline void S_CHAT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S_CHAT::~S_CHAT() {
  // @@protoc_insertion_point(destructor:Protocol.S_CHAT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_CHAT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
}

void S_CHAT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_CHAT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_CHAT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_CHAT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_CHAT.msg"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_CHAT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_CHAT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_CHAT.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_CHAT)
  return target;
}

size_t S_CHAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_CHAT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_CHAT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_CHAT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_CHAT::GetClassData() const { return &_class_data_; }


void S_CHAT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_CHAT*>(&to_msg);
  auto& from = static_cast<const S_CHAT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_CHAT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_CHAT::CopyFrom(const S_CHAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_CHAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_CHAT::IsInitialized() const {
  return true;
}

void S_CHAT::InternalSwap(S_CHAT* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata S_CHAT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[31]);
}

// ===================================================================

class S_MELEEATTACK::_Internal {
 public:
  static const ::Protocol::MeleeAttackInfo& ability(const S_MELEEATTACK* msg);
};

const ::Protocol::MeleeAttackInfo&
S_MELEEATTACK::_Internal::ability(const S_MELEEATTACK* msg) {
  return *msg->_impl_.ability_;
}
void S_MELEEATTACK::clear_ability() {
  if (GetArenaForAllocation() == nullptr && _impl_.ability_ != nullptr) {
    delete _impl_.ability_;
  }
  _impl_.ability_ = nullptr;
}
S_MELEEATTACK::S_MELEEATTACK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_MELEEATTACK)
}
S_MELEEATTACK::S_MELEEATTACK(const S_MELEEATTACK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_MELEEATTACK* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ability_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ability()) {
    _this->_impl_.ability_ = new ::Protocol::MeleeAttackInfo(*from._impl_.ability_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_MELEEATTACK)
}

inline void S_MELEEATTACK::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ability_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_MELEEATTACK::~S_MELEEATTACK() {
  // @@protoc_insertion_point(destructor:Protocol.S_MELEEATTACK)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_MELEEATTACK::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.ability_;
}

void S_MELEEATTACK::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_MELEEATTACK::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_MELEEATTACK)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.ability_ != nullptr) {
    delete _impl_.ability_;
  }
  _impl_.ability_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_MELEEATTACK::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.MeleeAttackInfo ability = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ability(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_MELEEATTACK::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_MELEEATTACK)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.MeleeAttackInfo ability = 1;
  if (this->_internal_has_ability()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ability(this),
        _Internal::ability(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_MELEEATTACK)
  return target;
}

size_t S_MELEEATTACK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_MELEEATTACK)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.MeleeAttackInfo ability = 1;
  if (this->_internal_has_ability()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ability_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_MELEEATTACK::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_MELEEATTACK::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_MELEEATTACK::GetClassData() const { return &_class_data_; }


void S_MELEEATTACK::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_MELEEATTACK*>(&to_msg);
  auto& from = static_cast<const S_MELEEATTACK&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_MELEEATTACK)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ability()) {
    _this->_internal_mutable_ability()->::Protocol::MeleeAttackInfo::MergeFrom(
        from._internal_ability());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_MELEEATTACK::CopyFrom(const S_MELEEATTACK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_MELEEATTACK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_MELEEATTACK::IsInitialized() const {
  return true;
}

void S_MELEEATTACK::InternalSwap(S_MELEEATTACK* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.ability_, other->_impl_.ability_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_MELEEATTACK::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[32]);
}

// ===================================================================

class C_MELEEATTACK::_Internal {
 public:
  static const ::Protocol::MeleeAttackInfo& ability(const C_MELEEATTACK* msg);
};

const ::Protocol::MeleeAttackInfo&
C_MELEEATTACK::_Internal::ability(const C_MELEEATTACK* msg) {
  return *msg->_impl_.ability_;
}
void C_MELEEATTACK::clear_ability() {
  if (GetArenaForAllocation() == nullptr && _impl_.ability_ != nullptr) {
    delete _impl_.ability_;
  }
  _impl_.ability_ = nullptr;
}
C_MELEEATTACK::C_MELEEATTACK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_MELEEATTACK)
}
C_MELEEATTACK::C_MELEEATTACK(const C_MELEEATTACK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_MELEEATTACK* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ability_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ability()) {
    _this->_impl_.ability_ = new ::Protocol::MeleeAttackInfo(*from._impl_.ability_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_MELEEATTACK)
}

inline void C_MELEEATTACK::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ability_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_MELEEATTACK::~C_MELEEATTACK() {
  // @@protoc_insertion_point(destructor:Protocol.C_MELEEATTACK)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_MELEEATTACK::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.ability_;
}

void C_MELEEATTACK::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_MELEEATTACK::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_MELEEATTACK)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.ability_ != nullptr) {
    delete _impl_.ability_;
  }
  _impl_.ability_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_MELEEATTACK::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.MeleeAttackInfo ability = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ability(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_MELEEATTACK::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_MELEEATTACK)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.MeleeAttackInfo ability = 1;
  if (this->_internal_has_ability()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ability(this),
        _Internal::ability(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_MELEEATTACK)
  return target;
}

size_t C_MELEEATTACK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_MELEEATTACK)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.MeleeAttackInfo ability = 1;
  if (this->_internal_has_ability()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ability_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_MELEEATTACK::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_MELEEATTACK::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_MELEEATTACK::GetClassData() const { return &_class_data_; }


void C_MELEEATTACK::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_MELEEATTACK*>(&to_msg);
  auto& from = static_cast<const C_MELEEATTACK&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_MELEEATTACK)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ability()) {
    _this->_internal_mutable_ability()->::Protocol::MeleeAttackInfo::MergeFrom(
        from._internal_ability());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_MELEEATTACK::CopyFrom(const C_MELEEATTACK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_MELEEATTACK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_MELEEATTACK::IsInitialized() const {
  return true;
}

void C_MELEEATTACK::InternalSwap(C_MELEEATTACK* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.ability_, other->_impl_.ability_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_MELEEATTACK::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[33]);
}

// ===================================================================

class C_PATHFINDING::_Internal {
 public:
};

void C_PATHFINDING::clear_info() {
  _impl_.info_.Clear();
}
C_PATHFINDING::C_PATHFINDING(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_PATHFINDING)
}
C_PATHFINDING::C_PATHFINDING(const C_PATHFINDING& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_PATHFINDING* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){from._impl_.info_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.C_PATHFINDING)
}

inline void C_PATHFINDING::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_PATHFINDING::~C_PATHFINDING() {
  // @@protoc_insertion_point(destructor:Protocol.C_PATHFINDING)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_PATHFINDING::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.info_.~RepeatedPtrField();
}

void C_PATHFINDING::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_PATHFINDING::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_PATHFINDING)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.info_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_PATHFINDING::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Protocol.PosInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_PATHFINDING::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_PATHFINDING)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Protocol.PosInfo info = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_PATHFINDING)
  return target;
}

size_t C_PATHFINDING::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_PATHFINDING)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.PosInfo info = 1;
  total_size += 1UL * this->_internal_info_size();
  for (const auto& msg : this->_impl_.info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_PATHFINDING::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_PATHFINDING::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_PATHFINDING::GetClassData() const { return &_class_data_; }


void C_PATHFINDING::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_PATHFINDING*>(&to_msg);
  auto& from = static_cast<const C_PATHFINDING&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_PATHFINDING)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.info_.MergeFrom(from._impl_.info_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_PATHFINDING::CopyFrom(const C_PATHFINDING& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_PATHFINDING)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_PATHFINDING::IsInitialized() const {
  return true;
}

void C_PATHFINDING::InternalSwap(C_PATHFINDING* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.info_.InternalSwap(&other->_impl_.info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_PATHFINDING::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[34]);
}

// ===================================================================

class S_PATHFINDING::_Internal {
 public:
};

void S_PATHFINDING::clear_info() {
  _impl_.info_.Clear();
}
S_PATHFINDING::S_PATHFINDING(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_PATHFINDING)
}
S_PATHFINDING::S_PATHFINDING(const S_PATHFINDING& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_PATHFINDING* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){from._impl_.info_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_PATHFINDING)
}

inline void S_PATHFINDING::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_PATHFINDING::~S_PATHFINDING() {
  // @@protoc_insertion_point(destructor:Protocol.S_PATHFINDING)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_PATHFINDING::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.info_.~RepeatedPtrField();
}

void S_PATHFINDING::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_PATHFINDING::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_PATHFINDING)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.info_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_PATHFINDING::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Protocol.PosInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_PATHFINDING::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_PATHFINDING)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Protocol.PosInfo info = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_PATHFINDING)
  return target;
}

size_t S_PATHFINDING::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_PATHFINDING)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.PosInfo info = 1;
  total_size += 1UL * this->_internal_info_size();
  for (const auto& msg : this->_impl_.info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_PATHFINDING::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_PATHFINDING::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_PATHFINDING::GetClassData() const { return &_class_data_; }


void S_PATHFINDING::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_PATHFINDING*>(&to_msg);
  auto& from = static_cast<const S_PATHFINDING&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_PATHFINDING)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.info_.MergeFrom(from._impl_.info_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_PATHFINDING::CopyFrom(const S_PATHFINDING& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_PATHFINDING)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_PATHFINDING::IsInitialized() const {
  return true;
}

void S_PATHFINDING::InternalSwap(S_PATHFINDING* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.info_.InternalSwap(&other->_impl_.info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_PATHFINDING::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[35]);
}

// ===================================================================

class C_SHOOTPROJECTILE::_Internal {
 public:
};

void C_SHOOTPROJECTILE::clear_info() {
  _impl_.info_.Clear();
}
C_SHOOTPROJECTILE::C_SHOOTPROJECTILE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_SHOOTPROJECTILE)
}
C_SHOOTPROJECTILE::C_SHOOTPROJECTILE(const C_SHOOTPROJECTILE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_SHOOTPROJECTILE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){from._impl_.info_}
    , decltype(_impl_.shooter_yaw_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.shooter_yaw_ = from._impl_.shooter_yaw_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_SHOOTPROJECTILE)
}

inline void C_SHOOTPROJECTILE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){arena}
    , decltype(_impl_.shooter_yaw_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_SHOOTPROJECTILE::~C_SHOOTPROJECTILE() {
  // @@protoc_insertion_point(destructor:Protocol.C_SHOOTPROJECTILE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_SHOOTPROJECTILE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.info_.~RepeatedPtrField();
}

void C_SHOOTPROJECTILE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_SHOOTPROJECTILE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_SHOOTPROJECTILE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.info_.Clear();
  _impl_.shooter_yaw_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_SHOOTPROJECTILE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Protocol.ProjectileInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // float shooter_yaw = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.shooter_yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_SHOOTPROJECTILE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_SHOOTPROJECTILE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Protocol.ProjectileInfo info = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // float shooter_yaw = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_shooter_yaw = this->_internal_shooter_yaw();
  uint32_t raw_shooter_yaw;
  memcpy(&raw_shooter_yaw, &tmp_shooter_yaw, sizeof(tmp_shooter_yaw));
  if (raw_shooter_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_shooter_yaw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_SHOOTPROJECTILE)
  return target;
}

size_t C_SHOOTPROJECTILE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_SHOOTPROJECTILE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.ProjectileInfo info = 1;
  total_size += 1UL * this->_internal_info_size();
  for (const auto& msg : this->_impl_.info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // float shooter_yaw = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_shooter_yaw = this->_internal_shooter_yaw();
  uint32_t raw_shooter_yaw;
  memcpy(&raw_shooter_yaw, &tmp_shooter_yaw, sizeof(tmp_shooter_yaw));
  if (raw_shooter_yaw != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_SHOOTPROJECTILE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_SHOOTPROJECTILE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_SHOOTPROJECTILE::GetClassData() const { return &_class_data_; }


void C_SHOOTPROJECTILE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_SHOOTPROJECTILE*>(&to_msg);
  auto& from = static_cast<const C_SHOOTPROJECTILE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_SHOOTPROJECTILE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.info_.MergeFrom(from._impl_.info_);
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_shooter_yaw = from._internal_shooter_yaw();
  uint32_t raw_shooter_yaw;
  memcpy(&raw_shooter_yaw, &tmp_shooter_yaw, sizeof(tmp_shooter_yaw));
  if (raw_shooter_yaw != 0) {
    _this->_internal_set_shooter_yaw(from._internal_shooter_yaw());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_SHOOTPROJECTILE::CopyFrom(const C_SHOOTPROJECTILE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_SHOOTPROJECTILE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_SHOOTPROJECTILE::IsInitialized() const {
  return true;
}

void C_SHOOTPROJECTILE::InternalSwap(C_SHOOTPROJECTILE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.info_.InternalSwap(&other->_impl_.info_);
  swap(_impl_.shooter_yaw_, other->_impl_.shooter_yaw_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_SHOOTPROJECTILE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[36]);
}

// ===================================================================

class S_SHOOTPROJECTILE::_Internal {
 public:
};

void S_SHOOTPROJECTILE::clear_info() {
  _impl_.info_.Clear();
}
S_SHOOTPROJECTILE::S_SHOOTPROJECTILE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_SHOOTPROJECTILE)
}
S_SHOOTPROJECTILE::S_SHOOTPROJECTILE(const S_SHOOTPROJECTILE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_SHOOTPROJECTILE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){from._impl_.info_}
    , decltype(_impl_.shooterid_){}
    , decltype(_impl_.shooter_yaw_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.shooterid_, &from._impl_.shooterid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.shooter_yaw_) -
    reinterpret_cast<char*>(&_impl_.shooterid_)) + sizeof(_impl_.shooter_yaw_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_SHOOTPROJECTILE)
}

inline void S_SHOOTPROJECTILE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){arena}
    , decltype(_impl_.shooterid_){uint64_t{0u}}
    , decltype(_impl_.shooter_yaw_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_SHOOTPROJECTILE::~S_SHOOTPROJECTILE() {
  // @@protoc_insertion_point(destructor:Protocol.S_SHOOTPROJECTILE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_SHOOTPROJECTILE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.info_.~RepeatedPtrField();
}

void S_SHOOTPROJECTILE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_SHOOTPROJECTILE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_SHOOTPROJECTILE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.info_.Clear();
  ::memset(&_impl_.shooterid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.shooter_yaw_) -
      reinterpret_cast<char*>(&_impl_.shooterid_)) + sizeof(_impl_.shooter_yaw_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_SHOOTPROJECTILE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 shooterid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.shooterid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Protocol.ProjectileInfo info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // float shooter_yaw = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.shooter_yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_SHOOTPROJECTILE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_SHOOTPROJECTILE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 shooterid = 1;
  if (this->_internal_shooterid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_shooterid(), target);
  }

  // repeated .Protocol.ProjectileInfo info = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // float shooter_yaw = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_shooter_yaw = this->_internal_shooter_yaw();
  uint32_t raw_shooter_yaw;
  memcpy(&raw_shooter_yaw, &tmp_shooter_yaw, sizeof(tmp_shooter_yaw));
  if (raw_shooter_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_shooter_yaw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_SHOOTPROJECTILE)
  return target;
}

size_t S_SHOOTPROJECTILE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_SHOOTPROJECTILE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.ProjectileInfo info = 2;
  total_size += 1UL * this->_internal_info_size();
  for (const auto& msg : this->_impl_.info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 shooterid = 1;
  if (this->_internal_shooterid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_shooterid());
  }

  // float shooter_yaw = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_shooter_yaw = this->_internal_shooter_yaw();
  uint32_t raw_shooter_yaw;
  memcpy(&raw_shooter_yaw, &tmp_shooter_yaw, sizeof(tmp_shooter_yaw));
  if (raw_shooter_yaw != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_SHOOTPROJECTILE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_SHOOTPROJECTILE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_SHOOTPROJECTILE::GetClassData() const { return &_class_data_; }


void S_SHOOTPROJECTILE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_SHOOTPROJECTILE*>(&to_msg);
  auto& from = static_cast<const S_SHOOTPROJECTILE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_SHOOTPROJECTILE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.info_.MergeFrom(from._impl_.info_);
  if (from._internal_shooterid() != 0) {
    _this->_internal_set_shooterid(from._internal_shooterid());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_shooter_yaw = from._internal_shooter_yaw();
  uint32_t raw_shooter_yaw;
  memcpy(&raw_shooter_yaw, &tmp_shooter_yaw, sizeof(tmp_shooter_yaw));
  if (raw_shooter_yaw != 0) {
    _this->_internal_set_shooter_yaw(from._internal_shooter_yaw());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_SHOOTPROJECTILE::CopyFrom(const S_SHOOTPROJECTILE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_SHOOTPROJECTILE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_SHOOTPROJECTILE::IsInitialized() const {
  return true;
}

void S_SHOOTPROJECTILE::InternalSwap(S_SHOOTPROJECTILE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.info_.InternalSwap(&other->_impl_.info_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_SHOOTPROJECTILE, _impl_.shooter_yaw_)
      + sizeof(S_SHOOTPROJECTILE::_impl_.shooter_yaw_)
      - PROTOBUF_FIELD_OFFSET(S_SHOOTPROJECTILE, _impl_.shooterid_)>(
          reinterpret_cast<char*>(&_impl_.shooterid_),
          reinterpret_cast<char*>(&other->_impl_.shooterid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_SHOOTPROJECTILE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[37]);
}

// ===================================================================

class C_HITDAMAGE::_Internal {
 public:
  static const ::Protocol::HitInfo& info(const C_HITDAMAGE* msg);
};

const ::Protocol::HitInfo&
C_HITDAMAGE::_Internal::info(const C_HITDAMAGE* msg) {
  return *msg->_impl_.info_;
}
void C_HITDAMAGE::clear_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
}
C_HITDAMAGE::C_HITDAMAGE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_HITDAMAGE)
}
C_HITDAMAGE::C_HITDAMAGE(const C_HITDAMAGE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_HITDAMAGE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    _this->_impl_.info_ = new ::Protocol::HitInfo(*from._impl_.info_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_HITDAMAGE)
}

inline void C_HITDAMAGE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_HITDAMAGE::~C_HITDAMAGE() {
  // @@protoc_insertion_point(destructor:Protocol.C_HITDAMAGE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_HITDAMAGE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.info_;
}

void C_HITDAMAGE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_HITDAMAGE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_HITDAMAGE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_HITDAMAGE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.HitInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_HITDAMAGE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_HITDAMAGE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.HitInfo info = 1;
  if (this->_internal_has_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_HITDAMAGE)
  return target;
}

size_t C_HITDAMAGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_HITDAMAGE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.HitInfo info = 1;
  if (this->_internal_has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_HITDAMAGE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_HITDAMAGE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_HITDAMAGE::GetClassData() const { return &_class_data_; }


void C_HITDAMAGE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_HITDAMAGE*>(&to_msg);
  auto& from = static_cast<const C_HITDAMAGE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_HITDAMAGE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_info()) {
    _this->_internal_mutable_info()->::Protocol::HitInfo::MergeFrom(
        from._internal_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_HITDAMAGE::CopyFrom(const C_HITDAMAGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_HITDAMAGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_HITDAMAGE::IsInitialized() const {
  return true;
}

void C_HITDAMAGE::InternalSwap(C_HITDAMAGE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.info_, other->_impl_.info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_HITDAMAGE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[38]);
}

// ===================================================================

class S_HITDAMAGE::_Internal {
 public:
  static const ::Protocol::HitInfo& info(const S_HITDAMAGE* msg);
};

const ::Protocol::HitInfo&
S_HITDAMAGE::_Internal::info(const S_HITDAMAGE* msg) {
  return *msg->_impl_.info_;
}
void S_HITDAMAGE::clear_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
}
S_HITDAMAGE::S_HITDAMAGE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_HITDAMAGE)
}
S_HITDAMAGE::S_HITDAMAGE(const S_HITDAMAGE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_HITDAMAGE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    _this->_impl_.info_ = new ::Protocol::HitInfo(*from._impl_.info_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_HITDAMAGE)
}

inline void S_HITDAMAGE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_HITDAMAGE::~S_HITDAMAGE() {
  // @@protoc_insertion_point(destructor:Protocol.S_HITDAMAGE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_HITDAMAGE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.info_;
}

void S_HITDAMAGE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_HITDAMAGE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_HITDAMAGE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_HITDAMAGE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.HitInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_HITDAMAGE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_HITDAMAGE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.HitInfo info = 1;
  if (this->_internal_has_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_HITDAMAGE)
  return target;
}

size_t S_HITDAMAGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_HITDAMAGE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.HitInfo info = 1;
  if (this->_internal_has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_HITDAMAGE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_HITDAMAGE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_HITDAMAGE::GetClassData() const { return &_class_data_; }


void S_HITDAMAGE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_HITDAMAGE*>(&to_msg);
  auto& from = static_cast<const S_HITDAMAGE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_HITDAMAGE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_info()) {
    _this->_internal_mutable_info()->::Protocol::HitInfo::MergeFrom(
        from._internal_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_HITDAMAGE::CopyFrom(const S_HITDAMAGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_HITDAMAGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_HITDAMAGE::IsInitialized() const {
  return true;
}

void S_HITDAMAGE::InternalSwap(S_HITDAMAGE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.info_, other->_impl_.info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_HITDAMAGE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[39]);
}

// ===================================================================

class S_SHOP_ITEM_LIST::_Internal {
 public:
  static const ::Protocol::ShopInfo& info(const S_SHOP_ITEM_LIST* msg);
};

const ::Protocol::ShopInfo&
S_SHOP_ITEM_LIST::_Internal::info(const S_SHOP_ITEM_LIST* msg) {
  return *msg->_impl_.info_;
}
void S_SHOP_ITEM_LIST::clear_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
}
S_SHOP_ITEM_LIST::S_SHOP_ITEM_LIST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_SHOP_ITEM_LIST)
}
S_SHOP_ITEM_LIST::S_SHOP_ITEM_LIST(const S_SHOP_ITEM_LIST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_SHOP_ITEM_LIST* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    _this->_impl_.info_ = new ::Protocol::ShopInfo(*from._impl_.info_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_SHOP_ITEM_LIST)
}

inline void S_SHOP_ITEM_LIST::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_SHOP_ITEM_LIST::~S_SHOP_ITEM_LIST() {
  // @@protoc_insertion_point(destructor:Protocol.S_SHOP_ITEM_LIST)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_SHOP_ITEM_LIST::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.info_;
}

void S_SHOP_ITEM_LIST::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_SHOP_ITEM_LIST::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_SHOP_ITEM_LIST)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_SHOP_ITEM_LIST::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.ShopInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_SHOP_ITEM_LIST::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_SHOP_ITEM_LIST)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.ShopInfo info = 1;
  if (this->_internal_has_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_SHOP_ITEM_LIST)
  return target;
}

size_t S_SHOP_ITEM_LIST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_SHOP_ITEM_LIST)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.ShopInfo info = 1;
  if (this->_internal_has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_SHOP_ITEM_LIST::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_SHOP_ITEM_LIST::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_SHOP_ITEM_LIST::GetClassData() const { return &_class_data_; }


void S_SHOP_ITEM_LIST::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_SHOP_ITEM_LIST*>(&to_msg);
  auto& from = static_cast<const S_SHOP_ITEM_LIST&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_SHOP_ITEM_LIST)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_info()) {
    _this->_internal_mutable_info()->::Protocol::ShopInfo::MergeFrom(
        from._internal_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_SHOP_ITEM_LIST::CopyFrom(const S_SHOP_ITEM_LIST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_SHOP_ITEM_LIST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_SHOP_ITEM_LIST::IsInitialized() const {
  return true;
}

void S_SHOP_ITEM_LIST::InternalSwap(S_SHOP_ITEM_LIST* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.info_, other->_impl_.info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_SHOP_ITEM_LIST::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[40]);
}

// ===================================================================

class C_REFRESH_ITEM_LIST::_Internal {
 public:
};

C_REFRESH_ITEM_LIST::C_REFRESH_ITEM_LIST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_REFRESH_ITEM_LIST)
}
C_REFRESH_ITEM_LIST::C_REFRESH_ITEM_LIST(const C_REFRESH_ITEM_LIST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_REFRESH_ITEM_LIST* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_REFRESH_ITEM_LIST)
}

inline void C_REFRESH_ITEM_LIST::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_REFRESH_ITEM_LIST::~C_REFRESH_ITEM_LIST() {
  // @@protoc_insertion_point(destructor:Protocol.C_REFRESH_ITEM_LIST)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_REFRESH_ITEM_LIST::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_REFRESH_ITEM_LIST::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_REFRESH_ITEM_LIST::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_REFRESH_ITEM_LIST)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_REFRESH_ITEM_LIST::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_REFRESH_ITEM_LIST::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_REFRESH_ITEM_LIST)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_REFRESH_ITEM_LIST)
  return target;
}

size_t C_REFRESH_ITEM_LIST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_REFRESH_ITEM_LIST)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_REFRESH_ITEM_LIST::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_REFRESH_ITEM_LIST::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_REFRESH_ITEM_LIST::GetClassData() const { return &_class_data_; }


void C_REFRESH_ITEM_LIST::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_REFRESH_ITEM_LIST*>(&to_msg);
  auto& from = static_cast<const C_REFRESH_ITEM_LIST&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_REFRESH_ITEM_LIST)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_REFRESH_ITEM_LIST::CopyFrom(const C_REFRESH_ITEM_LIST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_REFRESH_ITEM_LIST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_REFRESH_ITEM_LIST::IsInitialized() const {
  return true;
}

void C_REFRESH_ITEM_LIST::InternalSwap(C_REFRESH_ITEM_LIST* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_REFRESH_ITEM_LIST::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[41]);
}

// ===================================================================

class C_BUY_SHOP_ITEM::_Internal {
 public:
};

C_BUY_SHOP_ITEM::C_BUY_SHOP_ITEM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_BUY_SHOP_ITEM)
}
C_BUY_SHOP_ITEM::C_BUY_SHOP_ITEM(const C_BUY_SHOP_ITEM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_BUY_SHOP_ITEM* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_index_){}
    , decltype(_impl_.full_inventory_){}
    , decltype(_impl_.inventory_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_index_, &from._impl_.item_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.inventory_index_) -
    reinterpret_cast<char*>(&_impl_.item_index_)) + sizeof(_impl_.inventory_index_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_BUY_SHOP_ITEM)
}

inline void C_BUY_SHOP_ITEM::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_index_){0u}
    , decltype(_impl_.full_inventory_){false}
    , decltype(_impl_.inventory_index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_BUY_SHOP_ITEM::~C_BUY_SHOP_ITEM() {
  // @@protoc_insertion_point(destructor:Protocol.C_BUY_SHOP_ITEM)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_BUY_SHOP_ITEM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_BUY_SHOP_ITEM::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_BUY_SHOP_ITEM::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_BUY_SHOP_ITEM)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.item_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.inventory_index_) -
      reinterpret_cast<char*>(&_impl_.item_index_)) + sizeof(_impl_.inventory_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_BUY_SHOP_ITEM::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 item_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.item_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool full_inventory = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.full_inventory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 inventory_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.inventory_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_BUY_SHOP_ITEM::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_BUY_SHOP_ITEM)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 item_index = 1;
  if (this->_internal_item_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_index(), target);
  }

  // bool full_inventory = 2;
  if (this->_internal_full_inventory() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_full_inventory(), target);
  }

  // uint32 inventory_index = 3;
  if (this->_internal_inventory_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_inventory_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_BUY_SHOP_ITEM)
  return target;
}

size_t C_BUY_SHOP_ITEM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_BUY_SHOP_ITEM)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 item_index = 1;
  if (this->_internal_item_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_index());
  }

  // bool full_inventory = 2;
  if (this->_internal_full_inventory() != 0) {
    total_size += 1 + 1;
  }

  // uint32 inventory_index = 3;
  if (this->_internal_inventory_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_inventory_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_BUY_SHOP_ITEM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_BUY_SHOP_ITEM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_BUY_SHOP_ITEM::GetClassData() const { return &_class_data_; }


void C_BUY_SHOP_ITEM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_BUY_SHOP_ITEM*>(&to_msg);
  auto& from = static_cast<const C_BUY_SHOP_ITEM&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_BUY_SHOP_ITEM)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_item_index() != 0) {
    _this->_internal_set_item_index(from._internal_item_index());
  }
  if (from._internal_full_inventory() != 0) {
    _this->_internal_set_full_inventory(from._internal_full_inventory());
  }
  if (from._internal_inventory_index() != 0) {
    _this->_internal_set_inventory_index(from._internal_inventory_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_BUY_SHOP_ITEM::CopyFrom(const C_BUY_SHOP_ITEM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_BUY_SHOP_ITEM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_BUY_SHOP_ITEM::IsInitialized() const {
  return true;
}

void C_BUY_SHOP_ITEM::InternalSwap(C_BUY_SHOP_ITEM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_BUY_SHOP_ITEM, _impl_.inventory_index_)
      + sizeof(C_BUY_SHOP_ITEM::_impl_.inventory_index_)
      - PROTOBUF_FIELD_OFFSET(C_BUY_SHOP_ITEM, _impl_.item_index_)>(
          reinterpret_cast<char*>(&_impl_.item_index_),
          reinterpret_cast<char*>(&other->_impl_.item_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_BUY_SHOP_ITEM::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[42]);
}

// ===================================================================

class S_BUY_SHOP_ITEM::_Internal {
 public:
  static const ::Protocol::ShopItemInfo& info(const S_BUY_SHOP_ITEM* msg);
};

const ::Protocol::ShopItemInfo&
S_BUY_SHOP_ITEM::_Internal::info(const S_BUY_SHOP_ITEM* msg) {
  return *msg->_impl_.info_;
}
void S_BUY_SHOP_ITEM::clear_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
}
S_BUY_SHOP_ITEM::S_BUY_SHOP_ITEM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_BUY_SHOP_ITEM)
}
S_BUY_SHOP_ITEM::S_BUY_SHOP_ITEM(const S_BUY_SHOP_ITEM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_BUY_SHOP_ITEM* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){nullptr}
    , decltype(_impl_.success_){}
    , decltype(_impl_.item_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    _this->_impl_.info_ = new ::Protocol::ShopItemInfo(*from._impl_.info_);
  }
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.item_index_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.item_index_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_BUY_SHOP_ITEM)
}

inline void S_BUY_SHOP_ITEM::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){nullptr}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.item_index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_BUY_SHOP_ITEM::~S_BUY_SHOP_ITEM() {
  // @@protoc_insertion_point(destructor:Protocol.S_BUY_SHOP_ITEM)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_BUY_SHOP_ITEM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.info_;
}

void S_BUY_SHOP_ITEM::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_BUY_SHOP_ITEM::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_BUY_SHOP_ITEM)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.item_index_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.item_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_BUY_SHOP_ITEM::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 item_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.item_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.ShopItemInfo info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_BUY_SHOP_ITEM::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_BUY_SHOP_ITEM)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // uint32 item_index = 2;
  if (this->_internal_item_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_item_index(), target);
  }

  // .Protocol.ShopItemInfo info = 3;
  if (this->_internal_has_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_BUY_SHOP_ITEM)
  return target;
}

size_t S_BUY_SHOP_ITEM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_BUY_SHOP_ITEM)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.ShopItemInfo info = 3;
  if (this->_internal_has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // uint32 item_index = 2;
  if (this->_internal_item_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_BUY_SHOP_ITEM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_BUY_SHOP_ITEM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_BUY_SHOP_ITEM::GetClassData() const { return &_class_data_; }


void S_BUY_SHOP_ITEM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_BUY_SHOP_ITEM*>(&to_msg);
  auto& from = static_cast<const S_BUY_SHOP_ITEM&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_BUY_SHOP_ITEM)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_info()) {
    _this->_internal_mutable_info()->::Protocol::ShopItemInfo::MergeFrom(
        from._internal_info());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_item_index() != 0) {
    _this->_internal_set_item_index(from._internal_item_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_BUY_SHOP_ITEM::CopyFrom(const S_BUY_SHOP_ITEM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_BUY_SHOP_ITEM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_BUY_SHOP_ITEM::IsInitialized() const {
  return true;
}

void S_BUY_SHOP_ITEM::InternalSwap(S_BUY_SHOP_ITEM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_BUY_SHOP_ITEM, _impl_.item_index_)
      + sizeof(S_BUY_SHOP_ITEM::_impl_.item_index_)
      - PROTOBUF_FIELD_OFFSET(S_BUY_SHOP_ITEM, _impl_.info_)>(
          reinterpret_cast<char*>(&_impl_.info_),
          reinterpret_cast<char*>(&other->_impl_.info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_BUY_SHOP_ITEM::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[43]);
}

// ===================================================================

class S_MAIL_SEND::_Internal {
 public:
  static const ::Protocol::MailInfo& mail(const S_MAIL_SEND* msg);
};

const ::Protocol::MailInfo&
S_MAIL_SEND::_Internal::mail(const S_MAIL_SEND* msg) {
  return *msg->_impl_.mail_;
}
void S_MAIL_SEND::clear_mail() {
  if (GetArenaForAllocation() == nullptr && _impl_.mail_ != nullptr) {
    delete _impl_.mail_;
  }
  _impl_.mail_ = nullptr;
}
S_MAIL_SEND::S_MAIL_SEND(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_MAIL_SEND)
}
S_MAIL_SEND::S_MAIL_SEND(const S_MAIL_SEND& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_MAIL_SEND* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mail_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mail()) {
    _this->_impl_.mail_ = new ::Protocol::MailInfo(*from._impl_.mail_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_MAIL_SEND)
}

inline void S_MAIL_SEND::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mail_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_MAIL_SEND::~S_MAIL_SEND() {
  // @@protoc_insertion_point(destructor:Protocol.S_MAIL_SEND)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_MAIL_SEND::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.mail_;
}

void S_MAIL_SEND::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_MAIL_SEND::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_MAIL_SEND)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.mail_ != nullptr) {
    delete _impl_.mail_;
  }
  _impl_.mail_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_MAIL_SEND::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.MailInfo mail = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mail(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_MAIL_SEND::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_MAIL_SEND)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.MailInfo mail = 1;
  if (this->_internal_has_mail()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::mail(this),
        _Internal::mail(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_MAIL_SEND)
  return target;
}

size_t S_MAIL_SEND::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_MAIL_SEND)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.MailInfo mail = 1;
  if (this->_internal_has_mail()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mail_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_MAIL_SEND::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_MAIL_SEND::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_MAIL_SEND::GetClassData() const { return &_class_data_; }


void S_MAIL_SEND::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_MAIL_SEND*>(&to_msg);
  auto& from = static_cast<const S_MAIL_SEND&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_MAIL_SEND)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mail()) {
    _this->_internal_mutable_mail()->::Protocol::MailInfo::MergeFrom(
        from._internal_mail());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_MAIL_SEND::CopyFrom(const S_MAIL_SEND& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_MAIL_SEND)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_MAIL_SEND::IsInitialized() const {
  return true;
}

void S_MAIL_SEND::InternalSwap(S_MAIL_SEND* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.mail_, other->_impl_.mail_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_MAIL_SEND::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[44]);
}

// ===================================================================

class S_MAIL_LIST::_Internal {
 public:
  static const ::Protocol::MailBoxInfo& mailbox(const S_MAIL_LIST* msg);
};

const ::Protocol::MailBoxInfo&
S_MAIL_LIST::_Internal::mailbox(const S_MAIL_LIST* msg) {
  return *msg->_impl_.mailbox_;
}
void S_MAIL_LIST::clear_mailbox() {
  if (GetArenaForAllocation() == nullptr && _impl_.mailbox_ != nullptr) {
    delete _impl_.mailbox_;
  }
  _impl_.mailbox_ = nullptr;
}
S_MAIL_LIST::S_MAIL_LIST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_MAIL_LIST)
}
S_MAIL_LIST::S_MAIL_LIST(const S_MAIL_LIST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_MAIL_LIST* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mailbox_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mailbox()) {
    _this->_impl_.mailbox_ = new ::Protocol::MailBoxInfo(*from._impl_.mailbox_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_MAIL_LIST)
}

inline void S_MAIL_LIST::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mailbox_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_MAIL_LIST::~S_MAIL_LIST() {
  // @@protoc_insertion_point(destructor:Protocol.S_MAIL_LIST)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_MAIL_LIST::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.mailbox_;
}

void S_MAIL_LIST::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_MAIL_LIST::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_MAIL_LIST)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.mailbox_ != nullptr) {
    delete _impl_.mailbox_;
  }
  _impl_.mailbox_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_MAIL_LIST::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.MailBoxInfo mailbox = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mailbox(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_MAIL_LIST::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_MAIL_LIST)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.MailBoxInfo mailbox = 1;
  if (this->_internal_has_mailbox()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::mailbox(this),
        _Internal::mailbox(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_MAIL_LIST)
  return target;
}

size_t S_MAIL_LIST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_MAIL_LIST)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.MailBoxInfo mailbox = 1;
  if (this->_internal_has_mailbox()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mailbox_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_MAIL_LIST::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_MAIL_LIST::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_MAIL_LIST::GetClassData() const { return &_class_data_; }


void S_MAIL_LIST::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_MAIL_LIST*>(&to_msg);
  auto& from = static_cast<const S_MAIL_LIST&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_MAIL_LIST)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mailbox()) {
    _this->_internal_mutable_mailbox()->::Protocol::MailBoxInfo::MergeFrom(
        from._internal_mailbox());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_MAIL_LIST::CopyFrom(const S_MAIL_LIST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_MAIL_LIST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_MAIL_LIST::IsInitialized() const {
  return true;
}

void S_MAIL_LIST::InternalSwap(S_MAIL_LIST* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.mailbox_, other->_impl_.mailbox_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_MAIL_LIST::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[45]);
}

// ===================================================================

class C_MAIL_LIST::_Internal {
 public:
};

C_MAIL_LIST::C_MAIL_LIST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_MAIL_LIST)
}
C_MAIL_LIST::C_MAIL_LIST(const C_MAIL_LIST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_MAIL_LIST* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_MAIL_LIST)
}

inline void C_MAIL_LIST::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_MAIL_LIST::~C_MAIL_LIST() {
  // @@protoc_insertion_point(destructor:Protocol.C_MAIL_LIST)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_MAIL_LIST::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_MAIL_LIST::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_MAIL_LIST::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_MAIL_LIST)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_MAIL_LIST::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_MAIL_LIST::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_MAIL_LIST)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_MAIL_LIST)
  return target;
}

size_t C_MAIL_LIST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_MAIL_LIST)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_MAIL_LIST::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_MAIL_LIST::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_MAIL_LIST::GetClassData() const { return &_class_data_; }


void C_MAIL_LIST::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_MAIL_LIST*>(&to_msg);
  auto& from = static_cast<const C_MAIL_LIST&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_MAIL_LIST)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_MAIL_LIST::CopyFrom(const C_MAIL_LIST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_MAIL_LIST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_MAIL_LIST::IsInitialized() const {
  return true;
}

void C_MAIL_LIST::InternalSwap(C_MAIL_LIST* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_MAIL_LIST::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[46]);
}

// ===================================================================

class C_MAIL_ITEM_RECV::_Internal {
 public:
};

C_MAIL_ITEM_RECV::C_MAIL_ITEM_RECV(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_MAIL_ITEM_RECV)
}
C_MAIL_ITEM_RECV::C_MAIL_ITEM_RECV(const C_MAIL_ITEM_RECV& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_MAIL_ITEM_RECV* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mailindex_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.mailindex_ = from._impl_.mailindex_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_MAIL_ITEM_RECV)
}

inline void C_MAIL_ITEM_RECV::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mailindex_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_MAIL_ITEM_RECV::~C_MAIL_ITEM_RECV() {
  // @@protoc_insertion_point(destructor:Protocol.C_MAIL_ITEM_RECV)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_MAIL_ITEM_RECV::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_MAIL_ITEM_RECV::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_MAIL_ITEM_RECV::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_MAIL_ITEM_RECV)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mailindex_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_MAIL_ITEM_RECV::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 mailIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.mailindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_MAIL_ITEM_RECV::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_MAIL_ITEM_RECV)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mailIndex = 1;
  if (this->_internal_mailindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mailindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_MAIL_ITEM_RECV)
  return target;
}

size_t C_MAIL_ITEM_RECV::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_MAIL_ITEM_RECV)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 mailIndex = 1;
  if (this->_internal_mailindex() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mailindex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_MAIL_ITEM_RECV::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_MAIL_ITEM_RECV::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_MAIL_ITEM_RECV::GetClassData() const { return &_class_data_; }


void C_MAIL_ITEM_RECV::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_MAIL_ITEM_RECV*>(&to_msg);
  auto& from = static_cast<const C_MAIL_ITEM_RECV&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_MAIL_ITEM_RECV)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_mailindex() != 0) {
    _this->_internal_set_mailindex(from._internal_mailindex());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_MAIL_ITEM_RECV::CopyFrom(const C_MAIL_ITEM_RECV& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_MAIL_ITEM_RECV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_MAIL_ITEM_RECV::IsInitialized() const {
  return true;
}

void C_MAIL_ITEM_RECV::InternalSwap(C_MAIL_ITEM_RECV* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.mailindex_, other->_impl_.mailindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_MAIL_ITEM_RECV::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[47]);
}

// ===================================================================

class S_GOLD::_Internal {
 public:
};

S_GOLD::S_GOLD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_GOLD)
}
S_GOLD::S_GOLD(const S_GOLD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_GOLD* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_GOLD)
}

inline void S_GOLD::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_GOLD::~S_GOLD() {
  // @@protoc_insertion_point(destructor:Protocol.S_GOLD)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_GOLD::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_GOLD::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_GOLD::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_GOLD)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_GOLD::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_GOLD::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_GOLD)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_GOLD)
  return target;
}

size_t S_GOLD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_GOLD)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_GOLD::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_GOLD::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_GOLD::GetClassData() const { return &_class_data_; }


void S_GOLD::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_GOLD*>(&to_msg);
  auto& from = static_cast<const S_GOLD&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_GOLD)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_GOLD::CopyFrom(const S_GOLD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_GOLD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_GOLD::IsInitialized() const {
  return true;
}

void S_GOLD::InternalSwap(S_GOLD* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_GOLD::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[48]);
}

// ===================================================================

class C_GOLD::_Internal {
 public:
};

C_GOLD::C_GOLD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_GOLD)
}
C_GOLD::C_GOLD(const C_GOLD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_GOLD* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_GOLD)
}

inline void C_GOLD::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_GOLD::~C_GOLD() {
  // @@protoc_insertion_point(destructor:Protocol.C_GOLD)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_GOLD::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_GOLD::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_GOLD::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_GOLD)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_GOLD::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_GOLD::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_GOLD)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_GOLD)
  return target;
}

size_t C_GOLD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_GOLD)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_GOLD::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_GOLD::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_GOLD::GetClassData() const { return &_class_data_; }


void C_GOLD::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_GOLD*>(&to_msg);
  auto& from = static_cast<const C_GOLD&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_GOLD)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_GOLD::CopyFrom(const C_GOLD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_GOLD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_GOLD::IsInitialized() const {
  return true;
}

void C_GOLD::InternalSwap(C_GOLD* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_GOLD::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[49]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protocol::C_CREATEACCOUNT*
Arena::CreateMaybeMessage< ::Protocol::C_CREATEACCOUNT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_CREATEACCOUNT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_CREATEACCOUNT*
Arena::CreateMaybeMessage< ::Protocol::S_CREATEACCOUNT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_CREATEACCOUNT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_LOGIN*
Arena::CreateMaybeMessage< ::Protocol::C_LOGIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_LOGIN >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_LOGIN*
Arena::CreateMaybeMessage< ::Protocol::S_LOGIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_LOGIN >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_LOGOUT*
Arena::CreateMaybeMessage< ::Protocol::C_LOGOUT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_LOGOUT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_LOGOUT*
Arena::CreateMaybeMessage< ::Protocol::S_LOGOUT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_LOGOUT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_ENTER_GAME*
Arena::CreateMaybeMessage< ::Protocol::C_ENTER_GAME >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_ENTER_GAME >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_ENTER_GAME*
Arena::CreateMaybeMessage< ::Protocol::S_ENTER_GAME >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_ENTER_GAME >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_ENTER_ROOM*
Arena::CreateMaybeMessage< ::Protocol::C_ENTER_ROOM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_ENTER_ROOM >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_ENTER_ROOM*
Arena::CreateMaybeMessage< ::Protocol::S_ENTER_ROOM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_ENTER_ROOM >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_LEAVE_GAME*
Arena::CreateMaybeMessage< ::Protocol::C_LEAVE_GAME >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_LEAVE_GAME >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_LEAVE_GAME*
Arena::CreateMaybeMessage< ::Protocol::S_LEAVE_GAME >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_LEAVE_GAME >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_SPAWN*
Arena::CreateMaybeMessage< ::Protocol::S_SPAWN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_SPAWN >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_SPAWNPLAYER*
Arena::CreateMaybeMessage< ::Protocol::S_SPAWNPLAYER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_SPAWNPLAYER >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_SPAWNMONSTER*
Arena::CreateMaybeMessage< ::Protocol::S_SPAWNMONSTER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_SPAWNMONSTER >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_DROPITEM*
Arena::CreateMaybeMessage< ::Protocol::C_DROPITEM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_DROPITEM >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_INVENTORY_UPDATE*
Arena::CreateMaybeMessage< ::Protocol::C_INVENTORY_UPDATE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_INVENTORY_UPDATE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_INVENTORY_UPDATE*
Arena::CreateMaybeMessage< ::Protocol::S_INVENTORY_UPDATE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_INVENTORY_UPDATE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_INVENTORY_REMOVE*
Arena::CreateMaybeMessage< ::Protocol::C_INVENTORY_REMOVE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_INVENTORY_REMOVE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_INVENTORY_REMOVE*
Arena::CreateMaybeMessage< ::Protocol::S_INVENTORY_REMOVE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_INVENTORY_REMOVE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_SWAP_INVENTORY_TO_INVENTORY*
Arena::CreateMaybeMessage< ::Protocol::C_SWAP_INVENTORY_TO_INVENTORY >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_SWAP_INVENTORY_TO_INVENTORY >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_TRY_PICK_ITEM_TO_INVENTORY*
Arena::CreateMaybeMessage< ::Protocol::C_TRY_PICK_ITEM_TO_INVENTORY >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_TRY_PICK_ITEM_TO_INVENTORY >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_SPAWNITEM*
Arena::CreateMaybeMessage< ::Protocol::S_SPAWNITEM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_SPAWNITEM >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_SPAWNBOX*
Arena::CreateMaybeMessage< ::Protocol::S_SPAWNBOX >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_SPAWNBOX >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_DESPAWN*
Arena::CreateMaybeMessage< ::Protocol::S_DESPAWN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_DESPAWN >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_DEATH*
Arena::CreateMaybeMessage< ::Protocol::S_DEATH >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_DEATH >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_MOVE*
Arena::CreateMaybeMessage< ::Protocol::C_MOVE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_MOVE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_MOVE*
Arena::CreateMaybeMessage< ::Protocol::S_MOVE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_MOVE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_STATUS*
Arena::CreateMaybeMessage< ::Protocol::C_STATUS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_STATUS >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_STATUS*
Arena::CreateMaybeMessage< ::Protocol::S_STATUS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_STATUS >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_CHAT*
Arena::CreateMaybeMessage< ::Protocol::C_CHAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_CHAT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_CHAT*
Arena::CreateMaybeMessage< ::Protocol::S_CHAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_CHAT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_MELEEATTACK*
Arena::CreateMaybeMessage< ::Protocol::S_MELEEATTACK >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_MELEEATTACK >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_MELEEATTACK*
Arena::CreateMaybeMessage< ::Protocol::C_MELEEATTACK >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_MELEEATTACK >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_PATHFINDING*
Arena::CreateMaybeMessage< ::Protocol::C_PATHFINDING >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_PATHFINDING >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_PATHFINDING*
Arena::CreateMaybeMessage< ::Protocol::S_PATHFINDING >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_PATHFINDING >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_SHOOTPROJECTILE*
Arena::CreateMaybeMessage< ::Protocol::C_SHOOTPROJECTILE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_SHOOTPROJECTILE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_SHOOTPROJECTILE*
Arena::CreateMaybeMessage< ::Protocol::S_SHOOTPROJECTILE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_SHOOTPROJECTILE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_HITDAMAGE*
Arena::CreateMaybeMessage< ::Protocol::C_HITDAMAGE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_HITDAMAGE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_HITDAMAGE*
Arena::CreateMaybeMessage< ::Protocol::S_HITDAMAGE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_HITDAMAGE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_SHOP_ITEM_LIST*
Arena::CreateMaybeMessage< ::Protocol::S_SHOP_ITEM_LIST >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_SHOP_ITEM_LIST >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_REFRESH_ITEM_LIST*
Arena::CreateMaybeMessage< ::Protocol::C_REFRESH_ITEM_LIST >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_REFRESH_ITEM_LIST >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_BUY_SHOP_ITEM*
Arena::CreateMaybeMessage< ::Protocol::C_BUY_SHOP_ITEM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_BUY_SHOP_ITEM >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_BUY_SHOP_ITEM*
Arena::CreateMaybeMessage< ::Protocol::S_BUY_SHOP_ITEM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_BUY_SHOP_ITEM >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_MAIL_SEND*
Arena::CreateMaybeMessage< ::Protocol::S_MAIL_SEND >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_MAIL_SEND >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_MAIL_LIST*
Arena::CreateMaybeMessage< ::Protocol::S_MAIL_LIST >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_MAIL_LIST >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_MAIL_LIST*
Arena::CreateMaybeMessage< ::Protocol::C_MAIL_LIST >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_MAIL_LIST >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_MAIL_ITEM_RECV*
Arena::CreateMaybeMessage< ::Protocol::C_MAIL_ITEM_RECV >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_MAIL_ITEM_RECV >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_GOLD*
Arena::CreateMaybeMessage< ::Protocol::S_GOLD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_GOLD >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_GOLD*
Arena::CreateMaybeMessage< ::Protocol::C_GOLD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_GOLD >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
