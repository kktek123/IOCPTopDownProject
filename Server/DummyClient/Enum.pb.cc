// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Enum.proto

#include "Enum.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Protocol {
}  // namespace Protocol
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_Enum_2eproto[17];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Enum_2eproto = nullptr;
const uint32_t TableStruct_Enum_2eproto::offsets[1] = {};
static constexpr ::_pbi::MigrationSchema* schemas = nullptr;
static constexpr ::_pb::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_Enum_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nEnum.proto\022\010Protocol*m\n\nObjectType\022\024\n\020"
  "OBJECT_TYPE_NONE\020\000\022\030\n\024OBJECT_TYPE_CREATU"
  "RE\020\001\022\032\n\026OBJECT_TYPE_PROJECTILE\020\002\022\023\n\017OBJE"
  "CT_TYPE_ENV\020\003*r\n\014CreatureType\022\026\n\022CREATUR"
  "E_TYPE_NONE\020\000\022\030\n\024CREATURE_TYPE_PLAYER\020\001\022"
  "\031\n\025CREATURE_TYPE_MONSTER\020\002\022\025\n\021CREATURE_T"
  "YPE_NPC\020\003*\242\001\n\nPlayerType\022\024\n\020PLAYER_TYPE_"
  "NONE\020\000\022\027\n\023PLAYER_TYPE_FIGHTER\020\001\022\033\n\027PLAYE"
  "R_TYPE_SWORDMASTER\020\002\022\030\n\024PLAYER_TYPE_BABA"
  "RIAN\020\003\022\026\n\022PLAYER_TYPE_WIZARD\020\004\022\026\n\022PLAYER"
  "_TYPE_ARCHER\020\005*q\n\013MonsterType\022\025\n\021MONSTER"
  "_TYPE_NONE\020\000\022\027\n\023MONSTER_TYPE_GRUDGE\020\001\022\031\n"
  "\025MONSTER_TYPE_BRAGHEST\020\002\022\027\n\023MONSTER_TYPE"
  "_DRAGON\020\003*t\n\tMoveState\022\023\n\017MOVE_STATE_NON"
  "E\020\000\022\023\n\017MOVE_STATE_IDLE\020\001\022\022\n\016MOVE_STATE_R"
  "UN\020\002\022\023\n\017MOVE_STATE_JUMP\020\003\022\024\n\020MOVE_STATE_"
  "SKILL\020\004*h\n\nSkillState\022\024\n\020SKILL_STATE_NON"
  "E\020\000\022\026\n\022SKILL_STATE_ATTACK\020\001\022\024\n\020SKILL_STA"
  "TE_DASH\020\002\022\026\n\022SKILL_STATE_SKILL1\020\003*F\n\nInp"
  "utState\022\021\n\rINPUT_STARTED\020\000\022\021\n\rINPUT_PRES"
  "SED\020\001\022\022\n\016INPUT_RELEASED\020\002*>\n\nDeathState\022"
  "\013\n\007NotDead\020\000\022\020\n\014DeathStarted\020\001\022\021\n\rDeathF"
  "inished\020\002*7\n\014ItemBoxState\022\022\n\016BOX_STATE_O"
  "PEN\020\000\022\023\n\017BOX_STATE_CLOSE\020\001*-\n\013ItemBoxTyp"
  "e\022\016\n\nBOX_TYPE_1\020\000\022\016\n\nBOX_TYPE_2\020\001*\210\001\n\010It"
  "emType\022\022\n\016ITEM_TYPE_NONE\020\000\022\024\n\020ITEM_TYPE_"
  "WEAPON\020\001\022\023\n\017ITEM_TYPE_ARMOR\020\002\022\022\n\016ITEM_TY"
  "PE_COIN\020\003\022\024\n\020ITEM_TYPE_POTION\020\004\022\023\n\017ITEM_"
  "TYPE_THROW\020\005*\243\001\n\tEquipType\022\023\n\017EQUIP_TYPE"
  "_NONE\020\000\022\025\n\021EQUIP_TYPE_HELMET\020\001\022\024\n\020EQUIP_"
  "TYPE_CHEST\020\002\022\023\n\017EQUIP_TYPE_LEGS\020\003\022\024\n\020EQU"
  "IP_TYPE_HANDS\020\004\022\023\n\017EQUIP_TYPE_FOOT\020\005\022\024\n\020"
  "EQUIP_TYPE_COUNT\020\006*\205\001\n\nItemRarity\022\024\n\020ITE"
  "M_RARITY_POOR\020\000\022\026\n\022ITEM_RARITY_COMMEN\020\001\022"
  "\030\n\024ITEM_RARITY_UNCOMMEN\020\002\022\024\n\020ITEM_RARITY"
  "_RARE\020\003\022\031\n\025ITEM_RARITY_LEGENDERY\020\004*k\n\016It"
  "emCustomType\022\024\n\020ITEM_CUSTOM_NONE\020\000\022\024\n\020IT"
  "EM_CUSTOM_COIN\020\001\022\026\n\022ITEM_CUSTOM_POTION\020\002"
  "\022\025\n\021ITEM_CUSTOM_THROW\020\003*\345\002\n\021EquipmentSlo"
  "tType\022\024\n\020UNARMED_LEFTHAND\020\000\022\025\n\021UNARMED_R"
  "IGHTHAND\020\001\022\024\n\020PRIMARY_LEFTHAND\020\002\022\025\n\021PRIM"
  "ARY_RIGHTHAND\020\003\022\023\n\017PRIMARY_TWOHAND\020\004\022\026\n\022"
  "SECONDARY_LEFTHAND\020\005\022\027\n\023SECONDARY_RIGHTH"
  "AND\020\006\022\025\n\021SECONDARY_TWOHAND\020\007\022\023\n\017UTILITY_"
  "PRIMARY\020\010\022\025\n\021UTILITY_SECONDARY\020\t\022\024\n\020UTIL"
  "ITY_TERTIARY\020\n\022\026\n\022UTILITY_QUATERNARY\020\013\022\n"
  "\n\006HELMET\020\014\022\t\n\005CHEST\020\r\022\010\n\004LEGS\020\016\022\t\n\005HANDS"
  "\020\017\022\010\n\004FOOT\020\020\022\t\n\005COUNT\020\021*-\n\nChestState\022\016\n"
  "\nCHEST_OPEN\020\000\022\017\n\013CHEST_CLOSE\020\001*\330\001\n\nEquip"
  "State\022\021\n\rEQUIP_UNARMED\020\000\022\030\n\024EQUIP_WEAPON"
  "_PRIMARY\020\001\022\032\n\026EQUIP_WEAPON_SECONDARY\020\002\022\031"
  "\n\025EQUIP_UTILITY_PRIMARY\020\003\022\033\n\027EQUIP_UTILI"
  "TY_SECONDARY\020\004\022\032\n\026EQUIP_UTILITY_TERTIARY"
  "\020\005\022\034\n\030EQUIP_UTILITY_QUATERNARY\020\006\022\017\n\013EQUI"
  "P_COUNT\020\007b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_Enum_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Enum_2eproto = {
    false, false, 2177, descriptor_table_protodef_Enum_2eproto,
    "Enum.proto",
    &descriptor_table_Enum_2eproto_once, nullptr, 0, 0,
    schemas, file_default_instances, TableStruct_Enum_2eproto::offsets,
    nullptr, file_level_enum_descriptors_Enum_2eproto,
    file_level_service_descriptors_Enum_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Enum_2eproto_getter() {
  return &descriptor_table_Enum_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Enum_2eproto(&descriptor_table_Enum_2eproto);
namespace Protocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObjectType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[0];
}
bool ObjectType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreatureType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[1];
}
bool CreatureType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[2];
}
bool PlayerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MonsterType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[3];
}
bool MonsterType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MoveState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[4];
}
bool MoveState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SkillState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[5];
}
bool SkillState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InputState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[6];
}
bool InputState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeathState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[7];
}
bool DeathState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemBoxState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[8];
}
bool ItemBoxState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemBoxType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[9];
}
bool ItemBoxType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[10];
}
bool ItemType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EquipType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[11];
}
bool EquipType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemRarity_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[12];
}
bool ItemRarity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemCustomType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[13];
}
bool ItemCustomType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EquipmentSlotType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[14];
}
bool EquipmentSlotType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChestState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[15];
}
bool ChestState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EquipState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[16];
}
bool EquipState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
