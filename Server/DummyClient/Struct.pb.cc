// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Struct.proto

#include "Struct.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Protocol {
PROTOBUF_CONSTEXPR PosInfo::PosInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.yaw_)*/0
  , /*decltype(_impl_.pitch_)*/0
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_.skill_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PosInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PosInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PosInfoDefaultTypeInternal() {}
  union {
    PosInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PosInfoDefaultTypeInternal _PosInfo_default_instance_;
PROTOBUF_CONSTEXPR HitInfo::HitInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.causer_id_)*/uint64_t{0u}
  , /*decltype(_impl_.damage_)*/0
  , /*decltype(_impl_.hit_yaw_)*/0
  , /*decltype(_impl_.hit_back_)*/0
  , /*decltype(_impl_.hit_stun_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HitInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HitInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HitInfoDefaultTypeInternal() {}
  union {
    HitInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HitInfoDefaultTypeInternal _HitInfo_default_instance_;
PROTOBUF_CONSTEXPR MeleeAttackInfo::MeleeAttackInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.damage_)*/0
  , /*decltype(_impl_.yaw_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MeleeAttackInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MeleeAttackInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MeleeAttackInfoDefaultTypeInternal() {}
  union {
    MeleeAttackInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MeleeAttackInfoDefaultTypeInternal _MeleeAttackInfo_default_instance_;
PROTOBUF_CONSTEXPR ProjectileInfo::ProjectileInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.causer_id_)*/uint64_t{0u}
  , /*decltype(_impl_.spawn_x_)*/0
  , /*decltype(_impl_.spawn_y_)*/0
  , /*decltype(_impl_.spawn_z_)*/0
  , /*decltype(_impl_.damage_)*/0
  , /*decltype(_impl_.shoot_yaw_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProjectileInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProjectileInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProjectileInfoDefaultTypeInternal() {}
  union {
    ProjectileInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProjectileInfoDefaultTypeInternal _ProjectileInfo_default_instance_;
PROTOBUF_CONSTEXPR StatusInfo::StatusInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.maxhp_)*/0
  , /*decltype(_impl_.hp_)*/0
  , /*decltype(_impl_.maxmp_)*/0
  , /*decltype(_impl_.mp_)*/0
  , /*decltype(_impl_.atk_)*/0
  , /*decltype(_impl_.def_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StatusInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatusInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatusInfoDefaultTypeInternal() {}
  union {
    StatusInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatusInfoDefaultTypeInternal _StatusInfo_default_instance_;
PROTOBUF_CONSTEXPR ClassInfo::ClassInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.player_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ClassInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClassInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClassInfoDefaultTypeInternal() {}
  union {
    ClassInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClassInfoDefaultTypeInternal _ClassInfo_default_instance_;
PROTOBUF_CONSTEXPR ObjectInfo::ObjectInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_type_)*/nullptr
  , /*decltype(_impl_.pos_info_)*/nullptr
  , /*decltype(_impl_.status_info_)*/nullptr
  , /*decltype(_impl_.input_info_)*/nullptr
  , /*decltype(_impl_.level_info_)*/nullptr
  , /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.object_type_)*/0
  , /*decltype(_impl_.creature_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ObjectInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectInfoDefaultTypeInternal() {}
  union {
    ObjectInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectInfoDefaultTypeInternal _ObjectInfo_default_instance_;
PROTOBUF_CONSTEXPR CreatureInfo::CreatureInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pos_info_)*/nullptr
  , /*decltype(_impl_.status_info_)*/nullptr
  , /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_.creature_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreatureInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreatureInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreatureInfoDefaultTypeInternal() {}
  union {
    CreatureInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreatureInfoDefaultTypeInternal _CreatureInfo_default_instance_;
PROTOBUF_CONSTEXPR PlayerInfo::PlayerInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_type_)*/nullptr
  , /*decltype(_impl_.pos_info_)*/nullptr
  , /*decltype(_impl_.status_info_)*/nullptr
  , /*decltype(_impl_.level_info_)*/nullptr
  , /*decltype(_impl_.input_info_)*/nullptr
  , /*decltype(_impl_.inventory_list_)*/nullptr
  , /*decltype(_impl_.equipment_list_)*/nullptr
  , /*decltype(_impl_.equip_state_)*/nullptr
  , /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.gold_)*/uint64_t{0u}
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerInfoDefaultTypeInternal() {}
  union {
    PlayerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerInfoDefaultTypeInternal _PlayerInfo_default_instance_;
PROTOBUF_CONSTEXPR MonsterInfo::MonsterInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pos_info_)*/nullptr
  , /*decltype(_impl_.status_info_)*/nullptr
  , /*decltype(_impl_.input_info_)*/nullptr
  , /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MonsterInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MonsterInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MonsterInfoDefaultTypeInternal() {}
  union {
    MonsterInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MonsterInfoDefaultTypeInternal _MonsterInfo_default_instance_;
PROTOBUF_CONSTEXPR AbilityInputInfo::AbilityInputInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.input_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AbilityInputInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AbilityInputInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AbilityInputInfoDefaultTypeInternal() {}
  union {
    AbilityInputInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AbilityInputInfoDefaultTypeInternal _AbilityInputInfo_default_instance_;
PROTOBUF_CONSTEXPR EquipStateInfo::EquipStateInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.equip_state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EquipStateInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EquipStateInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EquipStateInfoDefaultTypeInternal() {}
  union {
    EquipStateInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EquipStateInfoDefaultTypeInternal _EquipStateInfo_default_instance_;
PROTOBUF_CONSTEXPR AIInfo::AIInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.targetid_id_)*/uint64_t{0u}
  , /*decltype(_impl_.can_attack_)*/false
  , /*decltype(_impl_.patrol_x_)*/0
  , /*decltype(_impl_.patrol_y_)*/0
  , /*decltype(_impl_.patrol_z_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AIInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AIInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AIInfoDefaultTypeInternal() {}
  union {
    AIInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AIInfoDefaultTypeInternal _AIInfo_default_instance_;
PROTOBUF_CONSTEXPR InventoryList::InventoryList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.list_)*/{}
  , /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InventoryListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InventoryListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InventoryListDefaultTypeInternal() {}
  union {
    InventoryList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InventoryListDefaultTypeInternal _InventoryList_default_instance_;
PROTOBUF_CONSTEXPR EquipmentList::EquipmentList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.list_)*/{}
  , /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EquipmentListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EquipmentListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EquipmentListDefaultTypeInternal() {}
  union {
    EquipmentList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EquipmentListDefaultTypeInternal _EquipmentList_default_instance_;
PROTOBUF_CONSTEXPR ItemInfo::ItemInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.item_visual_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.item_id_)*/uint64_t{0u}
  , /*decltype(_impl_.gold_)*/uint64_t{0u}
  , /*decltype(_impl_.item_type_)*/0
  , /*decltype(_impl_.item_rarity_)*/0
  , /*decltype(_impl_.custom_type_)*/0
  , /*decltype(_impl_.equip_type_)*/0
  , /*decltype(_impl_.item_count_)*/uint64_t{0u}
  , /*decltype(_impl_.atk_)*/0
  , /*decltype(_impl_.def_)*/0
  , /*decltype(_impl_.delay_)*/0
  , /*decltype(_impl_.range_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ItemInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ItemInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ItemInfoDefaultTypeInternal() {}
  union {
    ItemInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ItemInfoDefaultTypeInternal _ItemInfo_default_instance_;
PROTOBUF_CONSTEXPR ObjectItemInfo::ObjectItemInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.info_)*/nullptr
  , /*decltype(_impl_.pos_info_)*/nullptr
  , /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ObjectItemInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectItemInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectItemInfoDefaultTypeInternal() {}
  union {
    ObjectItemInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectItemInfoDefaultTypeInternal _ObjectItemInfo_default_instance_;
PROTOBUF_CONSTEXPR ItemBoxInfo::ItemBoxInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.list_)*/nullptr
  , /*decltype(_impl_.pos_info_)*/nullptr
  , /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.box_type_)*/0
  , /*decltype(_impl_.box_state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ItemBoxInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ItemBoxInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ItemBoxInfoDefaultTypeInternal() {}
  union {
    ItemBoxInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ItemBoxInfoDefaultTypeInternal _ItemBoxInfo_default_instance_;
PROTOBUF_CONSTEXPR LevelPointInfo::LevelPointInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_.skill_point_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LevelPointInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LevelPointInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LevelPointInfoDefaultTypeInternal() {}
  union {
    LevelPointInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LevelPointInfoDefaultTypeInternal _LevelPointInfo_default_instance_;
PROTOBUF_CONSTEXPR ShopItemInfo::ShopItemInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_)*/nullptr
  , /*decltype(_impl_.can_buy_count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShopItemInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShopItemInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShopItemInfoDefaultTypeInternal() {}
  union {
    ShopItemInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShopItemInfoDefaultTypeInternal _ShopItemInfo_default_instance_;
PROTOBUF_CONSTEXPR ShopInfo::ShopInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.list_)*/{}
  , /*decltype(_impl_.list_count_)*/0u
  , /*decltype(_impl_.refresh_count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShopInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShopInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShopInfoDefaultTypeInternal() {}
  union {
    ShopInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShopInfoDefaultTypeInternal _ShopInfo_default_instance_;
PROTOBUF_CONSTEXPR MailInfo::MailInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_)*/{}
  , /*decltype(_impl_.main_title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.is_read_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MailInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MailInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MailInfoDefaultTypeInternal() {}
  union {
    MailInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MailInfoDefaultTypeInternal _MailInfo_default_instance_;
PROTOBUF_CONSTEXPR MailBoxInfo::MailBoxInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mail_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MailBoxInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MailBoxInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MailBoxInfoDefaultTypeInternal() {}
  union {
    MailBoxInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MailBoxInfoDefaultTypeInternal _MailBoxInfo_default_instance_;
}  // namespace Protocol
static ::_pb::Metadata file_level_metadata_Struct_2eproto[23];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Struct_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Struct_2eproto = nullptr;

const uint32_t TableStruct_Struct_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::PosInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::PosInfo, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PosInfo, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PosInfo, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PosInfo, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PosInfo, _impl_.yaw_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PosInfo, _impl_.pitch_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PosInfo, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PosInfo, _impl_.skill_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::HitInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::HitInfo, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::HitInfo, _impl_.causer_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::HitInfo, _impl_.damage_),
  PROTOBUF_FIELD_OFFSET(::Protocol::HitInfo, _impl_.hit_yaw_),
  PROTOBUF_FIELD_OFFSET(::Protocol::HitInfo, _impl_.hit_back_),
  PROTOBUF_FIELD_OFFSET(::Protocol::HitInfo, _impl_.hit_stun_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::MeleeAttackInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::MeleeAttackInfo, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::MeleeAttackInfo, _impl_.damage_),
  PROTOBUF_FIELD_OFFSET(::Protocol::MeleeAttackInfo, _impl_.yaw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::ProjectileInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::ProjectileInfo, _impl_.causer_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ProjectileInfo, _impl_.spawn_x_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ProjectileInfo, _impl_.spawn_y_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ProjectileInfo, _impl_.spawn_z_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ProjectileInfo, _impl_.damage_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ProjectileInfo, _impl_.shoot_yaw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::StatusInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::StatusInfo, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::StatusInfo, _impl_.maxhp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::StatusInfo, _impl_.hp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::StatusInfo, _impl_.maxmp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::StatusInfo, _impl_.mp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::StatusInfo, _impl_.atk_),
  PROTOBUF_FIELD_OFFSET(::Protocol::StatusInfo, _impl_.def_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::ClassInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::ClassInfo, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ClassInfo, _impl_.player_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, _impl_.object_type_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, _impl_.player_type_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, _impl_.creature_type_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, _impl_.pos_info_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, _impl_.status_info_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, _impl_.input_info_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, _impl_.level_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::CreatureInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::CreatureInfo, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::CreatureInfo, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::Protocol::CreatureInfo, _impl_.pos_info_),
  PROTOBUF_FIELD_OFFSET(::Protocol::CreatureInfo, _impl_.status_info_),
  PROTOBUF_FIELD_OFFSET(::Protocol::CreatureInfo, _impl_.creature_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::PlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::PlayerInfo, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PlayerInfo, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PlayerInfo, _impl_.player_type_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PlayerInfo, _impl_.pos_info_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PlayerInfo, _impl_.status_info_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PlayerInfo, _impl_.level_info_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PlayerInfo, _impl_.input_info_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PlayerInfo, _impl_.inventory_list_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PlayerInfo, _impl_.equipment_list_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PlayerInfo, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PlayerInfo, _impl_.player_name_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PlayerInfo, _impl_.equip_state_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PlayerInfo, _impl_.gold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::MonsterInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::MonsterInfo, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::MonsterInfo, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::Protocol::MonsterInfo, _impl_.pos_info_),
  PROTOBUF_FIELD_OFFSET(::Protocol::MonsterInfo, _impl_.status_info_),
  PROTOBUF_FIELD_OFFSET(::Protocol::MonsterInfo, _impl_.input_info_),
  PROTOBUF_FIELD_OFFSET(::Protocol::MonsterInfo, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::AbilityInputInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::AbilityInputInfo, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::AbilityInputInfo, _impl_.tag_),
  PROTOBUF_FIELD_OFFSET(::Protocol::AbilityInputInfo, _impl_.input_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::EquipStateInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::EquipStateInfo, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::EquipStateInfo, _impl_.equip_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::AIInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::AIInfo, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::AIInfo, _impl_.targetid_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::AIInfo, _impl_.can_attack_),
  PROTOBUF_FIELD_OFFSET(::Protocol::AIInfo, _impl_.patrol_x_),
  PROTOBUF_FIELD_OFFSET(::Protocol::AIInfo, _impl_.patrol_y_),
  PROTOBUF_FIELD_OFFSET(::Protocol::AIInfo, _impl_.patrol_z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::InventoryList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::InventoryList, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::InventoryList, _impl_.list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::EquipmentList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::EquipmentList, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::EquipmentList, _impl_.list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::ItemInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::ItemInfo, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ItemInfo, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ItemInfo, _impl_.gold_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ItemInfo, _impl_.item_type_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ItemInfo, _impl_.item_rarity_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ItemInfo, _impl_.custom_type_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ItemInfo, _impl_.equip_type_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ItemInfo, _impl_.item_count_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ItemInfo, _impl_.item_name_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ItemInfo, _impl_.item_visual_name_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ItemInfo, _impl_.atk_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ItemInfo, _impl_.def_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ItemInfo, _impl_.delay_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ItemInfo, _impl_.range_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectItemInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectItemInfo, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectItemInfo, _impl_.info_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectItemInfo, _impl_.pos_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::ItemBoxInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::ItemBoxInfo, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ItemBoxInfo, _impl_.box_type_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ItemBoxInfo, _impl_.box_state_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ItemBoxInfo, _impl_.list_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ItemBoxInfo, _impl_.pos_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::LevelPointInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::LevelPointInfo, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::LevelPointInfo, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::Protocol::LevelPointInfo, _impl_.skill_point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::ShopItemInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::ShopItemInfo, _impl_.item_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ShopItemInfo, _impl_.can_buy_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::ShopInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::ShopInfo, _impl_.list_count_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ShopInfo, _impl_.list_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ShopInfo, _impl_.refresh_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::MailInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::MailInfo, _impl_.main_title_),
  PROTOBUF_FIELD_OFFSET(::Protocol::MailInfo, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::Protocol::MailInfo, _impl_.item_),
  PROTOBUF_FIELD_OFFSET(::Protocol::MailInfo, _impl_.is_read_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::MailBoxInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::MailBoxInfo, _impl_.mail_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Protocol::PosInfo)},
  { 14, -1, -1, sizeof(::Protocol::HitInfo)},
  { 26, -1, -1, sizeof(::Protocol::MeleeAttackInfo)},
  { 35, -1, -1, sizeof(::Protocol::ProjectileInfo)},
  { 47, -1, -1, sizeof(::Protocol::StatusInfo)},
  { 60, -1, -1, sizeof(::Protocol::ClassInfo)},
  { 68, -1, -1, sizeof(::Protocol::ObjectInfo)},
  { 82, -1, -1, sizeof(::Protocol::CreatureInfo)},
  { 93, -1, -1, sizeof(::Protocol::PlayerInfo)},
  { 112, -1, -1, sizeof(::Protocol::MonsterInfo)},
  { 124, -1, -1, sizeof(::Protocol::AbilityInputInfo)},
  { 133, -1, -1, sizeof(::Protocol::EquipStateInfo)},
  { 141, -1, -1, sizeof(::Protocol::AIInfo)},
  { 153, -1, -1, sizeof(::Protocol::InventoryList)},
  { 161, -1, -1, sizeof(::Protocol::EquipmentList)},
  { 169, -1, -1, sizeof(::Protocol::ItemInfo)},
  { 189, -1, -1, sizeof(::Protocol::ObjectItemInfo)},
  { 198, -1, -1, sizeof(::Protocol::ItemBoxInfo)},
  { 209, -1, -1, sizeof(::Protocol::LevelPointInfo)},
  { 218, -1, -1, sizeof(::Protocol::ShopItemInfo)},
  { 226, -1, -1, sizeof(::Protocol::ShopInfo)},
  { 235, -1, -1, sizeof(::Protocol::MailInfo)},
  { 245, -1, -1, sizeof(::Protocol::MailBoxInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Protocol::_PosInfo_default_instance_._instance,
  &::Protocol::_HitInfo_default_instance_._instance,
  &::Protocol::_MeleeAttackInfo_default_instance_._instance,
  &::Protocol::_ProjectileInfo_default_instance_._instance,
  &::Protocol::_StatusInfo_default_instance_._instance,
  &::Protocol::_ClassInfo_default_instance_._instance,
  &::Protocol::_ObjectInfo_default_instance_._instance,
  &::Protocol::_CreatureInfo_default_instance_._instance,
  &::Protocol::_PlayerInfo_default_instance_._instance,
  &::Protocol::_MonsterInfo_default_instance_._instance,
  &::Protocol::_AbilityInputInfo_default_instance_._instance,
  &::Protocol::_EquipStateInfo_default_instance_._instance,
  &::Protocol::_AIInfo_default_instance_._instance,
  &::Protocol::_InventoryList_default_instance_._instance,
  &::Protocol::_EquipmentList_default_instance_._instance,
  &::Protocol::_ItemInfo_default_instance_._instance,
  &::Protocol::_ObjectItemInfo_default_instance_._instance,
  &::Protocol::_ItemBoxInfo_default_instance_._instance,
  &::Protocol::_LevelPointInfo_default_instance_._instance,
  &::Protocol::_ShopItemInfo_default_instance_._instance,
  &::Protocol::_ShopInfo_default_instance_._instance,
  &::Protocol::_MailInfo_default_instance_._instance,
  &::Protocol::_MailBoxInfo_default_instance_._instance,
};

const char descriptor_table_protodef_Struct_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014Struct.proto\022\010Protocol\032\nEnum.proto\"\242\001\n"
  "\007PosInfo\022\021\n\tobject_id\030\001 \001(\004\022\t\n\001x\030\002 \001(\002\022\t"
  "\n\001y\030\003 \001(\002\022\t\n\001z\030\004 \001(\002\022\013\n\003yaw\030\005 \001(\002\022\r\n\005pit"
  "ch\030\006 \001(\002\022\"\n\005state\030\007 \001(\0162\023.Protocol.MoveS"
  "tate\022#\n\005skill\030\010 \001(\0162\024.Protocol.SkillStat"
  "e\"t\n\007HitInfo\022\021\n\tobject_id\030\001 \001(\004\022\021\n\tcause"
  "r_id\030\002 \001(\004\022\016\n\006damage\030\003 \001(\002\022\017\n\007hit_yaw\030\004 "
  "\001(\002\022\020\n\010hit_back\030\005 \001(\002\022\020\n\010hit_stun\030\006 \001(\002\""
  "A\n\017MeleeAttackInfo\022\021\n\tobject_id\030\001 \001(\004\022\016\n"
  "\006damage\030\002 \001(\002\022\013\n\003yaw\030\003 \001(\002\"y\n\016Projectile"
  "Info\022\021\n\tcauser_id\030\001 \001(\004\022\017\n\007spawn_x\030\002 \001(\002"
  "\022\017\n\007spawn_y\030\003 \001(\002\022\017\n\007spawn_z\030\004 \001(\002\022\016\n\006da"
  "mage\030\005 \001(\002\022\021\n\tshoot_yaw\030\006 \001(\002\"o\n\nStatusI"
  "nfo\022\021\n\tobject_id\030\001 \001(\004\022\r\n\005maxhp\030\002 \001(\002\022\n\n"
  "\002hp\030\003 \001(\002\022\r\n\005maxmp\030\004 \001(\002\022\n\n\002mp\030\005 \001(\002\022\013\n\003"
  "atk\030\006 \001(\002\022\013\n\003def\030\007 \001(\002\"I\n\tClassInfo\022\021\n\to"
  "bject_id\030\001 \001(\004\022)\n\013player_type\030\002 \001(\0162\024.Pr"
  "otocol.PlayerType\"\321\002\n\nObjectInfo\022\021\n\tobje"
  "ct_id\030\001 \001(\004\022)\n\013object_type\030\002 \001(\0162\024.Proto"
  "col.ObjectType\022(\n\013player_type\030\003 \001(\0132\023.Pr"
  "otocol.ClassInfo\022-\n\rcreature_type\030\004 \001(\0162"
  "\026.Protocol.CreatureType\022#\n\010pos_info\030\005 \001("
  "\0132\021.Protocol.PosInfo\022)\n\013status_info\030\006 \001("
  "\0132\024.Protocol.StatusInfo\022.\n\ninput_info\030\007 "
  "\001(\0132\032.Protocol.AbilityInputInfo\022,\n\nlevel"
  "_info\030\010 \001(\0132\030.Protocol.LevelPointInfo\"\257\001"
  "\n\014CreatureInfo\022\021\n\tobject_id\030\001 \001(\004\022\r\n\005lev"
  "el\030\002 \001(\r\022#\n\010pos_info\030\003 \001(\0132\021.Protocol.Po"
  "sInfo\022)\n\013status_info\030\004 \001(\0132\024.Protocol.St"
  "atusInfo\022-\n\rcreature_type\030\005 \001(\0162\026.Protoc"
  "ol.CreatureType\"\315\003\n\nPlayerInfo\022\021\n\tobject"
  "_id\030\001 \001(\004\022\r\n\005level\030\002 \001(\r\022(\n\013player_type\030"
  "\003 \001(\0132\023.Protocol.ClassInfo\022#\n\010pos_info\030\004"
  " \001(\0132\021.Protocol.PosInfo\022)\n\013status_info\030\005"
  " \001(\0132\024.Protocol.StatusInfo\022,\n\nlevel_info"
  "\030\006 \001(\0132\030.Protocol.LevelPointInfo\022.\n\ninpu"
  "t_info\030\007 \001(\0132\032.Protocol.AbilityInputInfo"
  "\022/\n\016inventory_list\030\010 \001(\0132\027.Protocol.Inve"
  "ntoryList\022/\n\016equipment_list\030\t \001(\0132\027.Prot"
  "ocol.EquipmentList\022\021\n\tplayer_id\030\n \001(\t\022\023\n"
  "\013player_name\030\013 \001(\t\022-\n\013equip_state\030\014 \001(\0132"
  "\030.Protocol.EquipStateInfo\022\014\n\004gold\030\r \001(\004\""
  "\324\001\n\013MonsterInfo\022\021\n\tobject_id\030\001 \001(\004\022\r\n\005le"
  "vel\030\002 \001(\r\022#\n\010pos_info\030\004 \001(\0132\021.Protocol.P"
  "osInfo\022)\n\013status_info\030\005 \001(\0132\024.Protocol.S"
  "tatusInfo\022.\n\ninput_info\030\006 \001(\0132\032.Protocol"
  ".AbilityInputInfo\022#\n\004type\030\007 \001(\0162\025.Protoc"
  "ol.MonsterType\"W\n\020AbilityInputInfo\022\021\n\tob"
  "ject_id\030\001 \001(\004\022\013\n\003tag\030\002 \001(\t\022#\n\005input\030\003 \001("
  "\0162\024.Protocol.InputState\"N\n\016EquipStateInf"
  "o\022\021\n\tobject_id\030\001 \001(\004\022)\n\013equip_state\030\002 \001("
  "\0162\024.Protocol.EquipState\"z\n\006AIInfo\022\021\n\tobj"
  "ect_id\030\001 \001(\004\022\023\n\013targetId_id\030\002 \001(\004\022\022\n\ncan"
  "_attack\030\003 \001(\010\022\020\n\010Patrol_x\030\004 \001(\002\022\020\n\010Patro"
  "l_y\030\005 \001(\002\022\020\n\010Patrol_z\030\006 \001(\002\"D\n\rInventory"
  "List\022\021\n\tobject_id\030\001 \001(\004\022 \n\004list\030\002 \003(\0132\022."
  "Protocol.ItemInfo\"D\n\rEquipmentList\022\021\n\tob"
  "ject_id\030\001 \001(\004\022 \n\004list\030\002 \003(\0132\022.Protocol.I"
  "temInfo\"\337\002\n\010ItemInfo\022\021\n\tobject_id\030\001 \001(\004\022"
  "\017\n\007item_id\030\002 \001(\004\022\014\n\004gold\030\003 \001(\004\022%\n\titem_t"
  "ype\030\004 \001(\0162\022.Protocol.ItemType\022)\n\013item_ra"
  "rity\030\005 \001(\0162\024.Protocol.ItemRarity\022-\n\013cust"
  "om_type\030\006 \001(\0162\030.Protocol.ItemCustomType\022"
  "\'\n\nequip_type\030\007 \001(\0162\023.Protocol.EquipType"
  "\022\022\n\nitem_count\030\010 \001(\004\022\021\n\titem_name\030\t \001(\t\022"
  "\030\n\020item_visual_name\030\n \001(\t\022\013\n\003atk\030\013 \001(\002\022\013"
  "\n\003def\030\014 \001(\002\022\r\n\005delay\030\r \001(\002\022\r\n\005range\030\016 \001("
  "\002\"j\n\016ObjectItemInfo\022\021\n\tobject_id\030\001 \001(\004\022 "
  "\n\004info\030\002 \001(\0132\022.Protocol.ItemInfo\022#\n\010pos_"
  "info\030\003 \001(\0132\021.Protocol.PosInfo\"\300\001\n\013ItemBo"
  "xInfo\022\021\n\tobject_id\030\001 \001(\004\022\'\n\010box_type\030\002 \001"
  "(\0162\025.Protocol.ItemBoxType\022)\n\tbox_state\030\003"
  " \001(\0162\026.Protocol.ItemBoxState\022%\n\004list\030\004 \001"
  "(\0132\027.Protocol.InventoryList\022#\n\010pos_info\030"
  "\005 \001(\0132\021.Protocol.PosInfo\"G\n\016LevelPointIn"
  "fo\022\021\n\tobject_id\030\001 \001(\004\022\r\n\005level\030\002 \001(\r\022\023\n\013"
  "skill_point\030\003 \001(\r\"G\n\014ShopItemInfo\022 \n\004ite"
  "m\030\001 \001(\0132\022.Protocol.ItemInfo\022\025\n\rcan_buy_c"
  "ount\030\002 \001(\r\"[\n\010ShopInfo\022\022\n\nlist_count\030\001 \001"
  "(\r\022$\n\004list\030\002 \003(\0132\026.Protocol.ShopItemInfo"
  "\022\025\n\rrefresh_count\030\003 \001(\r\"_\n\010MailInfo\022\022\n\nm"
  "ain_title\030\001 \001(\t\022\014\n\004text\030\002 \001(\t\022 \n\004item\030\003 "
  "\003(\0132\022.Protocol.ItemInfo\022\017\n\007is_read\030\004 \001(\010"
  "\"/\n\013MailBoxInfo\022 \n\004mail\030\001 \003(\0132\022.Protocol"
  ".MailInfob\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_Struct_2eproto_deps[1] = {
  &::descriptor_table_Enum_2eproto,
};
static ::_pbi::once_flag descriptor_table_Struct_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Struct_2eproto = {
    false, false, 3377, descriptor_table_protodef_Struct_2eproto,
    "Struct.proto",
    &descriptor_table_Struct_2eproto_once, descriptor_table_Struct_2eproto_deps, 1, 23,
    schemas, file_default_instances, TableStruct_Struct_2eproto::offsets,
    file_level_metadata_Struct_2eproto, file_level_enum_descriptors_Struct_2eproto,
    file_level_service_descriptors_Struct_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Struct_2eproto_getter() {
  return &descriptor_table_Struct_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Struct_2eproto(&descriptor_table_Struct_2eproto);
namespace Protocol {

// ===================================================================

class PosInfo::_Internal {
 public:
};

PosInfo::PosInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.PosInfo)
}
PosInfo::PosInfo(const PosInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PosInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.yaw_){}
    , decltype(_impl_.pitch_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.skill_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.skill_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.skill_));
  // @@protoc_insertion_point(copy_constructor:Protocol.PosInfo)
}

inline void PosInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.yaw_){0}
    , decltype(_impl_.pitch_){0}
    , decltype(_impl_.state_){0}
    , decltype(_impl_.skill_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PosInfo::~PosInfo() {
  // @@protoc_insertion_point(destructor:Protocol.PosInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PosInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PosInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PosInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.PosInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.skill_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.skill_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PosInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float yaw = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float pitch = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.MoveState state = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::Protocol::MoveState>(val));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.SkillState skill = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_skill(static_cast<::Protocol::SkillState>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PosInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.PosInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // float z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_z(), target);
  }

  // float yaw = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_yaw(), target);
  }

  // float pitch = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = this->_internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_pitch(), target);
  }

  // .Protocol.MoveState state = 7;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_state(), target);
  }

  // .Protocol.SkillState skill = 8;
  if (this->_internal_skill() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_skill(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.PosInfo)
  return target;
}

size_t PosInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.PosInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  // float yaw = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    total_size += 1 + 4;
  }

  // float pitch = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = this->_internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    total_size += 1 + 4;
  }

  // .Protocol.MoveState state = 7;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  // .Protocol.SkillState skill = 8;
  if (this->_internal_skill() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_skill());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PosInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PosInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PosInfo::GetClassData() const { return &_class_data_; }


void PosInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PosInfo*>(&to_msg);
  auto& from = static_cast<const PosInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.PosInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = from._internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    _this->_internal_set_yaw(from._internal_yaw());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = from._internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    _this->_internal_set_pitch(from._internal_pitch());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  if (from._internal_skill() != 0) {
    _this->_internal_set_skill(from._internal_skill());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PosInfo::CopyFrom(const PosInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.PosInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PosInfo::IsInitialized() const {
  return true;
}

void PosInfo::InternalSwap(PosInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PosInfo, _impl_.skill_)
      + sizeof(PosInfo::_impl_.skill_)
      - PROTOBUF_FIELD_OFFSET(PosInfo, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PosInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[0]);
}

// ===================================================================

class HitInfo::_Internal {
 public:
};

HitInfo::HitInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.HitInfo)
}
HitInfo::HitInfo(const HitInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HitInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.causer_id_){}
    , decltype(_impl_.damage_){}
    , decltype(_impl_.hit_yaw_){}
    , decltype(_impl_.hit_back_){}
    , decltype(_impl_.hit_stun_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hit_stun_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.hit_stun_));
  // @@protoc_insertion_point(copy_constructor:Protocol.HitInfo)
}

inline void HitInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.causer_id_){uint64_t{0u}}
    , decltype(_impl_.damage_){0}
    , decltype(_impl_.hit_yaw_){0}
    , decltype(_impl_.hit_back_){0}
    , decltype(_impl_.hit_stun_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HitInfo::~HitInfo() {
  // @@protoc_insertion_point(destructor:Protocol.HitInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HitInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HitInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HitInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.HitInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.hit_stun_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.hit_stun_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HitInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 causer_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.causer_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float damage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.damage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float hit_yaw = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.hit_yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float hit_back = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.hit_back_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float hit_stun = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.hit_stun_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HitInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.HitInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // uint64 causer_id = 2;
  if (this->_internal_causer_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_causer_id(), target);
  }

  // float damage = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_damage = this->_internal_damage();
  uint32_t raw_damage;
  memcpy(&raw_damage, &tmp_damage, sizeof(tmp_damage));
  if (raw_damage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_damage(), target);
  }

  // float hit_yaw = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hit_yaw = this->_internal_hit_yaw();
  uint32_t raw_hit_yaw;
  memcpy(&raw_hit_yaw, &tmp_hit_yaw, sizeof(tmp_hit_yaw));
  if (raw_hit_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_hit_yaw(), target);
  }

  // float hit_back = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hit_back = this->_internal_hit_back();
  uint32_t raw_hit_back;
  memcpy(&raw_hit_back, &tmp_hit_back, sizeof(tmp_hit_back));
  if (raw_hit_back != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_hit_back(), target);
  }

  // float hit_stun = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hit_stun = this->_internal_hit_stun();
  uint32_t raw_hit_stun;
  memcpy(&raw_hit_stun, &tmp_hit_stun, sizeof(tmp_hit_stun));
  if (raw_hit_stun != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_hit_stun(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.HitInfo)
  return target;
}

size_t HitInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.HitInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // uint64 causer_id = 2;
  if (this->_internal_causer_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_causer_id());
  }

  // float damage = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_damage = this->_internal_damage();
  uint32_t raw_damage;
  memcpy(&raw_damage, &tmp_damage, sizeof(tmp_damage));
  if (raw_damage != 0) {
    total_size += 1 + 4;
  }

  // float hit_yaw = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hit_yaw = this->_internal_hit_yaw();
  uint32_t raw_hit_yaw;
  memcpy(&raw_hit_yaw, &tmp_hit_yaw, sizeof(tmp_hit_yaw));
  if (raw_hit_yaw != 0) {
    total_size += 1 + 4;
  }

  // float hit_back = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hit_back = this->_internal_hit_back();
  uint32_t raw_hit_back;
  memcpy(&raw_hit_back, &tmp_hit_back, sizeof(tmp_hit_back));
  if (raw_hit_back != 0) {
    total_size += 1 + 4;
  }

  // float hit_stun = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hit_stun = this->_internal_hit_stun();
  uint32_t raw_hit_stun;
  memcpy(&raw_hit_stun, &tmp_hit_stun, sizeof(tmp_hit_stun));
  if (raw_hit_stun != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HitInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HitInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HitInfo::GetClassData() const { return &_class_data_; }


void HitInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HitInfo*>(&to_msg);
  auto& from = static_cast<const HitInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.HitInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_causer_id() != 0) {
    _this->_internal_set_causer_id(from._internal_causer_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_damage = from._internal_damage();
  uint32_t raw_damage;
  memcpy(&raw_damage, &tmp_damage, sizeof(tmp_damage));
  if (raw_damage != 0) {
    _this->_internal_set_damage(from._internal_damage());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hit_yaw = from._internal_hit_yaw();
  uint32_t raw_hit_yaw;
  memcpy(&raw_hit_yaw, &tmp_hit_yaw, sizeof(tmp_hit_yaw));
  if (raw_hit_yaw != 0) {
    _this->_internal_set_hit_yaw(from._internal_hit_yaw());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hit_back = from._internal_hit_back();
  uint32_t raw_hit_back;
  memcpy(&raw_hit_back, &tmp_hit_back, sizeof(tmp_hit_back));
  if (raw_hit_back != 0) {
    _this->_internal_set_hit_back(from._internal_hit_back());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hit_stun = from._internal_hit_stun();
  uint32_t raw_hit_stun;
  memcpy(&raw_hit_stun, &tmp_hit_stun, sizeof(tmp_hit_stun));
  if (raw_hit_stun != 0) {
    _this->_internal_set_hit_stun(from._internal_hit_stun());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HitInfo::CopyFrom(const HitInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.HitInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HitInfo::IsInitialized() const {
  return true;
}

void HitInfo::InternalSwap(HitInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HitInfo, _impl_.hit_stun_)
      + sizeof(HitInfo::_impl_.hit_stun_)
      - PROTOBUF_FIELD_OFFSET(HitInfo, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HitInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[1]);
}

// ===================================================================

class MeleeAttackInfo::_Internal {
 public:
};

MeleeAttackInfo::MeleeAttackInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.MeleeAttackInfo)
}
MeleeAttackInfo::MeleeAttackInfo(const MeleeAttackInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MeleeAttackInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.damage_){}
    , decltype(_impl_.yaw_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.yaw_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.yaw_));
  // @@protoc_insertion_point(copy_constructor:Protocol.MeleeAttackInfo)
}

inline void MeleeAttackInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.damage_){0}
    , decltype(_impl_.yaw_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MeleeAttackInfo::~MeleeAttackInfo() {
  // @@protoc_insertion_point(destructor:Protocol.MeleeAttackInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MeleeAttackInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MeleeAttackInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MeleeAttackInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.MeleeAttackInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.yaw_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.yaw_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MeleeAttackInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float damage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.damage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float yaw = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MeleeAttackInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.MeleeAttackInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // float damage = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_damage = this->_internal_damage();
  uint32_t raw_damage;
  memcpy(&raw_damage, &tmp_damage, sizeof(tmp_damage));
  if (raw_damage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_damage(), target);
  }

  // float yaw = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_yaw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.MeleeAttackInfo)
  return target;
}

size_t MeleeAttackInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.MeleeAttackInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // float damage = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_damage = this->_internal_damage();
  uint32_t raw_damage;
  memcpy(&raw_damage, &tmp_damage, sizeof(tmp_damage));
  if (raw_damage != 0) {
    total_size += 1 + 4;
  }

  // float yaw = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MeleeAttackInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MeleeAttackInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MeleeAttackInfo::GetClassData() const { return &_class_data_; }


void MeleeAttackInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MeleeAttackInfo*>(&to_msg);
  auto& from = static_cast<const MeleeAttackInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.MeleeAttackInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_damage = from._internal_damage();
  uint32_t raw_damage;
  memcpy(&raw_damage, &tmp_damage, sizeof(tmp_damage));
  if (raw_damage != 0) {
    _this->_internal_set_damage(from._internal_damage());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = from._internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    _this->_internal_set_yaw(from._internal_yaw());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MeleeAttackInfo::CopyFrom(const MeleeAttackInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.MeleeAttackInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeleeAttackInfo::IsInitialized() const {
  return true;
}

void MeleeAttackInfo::InternalSwap(MeleeAttackInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MeleeAttackInfo, _impl_.yaw_)
      + sizeof(MeleeAttackInfo::_impl_.yaw_)
      - PROTOBUF_FIELD_OFFSET(MeleeAttackInfo, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MeleeAttackInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[2]);
}

// ===================================================================

class ProjectileInfo::_Internal {
 public:
};

ProjectileInfo::ProjectileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.ProjectileInfo)
}
ProjectileInfo::ProjectileInfo(const ProjectileInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProjectileInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.causer_id_){}
    , decltype(_impl_.spawn_x_){}
    , decltype(_impl_.spawn_y_){}
    , decltype(_impl_.spawn_z_){}
    , decltype(_impl_.damage_){}
    , decltype(_impl_.shoot_yaw_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.causer_id_, &from._impl_.causer_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.shoot_yaw_) -
    reinterpret_cast<char*>(&_impl_.causer_id_)) + sizeof(_impl_.shoot_yaw_));
  // @@protoc_insertion_point(copy_constructor:Protocol.ProjectileInfo)
}

inline void ProjectileInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.causer_id_){uint64_t{0u}}
    , decltype(_impl_.spawn_x_){0}
    , decltype(_impl_.spawn_y_){0}
    , decltype(_impl_.spawn_z_){0}
    , decltype(_impl_.damage_){0}
    , decltype(_impl_.shoot_yaw_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProjectileInfo::~ProjectileInfo() {
  // @@protoc_insertion_point(destructor:Protocol.ProjectileInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProjectileInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProjectileInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProjectileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.ProjectileInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.causer_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.shoot_yaw_) -
      reinterpret_cast<char*>(&_impl_.causer_id_)) + sizeof(_impl_.shoot_yaw_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProjectileInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 causer_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.causer_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float spawn_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.spawn_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float spawn_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.spawn_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float spawn_z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.spawn_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float damage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.damage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float shoot_yaw = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.shoot_yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProjectileInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.ProjectileInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 causer_id = 1;
  if (this->_internal_causer_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_causer_id(), target);
  }

  // float spawn_x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_spawn_x = this->_internal_spawn_x();
  uint32_t raw_spawn_x;
  memcpy(&raw_spawn_x, &tmp_spawn_x, sizeof(tmp_spawn_x));
  if (raw_spawn_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_spawn_x(), target);
  }

  // float spawn_y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_spawn_y = this->_internal_spawn_y();
  uint32_t raw_spawn_y;
  memcpy(&raw_spawn_y, &tmp_spawn_y, sizeof(tmp_spawn_y));
  if (raw_spawn_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_spawn_y(), target);
  }

  // float spawn_z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_spawn_z = this->_internal_spawn_z();
  uint32_t raw_spawn_z;
  memcpy(&raw_spawn_z, &tmp_spawn_z, sizeof(tmp_spawn_z));
  if (raw_spawn_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_spawn_z(), target);
  }

  // float damage = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_damage = this->_internal_damage();
  uint32_t raw_damage;
  memcpy(&raw_damage, &tmp_damage, sizeof(tmp_damage));
  if (raw_damage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_damage(), target);
  }

  // float shoot_yaw = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_shoot_yaw = this->_internal_shoot_yaw();
  uint32_t raw_shoot_yaw;
  memcpy(&raw_shoot_yaw, &tmp_shoot_yaw, sizeof(tmp_shoot_yaw));
  if (raw_shoot_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_shoot_yaw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.ProjectileInfo)
  return target;
}

size_t ProjectileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.ProjectileInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 causer_id = 1;
  if (this->_internal_causer_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_causer_id());
  }

  // float spawn_x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_spawn_x = this->_internal_spawn_x();
  uint32_t raw_spawn_x;
  memcpy(&raw_spawn_x, &tmp_spawn_x, sizeof(tmp_spawn_x));
  if (raw_spawn_x != 0) {
    total_size += 1 + 4;
  }

  // float spawn_y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_spawn_y = this->_internal_spawn_y();
  uint32_t raw_spawn_y;
  memcpy(&raw_spawn_y, &tmp_spawn_y, sizeof(tmp_spawn_y));
  if (raw_spawn_y != 0) {
    total_size += 1 + 4;
  }

  // float spawn_z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_spawn_z = this->_internal_spawn_z();
  uint32_t raw_spawn_z;
  memcpy(&raw_spawn_z, &tmp_spawn_z, sizeof(tmp_spawn_z));
  if (raw_spawn_z != 0) {
    total_size += 1 + 4;
  }

  // float damage = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_damage = this->_internal_damage();
  uint32_t raw_damage;
  memcpy(&raw_damage, &tmp_damage, sizeof(tmp_damage));
  if (raw_damage != 0) {
    total_size += 1 + 4;
  }

  // float shoot_yaw = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_shoot_yaw = this->_internal_shoot_yaw();
  uint32_t raw_shoot_yaw;
  memcpy(&raw_shoot_yaw, &tmp_shoot_yaw, sizeof(tmp_shoot_yaw));
  if (raw_shoot_yaw != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProjectileInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProjectileInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProjectileInfo::GetClassData() const { return &_class_data_; }


void ProjectileInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProjectileInfo*>(&to_msg);
  auto& from = static_cast<const ProjectileInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.ProjectileInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_causer_id() != 0) {
    _this->_internal_set_causer_id(from._internal_causer_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_spawn_x = from._internal_spawn_x();
  uint32_t raw_spawn_x;
  memcpy(&raw_spawn_x, &tmp_spawn_x, sizeof(tmp_spawn_x));
  if (raw_spawn_x != 0) {
    _this->_internal_set_spawn_x(from._internal_spawn_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_spawn_y = from._internal_spawn_y();
  uint32_t raw_spawn_y;
  memcpy(&raw_spawn_y, &tmp_spawn_y, sizeof(tmp_spawn_y));
  if (raw_spawn_y != 0) {
    _this->_internal_set_spawn_y(from._internal_spawn_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_spawn_z = from._internal_spawn_z();
  uint32_t raw_spawn_z;
  memcpy(&raw_spawn_z, &tmp_spawn_z, sizeof(tmp_spawn_z));
  if (raw_spawn_z != 0) {
    _this->_internal_set_spawn_z(from._internal_spawn_z());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_damage = from._internal_damage();
  uint32_t raw_damage;
  memcpy(&raw_damage, &tmp_damage, sizeof(tmp_damage));
  if (raw_damage != 0) {
    _this->_internal_set_damage(from._internal_damage());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_shoot_yaw = from._internal_shoot_yaw();
  uint32_t raw_shoot_yaw;
  memcpy(&raw_shoot_yaw, &tmp_shoot_yaw, sizeof(tmp_shoot_yaw));
  if (raw_shoot_yaw != 0) {
    _this->_internal_set_shoot_yaw(from._internal_shoot_yaw());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProjectileInfo::CopyFrom(const ProjectileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.ProjectileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectileInfo::IsInitialized() const {
  return true;
}

void ProjectileInfo::InternalSwap(ProjectileInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProjectileInfo, _impl_.shoot_yaw_)
      + sizeof(ProjectileInfo::_impl_.shoot_yaw_)
      - PROTOBUF_FIELD_OFFSET(ProjectileInfo, _impl_.causer_id_)>(
          reinterpret_cast<char*>(&_impl_.causer_id_),
          reinterpret_cast<char*>(&other->_impl_.causer_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProjectileInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[3]);
}

// ===================================================================

class StatusInfo::_Internal {
 public:
};

StatusInfo::StatusInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.StatusInfo)
}
StatusInfo::StatusInfo(const StatusInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StatusInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.maxhp_){}
    , decltype(_impl_.hp_){}
    , decltype(_impl_.maxmp_){}
    , decltype(_impl_.mp_){}
    , decltype(_impl_.atk_){}
    , decltype(_impl_.def_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.def_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.def_));
  // @@protoc_insertion_point(copy_constructor:Protocol.StatusInfo)
}

inline void StatusInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.maxhp_){0}
    , decltype(_impl_.hp_){0}
    , decltype(_impl_.maxmp_){0}
    , decltype(_impl_.mp_){0}
    , decltype(_impl_.atk_){0}
    , decltype(_impl_.def_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StatusInfo::~StatusInfo() {
  // @@protoc_insertion_point(destructor:Protocol.StatusInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StatusInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StatusInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StatusInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.StatusInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.def_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.def_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float maxhp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.maxhp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float hp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float maxmp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.maxmp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.mp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float atk = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.atk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float def = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.def_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatusInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.StatusInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // float maxhp = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_maxhp = this->_internal_maxhp();
  uint32_t raw_maxhp;
  memcpy(&raw_maxhp, &tmp_maxhp, sizeof(tmp_maxhp));
  if (raw_maxhp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_maxhp(), target);
  }

  // float hp = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hp = this->_internal_hp();
  uint32_t raw_hp;
  memcpy(&raw_hp, &tmp_hp, sizeof(tmp_hp));
  if (raw_hp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_hp(), target);
  }

  // float maxmp = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_maxmp = this->_internal_maxmp();
  uint32_t raw_maxmp;
  memcpy(&raw_maxmp, &tmp_maxmp, sizeof(tmp_maxmp));
  if (raw_maxmp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_maxmp(), target);
  }

  // float mp = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mp = this->_internal_mp();
  uint32_t raw_mp;
  memcpy(&raw_mp, &tmp_mp, sizeof(tmp_mp));
  if (raw_mp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_mp(), target);
  }

  // float atk = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_atk = this->_internal_atk();
  uint32_t raw_atk;
  memcpy(&raw_atk, &tmp_atk, sizeof(tmp_atk));
  if (raw_atk != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_atk(), target);
  }

  // float def = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_def = this->_internal_def();
  uint32_t raw_def;
  memcpy(&raw_def, &tmp_def, sizeof(tmp_def));
  if (raw_def != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_def(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.StatusInfo)
  return target;
}

size_t StatusInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.StatusInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // float maxhp = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_maxhp = this->_internal_maxhp();
  uint32_t raw_maxhp;
  memcpy(&raw_maxhp, &tmp_maxhp, sizeof(tmp_maxhp));
  if (raw_maxhp != 0) {
    total_size += 1 + 4;
  }

  // float hp = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hp = this->_internal_hp();
  uint32_t raw_hp;
  memcpy(&raw_hp, &tmp_hp, sizeof(tmp_hp));
  if (raw_hp != 0) {
    total_size += 1 + 4;
  }

  // float maxmp = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_maxmp = this->_internal_maxmp();
  uint32_t raw_maxmp;
  memcpy(&raw_maxmp, &tmp_maxmp, sizeof(tmp_maxmp));
  if (raw_maxmp != 0) {
    total_size += 1 + 4;
  }

  // float mp = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mp = this->_internal_mp();
  uint32_t raw_mp;
  memcpy(&raw_mp, &tmp_mp, sizeof(tmp_mp));
  if (raw_mp != 0) {
    total_size += 1 + 4;
  }

  // float atk = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_atk = this->_internal_atk();
  uint32_t raw_atk;
  memcpy(&raw_atk, &tmp_atk, sizeof(tmp_atk));
  if (raw_atk != 0) {
    total_size += 1 + 4;
  }

  // float def = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_def = this->_internal_def();
  uint32_t raw_def;
  memcpy(&raw_def, &tmp_def, sizeof(tmp_def));
  if (raw_def != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatusInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StatusInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatusInfo::GetClassData() const { return &_class_data_; }


void StatusInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StatusInfo*>(&to_msg);
  auto& from = static_cast<const StatusInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.StatusInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_maxhp = from._internal_maxhp();
  uint32_t raw_maxhp;
  memcpy(&raw_maxhp, &tmp_maxhp, sizeof(tmp_maxhp));
  if (raw_maxhp != 0) {
    _this->_internal_set_maxhp(from._internal_maxhp());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hp = from._internal_hp();
  uint32_t raw_hp;
  memcpy(&raw_hp, &tmp_hp, sizeof(tmp_hp));
  if (raw_hp != 0) {
    _this->_internal_set_hp(from._internal_hp());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_maxmp = from._internal_maxmp();
  uint32_t raw_maxmp;
  memcpy(&raw_maxmp, &tmp_maxmp, sizeof(tmp_maxmp));
  if (raw_maxmp != 0) {
    _this->_internal_set_maxmp(from._internal_maxmp());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mp = from._internal_mp();
  uint32_t raw_mp;
  memcpy(&raw_mp, &tmp_mp, sizeof(tmp_mp));
  if (raw_mp != 0) {
    _this->_internal_set_mp(from._internal_mp());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_atk = from._internal_atk();
  uint32_t raw_atk;
  memcpy(&raw_atk, &tmp_atk, sizeof(tmp_atk));
  if (raw_atk != 0) {
    _this->_internal_set_atk(from._internal_atk());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_def = from._internal_def();
  uint32_t raw_def;
  memcpy(&raw_def, &tmp_def, sizeof(tmp_def));
  if (raw_def != 0) {
    _this->_internal_set_def(from._internal_def());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatusInfo::CopyFrom(const StatusInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.StatusInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusInfo::IsInitialized() const {
  return true;
}

void StatusInfo::InternalSwap(StatusInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatusInfo, _impl_.def_)
      + sizeof(StatusInfo::_impl_.def_)
      - PROTOBUF_FIELD_OFFSET(StatusInfo, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[4]);
}

// ===================================================================

class ClassInfo::_Internal {
 public:
};

ClassInfo::ClassInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.ClassInfo)
}
ClassInfo::ClassInfo(const ClassInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClassInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.player_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_type_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.player_type_));
  // @@protoc_insertion_point(copy_constructor:Protocol.ClassInfo)
}

inline void ClassInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.player_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ClassInfo::~ClassInfo() {
  // @@protoc_insertion_point(destructor:Protocol.ClassInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClassInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClassInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClassInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.ClassInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.player_type_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.player_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClassInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PlayerType player_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_player_type(static_cast<::Protocol::PlayerType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClassInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.ClassInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // .Protocol.PlayerType player_type = 2;
  if (this->_internal_player_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_player_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.ClassInfo)
  return target;
}

size_t ClassInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.ClassInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // .Protocol.PlayerType player_type = 2;
  if (this->_internal_player_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_player_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClassInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClassInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClassInfo::GetClassData() const { return &_class_data_; }


void ClassInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClassInfo*>(&to_msg);
  auto& from = static_cast<const ClassInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.ClassInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_player_type() != 0) {
    _this->_internal_set_player_type(from._internal_player_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClassInfo::CopyFrom(const ClassInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.ClassInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassInfo::IsInitialized() const {
  return true;
}

void ClassInfo::InternalSwap(ClassInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClassInfo, _impl_.player_type_)
      + sizeof(ClassInfo::_impl_.player_type_)
      - PROTOBUF_FIELD_OFFSET(ClassInfo, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClassInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[5]);
}

// ===================================================================

class ObjectInfo::_Internal {
 public:
  static const ::Protocol::ClassInfo& player_type(const ObjectInfo* msg);
  static const ::Protocol::PosInfo& pos_info(const ObjectInfo* msg);
  static const ::Protocol::StatusInfo& status_info(const ObjectInfo* msg);
  static const ::Protocol::AbilityInputInfo& input_info(const ObjectInfo* msg);
  static const ::Protocol::LevelPointInfo& level_info(const ObjectInfo* msg);
};

const ::Protocol::ClassInfo&
ObjectInfo::_Internal::player_type(const ObjectInfo* msg) {
  return *msg->_impl_.player_type_;
}
const ::Protocol::PosInfo&
ObjectInfo::_Internal::pos_info(const ObjectInfo* msg) {
  return *msg->_impl_.pos_info_;
}
const ::Protocol::StatusInfo&
ObjectInfo::_Internal::status_info(const ObjectInfo* msg) {
  return *msg->_impl_.status_info_;
}
const ::Protocol::AbilityInputInfo&
ObjectInfo::_Internal::input_info(const ObjectInfo* msg) {
  return *msg->_impl_.input_info_;
}
const ::Protocol::LevelPointInfo&
ObjectInfo::_Internal::level_info(const ObjectInfo* msg) {
  return *msg->_impl_.level_info_;
}
ObjectInfo::ObjectInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.ObjectInfo)
}
ObjectInfo::ObjectInfo(const ObjectInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ObjectInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_type_){nullptr}
    , decltype(_impl_.pos_info_){nullptr}
    , decltype(_impl_.status_info_){nullptr}
    , decltype(_impl_.input_info_){nullptr}
    , decltype(_impl_.level_info_){nullptr}
    , decltype(_impl_.object_id_){}
    , decltype(_impl_.object_type_){}
    , decltype(_impl_.creature_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_type()) {
    _this->_impl_.player_type_ = new ::Protocol::ClassInfo(*from._impl_.player_type_);
  }
  if (from._internal_has_pos_info()) {
    _this->_impl_.pos_info_ = new ::Protocol::PosInfo(*from._impl_.pos_info_);
  }
  if (from._internal_has_status_info()) {
    _this->_impl_.status_info_ = new ::Protocol::StatusInfo(*from._impl_.status_info_);
  }
  if (from._internal_has_input_info()) {
    _this->_impl_.input_info_ = new ::Protocol::AbilityInputInfo(*from._impl_.input_info_);
  }
  if (from._internal_has_level_info()) {
    _this->_impl_.level_info_ = new ::Protocol::LevelPointInfo(*from._impl_.level_info_);
  }
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.creature_type_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.creature_type_));
  // @@protoc_insertion_point(copy_constructor:Protocol.ObjectInfo)
}

inline void ObjectInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_type_){nullptr}
    , decltype(_impl_.pos_info_){nullptr}
    , decltype(_impl_.status_info_){nullptr}
    , decltype(_impl_.input_info_){nullptr}
    , decltype(_impl_.level_info_){nullptr}
    , decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.object_type_){0}
    , decltype(_impl_.creature_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ObjectInfo::~ObjectInfo() {
  // @@protoc_insertion_point(destructor:Protocol.ObjectInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObjectInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_type_;
  if (this != internal_default_instance()) delete _impl_.pos_info_;
  if (this != internal_default_instance()) delete _impl_.status_info_;
  if (this != internal_default_instance()) delete _impl_.input_info_;
  if (this != internal_default_instance()) delete _impl_.level_info_;
}

void ObjectInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObjectInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.ObjectInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_type_ != nullptr) {
    delete _impl_.player_type_;
  }
  _impl_.player_type_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pos_info_ != nullptr) {
    delete _impl_.pos_info_;
  }
  _impl_.pos_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.status_info_ != nullptr) {
    delete _impl_.status_info_;
  }
  _impl_.status_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.input_info_ != nullptr) {
    delete _impl_.input_info_;
  }
  _impl_.input_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.level_info_ != nullptr) {
    delete _impl_.level_info_;
  }
  _impl_.level_info_ = nullptr;
  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.creature_type_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.creature_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.ObjectType object_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_object_type(static_cast<::Protocol::ObjectType>(val));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.ClassInfo player_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.CreatureType creature_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_creature_type(static_cast<::Protocol::CreatureType>(val));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PosInfo pos_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.StatusInfo status_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_status_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.AbilityInputInfo input_info = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_input_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.LevelPointInfo level_info = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_level_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjectInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.ObjectInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // .Protocol.ObjectType object_type = 2;
  if (this->_internal_object_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_object_type(), target);
  }

  // .Protocol.ClassInfo player_type = 3;
  if (this->_internal_has_player_type()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::player_type(this),
        _Internal::player_type(this).GetCachedSize(), target, stream);
  }

  // .Protocol.CreatureType creature_type = 4;
  if (this->_internal_creature_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_creature_type(), target);
  }

  // .Protocol.PosInfo pos_info = 5;
  if (this->_internal_has_pos_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::pos_info(this),
        _Internal::pos_info(this).GetCachedSize(), target, stream);
  }

  // .Protocol.StatusInfo status_info = 6;
  if (this->_internal_has_status_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::status_info(this),
        _Internal::status_info(this).GetCachedSize(), target, stream);
  }

  // .Protocol.AbilityInputInfo input_info = 7;
  if (this->_internal_has_input_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::input_info(this),
        _Internal::input_info(this).GetCachedSize(), target, stream);
  }

  // .Protocol.LevelPointInfo level_info = 8;
  if (this->_internal_has_level_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::level_info(this),
        _Internal::level_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.ObjectInfo)
  return target;
}

size_t ObjectInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.ObjectInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.ClassInfo player_type = 3;
  if (this->_internal_has_player_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_type_);
  }

  // .Protocol.PosInfo pos_info = 5;
  if (this->_internal_has_pos_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pos_info_);
  }

  // .Protocol.StatusInfo status_info = 6;
  if (this->_internal_has_status_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_info_);
  }

  // .Protocol.AbilityInputInfo input_info = 7;
  if (this->_internal_has_input_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.input_info_);
  }

  // .Protocol.LevelPointInfo level_info = 8;
  if (this->_internal_has_level_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.level_info_);
  }

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // .Protocol.ObjectType object_type = 2;
  if (this->_internal_object_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_object_type());
  }

  // .Protocol.CreatureType creature_type = 4;
  if (this->_internal_creature_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_creature_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObjectInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectInfo::GetClassData() const { return &_class_data_; }


void ObjectInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObjectInfo*>(&to_msg);
  auto& from = static_cast<const ObjectInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.ObjectInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player_type()) {
    _this->_internal_mutable_player_type()->::Protocol::ClassInfo::MergeFrom(
        from._internal_player_type());
  }
  if (from._internal_has_pos_info()) {
    _this->_internal_mutable_pos_info()->::Protocol::PosInfo::MergeFrom(
        from._internal_pos_info());
  }
  if (from._internal_has_status_info()) {
    _this->_internal_mutable_status_info()->::Protocol::StatusInfo::MergeFrom(
        from._internal_status_info());
  }
  if (from._internal_has_input_info()) {
    _this->_internal_mutable_input_info()->::Protocol::AbilityInputInfo::MergeFrom(
        from._internal_input_info());
  }
  if (from._internal_has_level_info()) {
    _this->_internal_mutable_level_info()->::Protocol::LevelPointInfo::MergeFrom(
        from._internal_level_info());
  }
  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_object_type() != 0) {
    _this->_internal_set_object_type(from._internal_object_type());
  }
  if (from._internal_creature_type() != 0) {
    _this->_internal_set_creature_type(from._internal_creature_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectInfo::CopyFrom(const ObjectInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.ObjectInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectInfo::IsInitialized() const {
  return true;
}

void ObjectInfo::InternalSwap(ObjectInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectInfo, _impl_.creature_type_)
      + sizeof(ObjectInfo::_impl_.creature_type_)
      - PROTOBUF_FIELD_OFFSET(ObjectInfo, _impl_.player_type_)>(
          reinterpret_cast<char*>(&_impl_.player_type_),
          reinterpret_cast<char*>(&other->_impl_.player_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[6]);
}

// ===================================================================

class CreatureInfo::_Internal {
 public:
  static const ::Protocol::PosInfo& pos_info(const CreatureInfo* msg);
  static const ::Protocol::StatusInfo& status_info(const CreatureInfo* msg);
};

const ::Protocol::PosInfo&
CreatureInfo::_Internal::pos_info(const CreatureInfo* msg) {
  return *msg->_impl_.pos_info_;
}
const ::Protocol::StatusInfo&
CreatureInfo::_Internal::status_info(const CreatureInfo* msg) {
  return *msg->_impl_.status_info_;
}
CreatureInfo::CreatureInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.CreatureInfo)
}
CreatureInfo::CreatureInfo(const CreatureInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreatureInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_info_){nullptr}
    , decltype(_impl_.status_info_){nullptr}
    , decltype(_impl_.object_id_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.creature_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos_info()) {
    _this->_impl_.pos_info_ = new ::Protocol::PosInfo(*from._impl_.pos_info_);
  }
  if (from._internal_has_status_info()) {
    _this->_impl_.status_info_ = new ::Protocol::StatusInfo(*from._impl_.status_info_);
  }
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.creature_type_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.creature_type_));
  // @@protoc_insertion_point(copy_constructor:Protocol.CreatureInfo)
}

inline void CreatureInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_info_){nullptr}
    , decltype(_impl_.status_info_){nullptr}
    , decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.level_){0u}
    , decltype(_impl_.creature_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CreatureInfo::~CreatureInfo() {
  // @@protoc_insertion_point(destructor:Protocol.CreatureInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreatureInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pos_info_;
  if (this != internal_default_instance()) delete _impl_.status_info_;
}

void CreatureInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreatureInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.CreatureInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.pos_info_ != nullptr) {
    delete _impl_.pos_info_;
  }
  _impl_.pos_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.status_info_ != nullptr) {
    delete _impl_.status_info_;
  }
  _impl_.status_info_ = nullptr;
  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.creature_type_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.creature_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreatureInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PosInfo pos_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.StatusInfo status_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_status_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.CreatureType creature_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_creature_type(static_cast<::Protocol::CreatureType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreatureInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.CreatureInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // uint32 level = 2;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_level(), target);
  }

  // .Protocol.PosInfo pos_info = 3;
  if (this->_internal_has_pos_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pos_info(this),
        _Internal::pos_info(this).GetCachedSize(), target, stream);
  }

  // .Protocol.StatusInfo status_info = 4;
  if (this->_internal_has_status_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::status_info(this),
        _Internal::status_info(this).GetCachedSize(), target, stream);
  }

  // .Protocol.CreatureType creature_type = 5;
  if (this->_internal_creature_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_creature_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.CreatureInfo)
  return target;
}

size_t CreatureInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.CreatureInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.PosInfo pos_info = 3;
  if (this->_internal_has_pos_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pos_info_);
  }

  // .Protocol.StatusInfo status_info = 4;
  if (this->_internal_has_status_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_info_);
  }

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // uint32 level = 2;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  // .Protocol.CreatureType creature_type = 5;
  if (this->_internal_creature_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_creature_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreatureInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreatureInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreatureInfo::GetClassData() const { return &_class_data_; }


void CreatureInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreatureInfo*>(&to_msg);
  auto& from = static_cast<const CreatureInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.CreatureInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pos_info()) {
    _this->_internal_mutable_pos_info()->::Protocol::PosInfo::MergeFrom(
        from._internal_pos_info());
  }
  if (from._internal_has_status_info()) {
    _this->_internal_mutable_status_info()->::Protocol::StatusInfo::MergeFrom(
        from._internal_status_info());
  }
  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_creature_type() != 0) {
    _this->_internal_set_creature_type(from._internal_creature_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreatureInfo::CopyFrom(const CreatureInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.CreatureInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatureInfo::IsInitialized() const {
  return true;
}

void CreatureInfo::InternalSwap(CreatureInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreatureInfo, _impl_.creature_type_)
      + sizeof(CreatureInfo::_impl_.creature_type_)
      - PROTOBUF_FIELD_OFFSET(CreatureInfo, _impl_.pos_info_)>(
          reinterpret_cast<char*>(&_impl_.pos_info_),
          reinterpret_cast<char*>(&other->_impl_.pos_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreatureInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[7]);
}

// ===================================================================

class PlayerInfo::_Internal {
 public:
  static const ::Protocol::ClassInfo& player_type(const PlayerInfo* msg);
  static const ::Protocol::PosInfo& pos_info(const PlayerInfo* msg);
  static const ::Protocol::StatusInfo& status_info(const PlayerInfo* msg);
  static const ::Protocol::LevelPointInfo& level_info(const PlayerInfo* msg);
  static const ::Protocol::AbilityInputInfo& input_info(const PlayerInfo* msg);
  static const ::Protocol::InventoryList& inventory_list(const PlayerInfo* msg);
  static const ::Protocol::EquipmentList& equipment_list(const PlayerInfo* msg);
  static const ::Protocol::EquipStateInfo& equip_state(const PlayerInfo* msg);
};

const ::Protocol::ClassInfo&
PlayerInfo::_Internal::player_type(const PlayerInfo* msg) {
  return *msg->_impl_.player_type_;
}
const ::Protocol::PosInfo&
PlayerInfo::_Internal::pos_info(const PlayerInfo* msg) {
  return *msg->_impl_.pos_info_;
}
const ::Protocol::StatusInfo&
PlayerInfo::_Internal::status_info(const PlayerInfo* msg) {
  return *msg->_impl_.status_info_;
}
const ::Protocol::LevelPointInfo&
PlayerInfo::_Internal::level_info(const PlayerInfo* msg) {
  return *msg->_impl_.level_info_;
}
const ::Protocol::AbilityInputInfo&
PlayerInfo::_Internal::input_info(const PlayerInfo* msg) {
  return *msg->_impl_.input_info_;
}
const ::Protocol::InventoryList&
PlayerInfo::_Internal::inventory_list(const PlayerInfo* msg) {
  return *msg->_impl_.inventory_list_;
}
const ::Protocol::EquipmentList&
PlayerInfo::_Internal::equipment_list(const PlayerInfo* msg) {
  return *msg->_impl_.equipment_list_;
}
const ::Protocol::EquipStateInfo&
PlayerInfo::_Internal::equip_state(const PlayerInfo* msg) {
  return *msg->_impl_.equip_state_;
}
PlayerInfo::PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.PlayerInfo)
}
PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){}
    , decltype(_impl_.player_name_){}
    , decltype(_impl_.player_type_){nullptr}
    , decltype(_impl_.pos_info_){nullptr}
    , decltype(_impl_.status_info_){nullptr}
    , decltype(_impl_.level_info_){nullptr}
    , decltype(_impl_.input_info_){nullptr}
    , decltype(_impl_.inventory_list_){nullptr}
    , decltype(_impl_.equipment_list_){nullptr}
    , decltype(_impl_.equip_state_){nullptr}
    , decltype(_impl_.object_id_){}
    , decltype(_impl_.gold_){}
    , decltype(_impl_.level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.player_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_player_id().empty()) {
    _this->_impl_.player_id_.Set(from._internal_player_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.player_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_player_name().empty()) {
    _this->_impl_.player_name_.Set(from._internal_player_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_player_type()) {
    _this->_impl_.player_type_ = new ::Protocol::ClassInfo(*from._impl_.player_type_);
  }
  if (from._internal_has_pos_info()) {
    _this->_impl_.pos_info_ = new ::Protocol::PosInfo(*from._impl_.pos_info_);
  }
  if (from._internal_has_status_info()) {
    _this->_impl_.status_info_ = new ::Protocol::StatusInfo(*from._impl_.status_info_);
  }
  if (from._internal_has_level_info()) {
    _this->_impl_.level_info_ = new ::Protocol::LevelPointInfo(*from._impl_.level_info_);
  }
  if (from._internal_has_input_info()) {
    _this->_impl_.input_info_ = new ::Protocol::AbilityInputInfo(*from._impl_.input_info_);
  }
  if (from._internal_has_inventory_list()) {
    _this->_impl_.inventory_list_ = new ::Protocol::InventoryList(*from._impl_.inventory_list_);
  }
  if (from._internal_has_equipment_list()) {
    _this->_impl_.equipment_list_ = new ::Protocol::EquipmentList(*from._impl_.equipment_list_);
  }
  if (from._internal_has_equip_state()) {
    _this->_impl_.equip_state_ = new ::Protocol::EquipStateInfo(*from._impl_.equip_state_);
  }
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.level_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.level_));
  // @@protoc_insertion_point(copy_constructor:Protocol.PlayerInfo)
}

inline void PlayerInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){}
    , decltype(_impl_.player_name_){}
    , decltype(_impl_.player_type_){nullptr}
    , decltype(_impl_.pos_info_){nullptr}
    , decltype(_impl_.status_info_){nullptr}
    , decltype(_impl_.level_info_){nullptr}
    , decltype(_impl_.input_info_){nullptr}
    , decltype(_impl_.inventory_list_){nullptr}
    , decltype(_impl_.equipment_list_){nullptr}
    , decltype(_impl_.equip_state_){nullptr}
    , decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.gold_){uint64_t{0u}}
    , decltype(_impl_.level_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.player_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.player_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlayerInfo::~PlayerInfo() {
  // @@protoc_insertion_point(destructor:Protocol.PlayerInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_id_.Destroy();
  _impl_.player_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.player_type_;
  if (this != internal_default_instance()) delete _impl_.pos_info_;
  if (this != internal_default_instance()) delete _impl_.status_info_;
  if (this != internal_default_instance()) delete _impl_.level_info_;
  if (this != internal_default_instance()) delete _impl_.input_info_;
  if (this != internal_default_instance()) delete _impl_.inventory_list_;
  if (this != internal_default_instance()) delete _impl_.equipment_list_;
  if (this != internal_default_instance()) delete _impl_.equip_state_;
}

void PlayerInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.PlayerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_id_.ClearToEmpty();
  _impl_.player_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.player_type_ != nullptr) {
    delete _impl_.player_type_;
  }
  _impl_.player_type_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pos_info_ != nullptr) {
    delete _impl_.pos_info_;
  }
  _impl_.pos_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.status_info_ != nullptr) {
    delete _impl_.status_info_;
  }
  _impl_.status_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.level_info_ != nullptr) {
    delete _impl_.level_info_;
  }
  _impl_.level_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.input_info_ != nullptr) {
    delete _impl_.input_info_;
  }
  _impl_.input_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.inventory_list_ != nullptr) {
    delete _impl_.inventory_list_;
  }
  _impl_.inventory_list_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.equipment_list_ != nullptr) {
    delete _impl_.equipment_list_;
  }
  _impl_.equipment_list_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.equip_state_ != nullptr) {
    delete _impl_.equip_state_;
  }
  _impl_.equip_state_ = nullptr;
  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.level_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.ClassInfo player_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PosInfo pos_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.StatusInfo status_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_status_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.LevelPointInfo level_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_level_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.AbilityInputInfo input_info = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_input_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.InventoryList inventory_list = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_inventory_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.EquipmentList equipment_list = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_equipment_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string player_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_player_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.PlayerInfo.player_id"));
        } else
          goto handle_unusual;
        continue;
      // string player_name = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_player_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.PlayerInfo.player_name"));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.EquipStateInfo equip_state = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_equip_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 gold = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.PlayerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // uint32 level = 2;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_level(), target);
  }

  // .Protocol.ClassInfo player_type = 3;
  if (this->_internal_has_player_type()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::player_type(this),
        _Internal::player_type(this).GetCachedSize(), target, stream);
  }

  // .Protocol.PosInfo pos_info = 4;
  if (this->_internal_has_pos_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::pos_info(this),
        _Internal::pos_info(this).GetCachedSize(), target, stream);
  }

  // .Protocol.StatusInfo status_info = 5;
  if (this->_internal_has_status_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::status_info(this),
        _Internal::status_info(this).GetCachedSize(), target, stream);
  }

  // .Protocol.LevelPointInfo level_info = 6;
  if (this->_internal_has_level_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::level_info(this),
        _Internal::level_info(this).GetCachedSize(), target, stream);
  }

  // .Protocol.AbilityInputInfo input_info = 7;
  if (this->_internal_has_input_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::input_info(this),
        _Internal::input_info(this).GetCachedSize(), target, stream);
  }

  // .Protocol.InventoryList inventory_list = 8;
  if (this->_internal_has_inventory_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::inventory_list(this),
        _Internal::inventory_list(this).GetCachedSize(), target, stream);
  }

  // .Protocol.EquipmentList equipment_list = 9;
  if (this->_internal_has_equipment_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::equipment_list(this),
        _Internal::equipment_list(this).GetCachedSize(), target, stream);
  }

  // string player_id = 10;
  if (!this->_internal_player_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_player_id().data(), static_cast<int>(this->_internal_player_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.PlayerInfo.player_id");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_player_id(), target);
  }

  // string player_name = 11;
  if (!this->_internal_player_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_player_name().data(), static_cast<int>(this->_internal_player_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.PlayerInfo.player_name");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_player_name(), target);
  }

  // .Protocol.EquipStateInfo equip_state = 12;
  if (this->_internal_has_equip_state()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::equip_state(this),
        _Internal::equip_state(this).GetCachedSize(), target, stream);
  }

  // uint64 gold = 13;
  if (this->_internal_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(13, this->_internal_gold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.PlayerInfo)
  return target;
}

size_t PlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.PlayerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string player_id = 10;
  if (!this->_internal_player_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_player_id());
  }

  // string player_name = 11;
  if (!this->_internal_player_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_player_name());
  }

  // .Protocol.ClassInfo player_type = 3;
  if (this->_internal_has_player_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_type_);
  }

  // .Protocol.PosInfo pos_info = 4;
  if (this->_internal_has_pos_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pos_info_);
  }

  // .Protocol.StatusInfo status_info = 5;
  if (this->_internal_has_status_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_info_);
  }

  // .Protocol.LevelPointInfo level_info = 6;
  if (this->_internal_has_level_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.level_info_);
  }

  // .Protocol.AbilityInputInfo input_info = 7;
  if (this->_internal_has_input_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.input_info_);
  }

  // .Protocol.InventoryList inventory_list = 8;
  if (this->_internal_has_inventory_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.inventory_list_);
  }

  // .Protocol.EquipmentList equipment_list = 9;
  if (this->_internal_has_equipment_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.equipment_list_);
  }

  // .Protocol.EquipStateInfo equip_state = 12;
  if (this->_internal_has_equip_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.equip_state_);
  }

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // uint64 gold = 13;
  if (this->_internal_gold() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gold());
  }

  // uint32 level = 2;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerInfo::GetClassData() const { return &_class_data_; }


void PlayerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerInfo*>(&to_msg);
  auto& from = static_cast<const PlayerInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.PlayerInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_player_id().empty()) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (!from._internal_player_name().empty()) {
    _this->_internal_set_player_name(from._internal_player_name());
  }
  if (from._internal_has_player_type()) {
    _this->_internal_mutable_player_type()->::Protocol::ClassInfo::MergeFrom(
        from._internal_player_type());
  }
  if (from._internal_has_pos_info()) {
    _this->_internal_mutable_pos_info()->::Protocol::PosInfo::MergeFrom(
        from._internal_pos_info());
  }
  if (from._internal_has_status_info()) {
    _this->_internal_mutable_status_info()->::Protocol::StatusInfo::MergeFrom(
        from._internal_status_info());
  }
  if (from._internal_has_level_info()) {
    _this->_internal_mutable_level_info()->::Protocol::LevelPointInfo::MergeFrom(
        from._internal_level_info());
  }
  if (from._internal_has_input_info()) {
    _this->_internal_mutable_input_info()->::Protocol::AbilityInputInfo::MergeFrom(
        from._internal_input_info());
  }
  if (from._internal_has_inventory_list()) {
    _this->_internal_mutable_inventory_list()->::Protocol::InventoryList::MergeFrom(
        from._internal_inventory_list());
  }
  if (from._internal_has_equipment_list()) {
    _this->_internal_mutable_equipment_list()->::Protocol::EquipmentList::MergeFrom(
        from._internal_equipment_list());
  }
  if (from._internal_has_equip_state()) {
    _this->_internal_mutable_equip_state()->::Protocol::EquipStateInfo::MergeFrom(
        from._internal_equip_state());
  }
  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_gold() != 0) {
    _this->_internal_set_gold(from._internal_gold());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {
  return true;
}

void PlayerInfo::InternalSwap(PlayerInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.player_id_, lhs_arena,
      &other->_impl_.player_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.player_name_, lhs_arena,
      &other->_impl_.player_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerInfo, _impl_.level_)
      + sizeof(PlayerInfo::_impl_.level_)
      - PROTOBUF_FIELD_OFFSET(PlayerInfo, _impl_.player_type_)>(
          reinterpret_cast<char*>(&_impl_.player_type_),
          reinterpret_cast<char*>(&other->_impl_.player_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[8]);
}

// ===================================================================

class MonsterInfo::_Internal {
 public:
  static const ::Protocol::PosInfo& pos_info(const MonsterInfo* msg);
  static const ::Protocol::StatusInfo& status_info(const MonsterInfo* msg);
  static const ::Protocol::AbilityInputInfo& input_info(const MonsterInfo* msg);
};

const ::Protocol::PosInfo&
MonsterInfo::_Internal::pos_info(const MonsterInfo* msg) {
  return *msg->_impl_.pos_info_;
}
const ::Protocol::StatusInfo&
MonsterInfo::_Internal::status_info(const MonsterInfo* msg) {
  return *msg->_impl_.status_info_;
}
const ::Protocol::AbilityInputInfo&
MonsterInfo::_Internal::input_info(const MonsterInfo* msg) {
  return *msg->_impl_.input_info_;
}
MonsterInfo::MonsterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.MonsterInfo)
}
MonsterInfo::MonsterInfo(const MonsterInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MonsterInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_info_){nullptr}
    , decltype(_impl_.status_info_){nullptr}
    , decltype(_impl_.input_info_){nullptr}
    , decltype(_impl_.object_id_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos_info()) {
    _this->_impl_.pos_info_ = new ::Protocol::PosInfo(*from._impl_.pos_info_);
  }
  if (from._internal_has_status_info()) {
    _this->_impl_.status_info_ = new ::Protocol::StatusInfo(*from._impl_.status_info_);
  }
  if (from._internal_has_input_info()) {
    _this->_impl_.input_info_ = new ::Protocol::AbilityInputInfo(*from._impl_.input_info_);
  }
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:Protocol.MonsterInfo)
}

inline void MonsterInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_info_){nullptr}
    , decltype(_impl_.status_info_){nullptr}
    , decltype(_impl_.input_info_){nullptr}
    , decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.level_){0u}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MonsterInfo::~MonsterInfo() {
  // @@protoc_insertion_point(destructor:Protocol.MonsterInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MonsterInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pos_info_;
  if (this != internal_default_instance()) delete _impl_.status_info_;
  if (this != internal_default_instance()) delete _impl_.input_info_;
}

void MonsterInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MonsterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.MonsterInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.pos_info_ != nullptr) {
    delete _impl_.pos_info_;
  }
  _impl_.pos_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.status_info_ != nullptr) {
    delete _impl_.status_info_;
  }
  _impl_.status_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.input_info_ != nullptr) {
    delete _impl_.input_info_;
  }
  _impl_.input_info_ = nullptr;
  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MonsterInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PosInfo pos_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.StatusInfo status_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_status_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.AbilityInputInfo input_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_input_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.MonsterType type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::Protocol::MonsterType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MonsterInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.MonsterInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // uint32 level = 2;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_level(), target);
  }

  // .Protocol.PosInfo pos_info = 4;
  if (this->_internal_has_pos_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::pos_info(this),
        _Internal::pos_info(this).GetCachedSize(), target, stream);
  }

  // .Protocol.StatusInfo status_info = 5;
  if (this->_internal_has_status_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::status_info(this),
        _Internal::status_info(this).GetCachedSize(), target, stream);
  }

  // .Protocol.AbilityInputInfo input_info = 6;
  if (this->_internal_has_input_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::input_info(this),
        _Internal::input_info(this).GetCachedSize(), target, stream);
  }

  // .Protocol.MonsterType type = 7;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.MonsterInfo)
  return target;
}

size_t MonsterInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.MonsterInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.PosInfo pos_info = 4;
  if (this->_internal_has_pos_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pos_info_);
  }

  // .Protocol.StatusInfo status_info = 5;
  if (this->_internal_has_status_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_info_);
  }

  // .Protocol.AbilityInputInfo input_info = 6;
  if (this->_internal_has_input_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.input_info_);
  }

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // uint32 level = 2;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  // .Protocol.MonsterType type = 7;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MonsterInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MonsterInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MonsterInfo::GetClassData() const { return &_class_data_; }


void MonsterInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MonsterInfo*>(&to_msg);
  auto& from = static_cast<const MonsterInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.MonsterInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pos_info()) {
    _this->_internal_mutable_pos_info()->::Protocol::PosInfo::MergeFrom(
        from._internal_pos_info());
  }
  if (from._internal_has_status_info()) {
    _this->_internal_mutable_status_info()->::Protocol::StatusInfo::MergeFrom(
        from._internal_status_info());
  }
  if (from._internal_has_input_info()) {
    _this->_internal_mutable_input_info()->::Protocol::AbilityInputInfo::MergeFrom(
        from._internal_input_info());
  }
  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MonsterInfo::CopyFrom(const MonsterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.MonsterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonsterInfo::IsInitialized() const {
  return true;
}

void MonsterInfo::InternalSwap(MonsterInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MonsterInfo, _impl_.type_)
      + sizeof(MonsterInfo::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(MonsterInfo, _impl_.pos_info_)>(
          reinterpret_cast<char*>(&_impl_.pos_info_),
          reinterpret_cast<char*>(&other->_impl_.pos_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MonsterInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[9]);
}

// ===================================================================

class AbilityInputInfo::_Internal {
 public:
};

AbilityInputInfo::AbilityInputInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.AbilityInputInfo)
}
AbilityInputInfo::AbilityInputInfo(const AbilityInputInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AbilityInputInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tag_){}
    , decltype(_impl_.object_id_){}
    , decltype(_impl_.input_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tag().empty()) {
    _this->_impl_.tag_.Set(from._internal_tag(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.input_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.input_));
  // @@protoc_insertion_point(copy_constructor:Protocol.AbilityInputInfo)
}

inline void AbilityInputInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tag_){}
    , decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.input_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AbilityInputInfo::~AbilityInputInfo() {
  // @@protoc_insertion_point(destructor:Protocol.AbilityInputInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AbilityInputInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tag_.Destroy();
}

void AbilityInputInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AbilityInputInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.AbilityInputInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tag_.ClearToEmpty();
  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.input_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.input_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AbilityInputInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.AbilityInputInfo.tag"));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.InputState input = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_input(static_cast<::Protocol::InputState>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AbilityInputInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.AbilityInputInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // string tag = 2;
  if (!this->_internal_tag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.AbilityInputInfo.tag");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tag(), target);
  }

  // .Protocol.InputState input = 3;
  if (this->_internal_input() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_input(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.AbilityInputInfo)
  return target;
}

size_t AbilityInputInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.AbilityInputInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tag = 2;
  if (!this->_internal_tag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // .Protocol.InputState input = 3;
  if (this->_internal_input() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_input());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AbilityInputInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AbilityInputInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AbilityInputInfo::GetClassData() const { return &_class_data_; }


void AbilityInputInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AbilityInputInfo*>(&to_msg);
  auto& from = static_cast<const AbilityInputInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.AbilityInputInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tag().empty()) {
    _this->_internal_set_tag(from._internal_tag());
  }
  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_input() != 0) {
    _this->_internal_set_input(from._internal_input());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AbilityInputInfo::CopyFrom(const AbilityInputInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.AbilityInputInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbilityInputInfo::IsInitialized() const {
  return true;
}

void AbilityInputInfo::InternalSwap(AbilityInputInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tag_, lhs_arena,
      &other->_impl_.tag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AbilityInputInfo, _impl_.input_)
      + sizeof(AbilityInputInfo::_impl_.input_)
      - PROTOBUF_FIELD_OFFSET(AbilityInputInfo, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AbilityInputInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[10]);
}

// ===================================================================

class EquipStateInfo::_Internal {
 public:
};

EquipStateInfo::EquipStateInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.EquipStateInfo)
}
EquipStateInfo::EquipStateInfo(const EquipStateInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EquipStateInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.equip_state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.equip_state_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.equip_state_));
  // @@protoc_insertion_point(copy_constructor:Protocol.EquipStateInfo)
}

inline void EquipStateInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.equip_state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EquipStateInfo::~EquipStateInfo() {
  // @@protoc_insertion_point(destructor:Protocol.EquipStateInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EquipStateInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EquipStateInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EquipStateInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.EquipStateInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.equip_state_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.equip_state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EquipStateInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.EquipState equip_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_equip_state(static_cast<::Protocol::EquipState>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EquipStateInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.EquipStateInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // .Protocol.EquipState equip_state = 2;
  if (this->_internal_equip_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_equip_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.EquipStateInfo)
  return target;
}

size_t EquipStateInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.EquipStateInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // .Protocol.EquipState equip_state = 2;
  if (this->_internal_equip_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_equip_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EquipStateInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EquipStateInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EquipStateInfo::GetClassData() const { return &_class_data_; }


void EquipStateInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EquipStateInfo*>(&to_msg);
  auto& from = static_cast<const EquipStateInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.EquipStateInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_equip_state() != 0) {
    _this->_internal_set_equip_state(from._internal_equip_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EquipStateInfo::CopyFrom(const EquipStateInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.EquipStateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipStateInfo::IsInitialized() const {
  return true;
}

void EquipStateInfo::InternalSwap(EquipStateInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EquipStateInfo, _impl_.equip_state_)
      + sizeof(EquipStateInfo::_impl_.equip_state_)
      - PROTOBUF_FIELD_OFFSET(EquipStateInfo, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EquipStateInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[11]);
}

// ===================================================================

class AIInfo::_Internal {
 public:
};

AIInfo::AIInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.AIInfo)
}
AIInfo::AIInfo(const AIInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AIInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.targetid_id_){}
    , decltype(_impl_.can_attack_){}
    , decltype(_impl_.patrol_x_){}
    , decltype(_impl_.patrol_y_){}
    , decltype(_impl_.patrol_z_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.patrol_z_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.patrol_z_));
  // @@protoc_insertion_point(copy_constructor:Protocol.AIInfo)
}

inline void AIInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.targetid_id_){uint64_t{0u}}
    , decltype(_impl_.can_attack_){false}
    , decltype(_impl_.patrol_x_){0}
    , decltype(_impl_.patrol_y_){0}
    , decltype(_impl_.patrol_z_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AIInfo::~AIInfo() {
  // @@protoc_insertion_point(destructor:Protocol.AIInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AIInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AIInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AIInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.AIInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.patrol_z_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.patrol_z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AIInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 targetId_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.targetid_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool can_attack = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.can_attack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float Patrol_x = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.patrol_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float Patrol_y = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.patrol_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float Patrol_z = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.patrol_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AIInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.AIInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // uint64 targetId_id = 2;
  if (this->_internal_targetid_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_targetid_id(), target);
  }

  // bool can_attack = 3;
  if (this->_internal_can_attack() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_can_attack(), target);
  }

  // float Patrol_x = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_patrol_x = this->_internal_patrol_x();
  uint32_t raw_patrol_x;
  memcpy(&raw_patrol_x, &tmp_patrol_x, sizeof(tmp_patrol_x));
  if (raw_patrol_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_patrol_x(), target);
  }

  // float Patrol_y = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_patrol_y = this->_internal_patrol_y();
  uint32_t raw_patrol_y;
  memcpy(&raw_patrol_y, &tmp_patrol_y, sizeof(tmp_patrol_y));
  if (raw_patrol_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_patrol_y(), target);
  }

  // float Patrol_z = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_patrol_z = this->_internal_patrol_z();
  uint32_t raw_patrol_z;
  memcpy(&raw_patrol_z, &tmp_patrol_z, sizeof(tmp_patrol_z));
  if (raw_patrol_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_patrol_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.AIInfo)
  return target;
}

size_t AIInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.AIInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // uint64 targetId_id = 2;
  if (this->_internal_targetid_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_targetid_id());
  }

  // bool can_attack = 3;
  if (this->_internal_can_attack() != 0) {
    total_size += 1 + 1;
  }

  // float Patrol_x = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_patrol_x = this->_internal_patrol_x();
  uint32_t raw_patrol_x;
  memcpy(&raw_patrol_x, &tmp_patrol_x, sizeof(tmp_patrol_x));
  if (raw_patrol_x != 0) {
    total_size += 1 + 4;
  }

  // float Patrol_y = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_patrol_y = this->_internal_patrol_y();
  uint32_t raw_patrol_y;
  memcpy(&raw_patrol_y, &tmp_patrol_y, sizeof(tmp_patrol_y));
  if (raw_patrol_y != 0) {
    total_size += 1 + 4;
  }

  // float Patrol_z = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_patrol_z = this->_internal_patrol_z();
  uint32_t raw_patrol_z;
  memcpy(&raw_patrol_z, &tmp_patrol_z, sizeof(tmp_patrol_z));
  if (raw_patrol_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AIInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AIInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AIInfo::GetClassData() const { return &_class_data_; }


void AIInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AIInfo*>(&to_msg);
  auto& from = static_cast<const AIInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.AIInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_targetid_id() != 0) {
    _this->_internal_set_targetid_id(from._internal_targetid_id());
  }
  if (from._internal_can_attack() != 0) {
    _this->_internal_set_can_attack(from._internal_can_attack());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_patrol_x = from._internal_patrol_x();
  uint32_t raw_patrol_x;
  memcpy(&raw_patrol_x, &tmp_patrol_x, sizeof(tmp_patrol_x));
  if (raw_patrol_x != 0) {
    _this->_internal_set_patrol_x(from._internal_patrol_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_patrol_y = from._internal_patrol_y();
  uint32_t raw_patrol_y;
  memcpy(&raw_patrol_y, &tmp_patrol_y, sizeof(tmp_patrol_y));
  if (raw_patrol_y != 0) {
    _this->_internal_set_patrol_y(from._internal_patrol_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_patrol_z = from._internal_patrol_z();
  uint32_t raw_patrol_z;
  memcpy(&raw_patrol_z, &tmp_patrol_z, sizeof(tmp_patrol_z));
  if (raw_patrol_z != 0) {
    _this->_internal_set_patrol_z(from._internal_patrol_z());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AIInfo::CopyFrom(const AIInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.AIInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AIInfo::IsInitialized() const {
  return true;
}

void AIInfo::InternalSwap(AIInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AIInfo, _impl_.patrol_z_)
      + sizeof(AIInfo::_impl_.patrol_z_)
      - PROTOBUF_FIELD_OFFSET(AIInfo, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AIInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[12]);
}

// ===================================================================

class InventoryList::_Internal {
 public:
};

InventoryList::InventoryList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.InventoryList)
}
InventoryList::InventoryList(const InventoryList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InventoryList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.list_){from._impl_.list_}
    , decltype(_impl_.object_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.object_id_ = from._impl_.object_id_;
  // @@protoc_insertion_point(copy_constructor:Protocol.InventoryList)
}

inline void InventoryList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.list_){arena}
    , decltype(_impl_.object_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

InventoryList::~InventoryList() {
  // @@protoc_insertion_point(destructor:Protocol.InventoryList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InventoryList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.list_.~RepeatedPtrField();
}

void InventoryList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InventoryList::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.InventoryList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.list_.Clear();
  _impl_.object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InventoryList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Protocol.ItemInfo list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InventoryList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.InventoryList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // repeated .Protocol.ItemInfo list = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.InventoryList)
  return target;
}

size_t InventoryList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.InventoryList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.ItemInfo list = 2;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->_impl_.list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InventoryList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InventoryList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InventoryList::GetClassData() const { return &_class_data_; }


void InventoryList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InventoryList*>(&to_msg);
  auto& from = static_cast<const InventoryList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.InventoryList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.list_.MergeFrom(from._impl_.list_);
  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InventoryList::CopyFrom(const InventoryList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.InventoryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InventoryList::IsInitialized() const {
  return true;
}

void InventoryList::InternalSwap(InventoryList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.list_.InternalSwap(&other->_impl_.list_);
  swap(_impl_.object_id_, other->_impl_.object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InventoryList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[13]);
}

// ===================================================================

class EquipmentList::_Internal {
 public:
};

EquipmentList::EquipmentList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.EquipmentList)
}
EquipmentList::EquipmentList(const EquipmentList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EquipmentList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.list_){from._impl_.list_}
    , decltype(_impl_.object_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.object_id_ = from._impl_.object_id_;
  // @@protoc_insertion_point(copy_constructor:Protocol.EquipmentList)
}

inline void EquipmentList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.list_){arena}
    , decltype(_impl_.object_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EquipmentList::~EquipmentList() {
  // @@protoc_insertion_point(destructor:Protocol.EquipmentList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EquipmentList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.list_.~RepeatedPtrField();
}

void EquipmentList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EquipmentList::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.EquipmentList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.list_.Clear();
  _impl_.object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EquipmentList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Protocol.ItemInfo list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EquipmentList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.EquipmentList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // repeated .Protocol.ItemInfo list = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.EquipmentList)
  return target;
}

size_t EquipmentList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.EquipmentList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.ItemInfo list = 2;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->_impl_.list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EquipmentList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EquipmentList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EquipmentList::GetClassData() const { return &_class_data_; }


void EquipmentList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EquipmentList*>(&to_msg);
  auto& from = static_cast<const EquipmentList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.EquipmentList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.list_.MergeFrom(from._impl_.list_);
  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EquipmentList::CopyFrom(const EquipmentList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.EquipmentList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentList::IsInitialized() const {
  return true;
}

void EquipmentList::InternalSwap(EquipmentList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.list_.InternalSwap(&other->_impl_.list_);
  swap(_impl_.object_id_, other->_impl_.object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EquipmentList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[14]);
}

// ===================================================================

class ItemInfo::_Internal {
 public:
};

ItemInfo::ItemInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.ItemInfo)
}
ItemInfo::ItemInfo(const ItemInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ItemInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_name_){}
    , decltype(_impl_.item_visual_name_){}
    , decltype(_impl_.object_id_){}
    , decltype(_impl_.item_id_){}
    , decltype(_impl_.gold_){}
    , decltype(_impl_.item_type_){}
    , decltype(_impl_.item_rarity_){}
    , decltype(_impl_.custom_type_){}
    , decltype(_impl_.equip_type_){}
    , decltype(_impl_.item_count_){}
    , decltype(_impl_.atk_){}
    , decltype(_impl_.def_){}
    , decltype(_impl_.delay_){}
    , decltype(_impl_.range_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.item_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.item_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_item_name().empty()) {
    _this->_impl_.item_name_.Set(from._internal_item_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.item_visual_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.item_visual_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_item_visual_name().empty()) {
    _this->_impl_.item_visual_name_.Set(from._internal_item_visual_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.range_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.range_));
  // @@protoc_insertion_point(copy_constructor:Protocol.ItemInfo)
}

inline void ItemInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_name_){}
    , decltype(_impl_.item_visual_name_){}
    , decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.item_id_){uint64_t{0u}}
    , decltype(_impl_.gold_){uint64_t{0u}}
    , decltype(_impl_.item_type_){0}
    , decltype(_impl_.item_rarity_){0}
    , decltype(_impl_.custom_type_){0}
    , decltype(_impl_.equip_type_){0}
    , decltype(_impl_.item_count_){uint64_t{0u}}
    , decltype(_impl_.atk_){0}
    , decltype(_impl_.def_){0}
    , decltype(_impl_.delay_){0}
    , decltype(_impl_.range_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.item_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.item_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.item_visual_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.item_visual_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ItemInfo::~ItemInfo() {
  // @@protoc_insertion_point(destructor:Protocol.ItemInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ItemInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.item_name_.Destroy();
  _impl_.item_visual_name_.Destroy();
}

void ItemInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ItemInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.ItemInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.item_name_.ClearToEmpty();
  _impl_.item_visual_name_.ClearToEmpty();
  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.range_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.range_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ItemInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 gold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.ItemType item_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_item_type(static_cast<::Protocol::ItemType>(val));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.ItemRarity item_rarity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_item_rarity(static_cast<::Protocol::ItemRarity>(val));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.ItemCustomType custom_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_custom_type(static_cast<::Protocol::ItemCustomType>(val));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.EquipType equip_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_equip_type(static_cast<::Protocol::EquipType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 item_count = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.item_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string item_name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_item_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.ItemInfo.item_name"));
        } else
          goto handle_unusual;
        continue;
      // string item_visual_name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_item_visual_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.ItemInfo.item_visual_name"));
        } else
          goto handle_unusual;
        continue;
      // float atk = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _impl_.atk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float def = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _impl_.def_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float delay = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _impl_.delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float range = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _impl_.range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ItemInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.ItemInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // uint64 item_id = 2;
  if (this->_internal_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_item_id(), target);
  }

  // uint64 gold = 3;
  if (this->_internal_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_gold(), target);
  }

  // .Protocol.ItemType item_type = 4;
  if (this->_internal_item_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_item_type(), target);
  }

  // .Protocol.ItemRarity item_rarity = 5;
  if (this->_internal_item_rarity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_item_rarity(), target);
  }

  // .Protocol.ItemCustomType custom_type = 6;
  if (this->_internal_custom_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_custom_type(), target);
  }

  // .Protocol.EquipType equip_type = 7;
  if (this->_internal_equip_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_equip_type(), target);
  }

  // uint64 item_count = 8;
  if (this->_internal_item_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_item_count(), target);
  }

  // string item_name = 9;
  if (!this->_internal_item_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_item_name().data(), static_cast<int>(this->_internal_item_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.ItemInfo.item_name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_item_name(), target);
  }

  // string item_visual_name = 10;
  if (!this->_internal_item_visual_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_item_visual_name().data(), static_cast<int>(this->_internal_item_visual_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.ItemInfo.item_visual_name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_item_visual_name(), target);
  }

  // float atk = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_atk = this->_internal_atk();
  uint32_t raw_atk;
  memcpy(&raw_atk, &tmp_atk, sizeof(tmp_atk));
  if (raw_atk != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_atk(), target);
  }

  // float def = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_def = this->_internal_def();
  uint32_t raw_def;
  memcpy(&raw_def, &tmp_def, sizeof(tmp_def));
  if (raw_def != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_def(), target);
  }

  // float delay = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_delay = this->_internal_delay();
  uint32_t raw_delay;
  memcpy(&raw_delay, &tmp_delay, sizeof(tmp_delay));
  if (raw_delay != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_delay(), target);
  }

  // float range = 14;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_range = this->_internal_range();
  uint32_t raw_range;
  memcpy(&raw_range, &tmp_range, sizeof(tmp_range));
  if (raw_range != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(14, this->_internal_range(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.ItemInfo)
  return target;
}

size_t ItemInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.ItemInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string item_name = 9;
  if (!this->_internal_item_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_item_name());
  }

  // string item_visual_name = 10;
  if (!this->_internal_item_visual_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_item_visual_name());
  }

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // uint64 item_id = 2;
  if (this->_internal_item_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_item_id());
  }

  // uint64 gold = 3;
  if (this->_internal_gold() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gold());
  }

  // .Protocol.ItemType item_type = 4;
  if (this->_internal_item_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_item_type());
  }

  // .Protocol.ItemRarity item_rarity = 5;
  if (this->_internal_item_rarity() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_item_rarity());
  }

  // .Protocol.ItemCustomType custom_type = 6;
  if (this->_internal_custom_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_custom_type());
  }

  // .Protocol.EquipType equip_type = 7;
  if (this->_internal_equip_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_equip_type());
  }

  // uint64 item_count = 8;
  if (this->_internal_item_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_item_count());
  }

  // float atk = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_atk = this->_internal_atk();
  uint32_t raw_atk;
  memcpy(&raw_atk, &tmp_atk, sizeof(tmp_atk));
  if (raw_atk != 0) {
    total_size += 1 + 4;
  }

  // float def = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_def = this->_internal_def();
  uint32_t raw_def;
  memcpy(&raw_def, &tmp_def, sizeof(tmp_def));
  if (raw_def != 0) {
    total_size += 1 + 4;
  }

  // float delay = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_delay = this->_internal_delay();
  uint32_t raw_delay;
  memcpy(&raw_delay, &tmp_delay, sizeof(tmp_delay));
  if (raw_delay != 0) {
    total_size += 1 + 4;
  }

  // float range = 14;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_range = this->_internal_range();
  uint32_t raw_range;
  memcpy(&raw_range, &tmp_range, sizeof(tmp_range));
  if (raw_range != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ItemInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ItemInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ItemInfo::GetClassData() const { return &_class_data_; }


void ItemInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ItemInfo*>(&to_msg);
  auto& from = static_cast<const ItemInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.ItemInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_item_name().empty()) {
    _this->_internal_set_item_name(from._internal_item_name());
  }
  if (!from._internal_item_visual_name().empty()) {
    _this->_internal_set_item_visual_name(from._internal_item_visual_name());
  }
  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_item_id() != 0) {
    _this->_internal_set_item_id(from._internal_item_id());
  }
  if (from._internal_gold() != 0) {
    _this->_internal_set_gold(from._internal_gold());
  }
  if (from._internal_item_type() != 0) {
    _this->_internal_set_item_type(from._internal_item_type());
  }
  if (from._internal_item_rarity() != 0) {
    _this->_internal_set_item_rarity(from._internal_item_rarity());
  }
  if (from._internal_custom_type() != 0) {
    _this->_internal_set_custom_type(from._internal_custom_type());
  }
  if (from._internal_equip_type() != 0) {
    _this->_internal_set_equip_type(from._internal_equip_type());
  }
  if (from._internal_item_count() != 0) {
    _this->_internal_set_item_count(from._internal_item_count());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_atk = from._internal_atk();
  uint32_t raw_atk;
  memcpy(&raw_atk, &tmp_atk, sizeof(tmp_atk));
  if (raw_atk != 0) {
    _this->_internal_set_atk(from._internal_atk());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_def = from._internal_def();
  uint32_t raw_def;
  memcpy(&raw_def, &tmp_def, sizeof(tmp_def));
  if (raw_def != 0) {
    _this->_internal_set_def(from._internal_def());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_delay = from._internal_delay();
  uint32_t raw_delay;
  memcpy(&raw_delay, &tmp_delay, sizeof(tmp_delay));
  if (raw_delay != 0) {
    _this->_internal_set_delay(from._internal_delay());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_range = from._internal_range();
  uint32_t raw_range;
  memcpy(&raw_range, &tmp_range, sizeof(tmp_range));
  if (raw_range != 0) {
    _this->_internal_set_range(from._internal_range());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ItemInfo::CopyFrom(const ItemInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.ItemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemInfo::IsInitialized() const {
  return true;
}

void ItemInfo::InternalSwap(ItemInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.item_name_, lhs_arena,
      &other->_impl_.item_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.item_visual_name_, lhs_arena,
      &other->_impl_.item_visual_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ItemInfo, _impl_.range_)
      + sizeof(ItemInfo::_impl_.range_)
      - PROTOBUF_FIELD_OFFSET(ItemInfo, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[15]);
}

// ===================================================================

class ObjectItemInfo::_Internal {
 public:
  static const ::Protocol::ItemInfo& info(const ObjectItemInfo* msg);
  static const ::Protocol::PosInfo& pos_info(const ObjectItemInfo* msg);
};

const ::Protocol::ItemInfo&
ObjectItemInfo::_Internal::info(const ObjectItemInfo* msg) {
  return *msg->_impl_.info_;
}
const ::Protocol::PosInfo&
ObjectItemInfo::_Internal::pos_info(const ObjectItemInfo* msg) {
  return *msg->_impl_.pos_info_;
}
ObjectItemInfo::ObjectItemInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.ObjectItemInfo)
}
ObjectItemInfo::ObjectItemInfo(const ObjectItemInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ObjectItemInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){nullptr}
    , decltype(_impl_.pos_info_){nullptr}
    , decltype(_impl_.object_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    _this->_impl_.info_ = new ::Protocol::ItemInfo(*from._impl_.info_);
  }
  if (from._internal_has_pos_info()) {
    _this->_impl_.pos_info_ = new ::Protocol::PosInfo(*from._impl_.pos_info_);
  }
  _this->_impl_.object_id_ = from._impl_.object_id_;
  // @@protoc_insertion_point(copy_constructor:Protocol.ObjectItemInfo)
}

inline void ObjectItemInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){nullptr}
    , decltype(_impl_.pos_info_){nullptr}
    , decltype(_impl_.object_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ObjectItemInfo::~ObjectItemInfo() {
  // @@protoc_insertion_point(destructor:Protocol.ObjectItemInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObjectItemInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.info_;
  if (this != internal_default_instance()) delete _impl_.pos_info_;
}

void ObjectItemInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObjectItemInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.ObjectItemInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pos_info_ != nullptr) {
    delete _impl_.pos_info_;
  }
  _impl_.pos_info_ = nullptr;
  _impl_.object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectItemInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.ItemInfo info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PosInfo pos_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjectItemInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.ObjectItemInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // .Protocol.ItemInfo info = 2;
  if (this->_internal_has_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  // .Protocol.PosInfo pos_info = 3;
  if (this->_internal_has_pos_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pos_info(this),
        _Internal::pos_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.ObjectItemInfo)
  return target;
}

size_t ObjectItemInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.ObjectItemInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.ItemInfo info = 2;
  if (this->_internal_has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  // .Protocol.PosInfo pos_info = 3;
  if (this->_internal_has_pos_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pos_info_);
  }

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectItemInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObjectItemInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectItemInfo::GetClassData() const { return &_class_data_; }


void ObjectItemInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObjectItemInfo*>(&to_msg);
  auto& from = static_cast<const ObjectItemInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.ObjectItemInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_info()) {
    _this->_internal_mutable_info()->::Protocol::ItemInfo::MergeFrom(
        from._internal_info());
  }
  if (from._internal_has_pos_info()) {
    _this->_internal_mutable_pos_info()->::Protocol::PosInfo::MergeFrom(
        from._internal_pos_info());
  }
  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectItemInfo::CopyFrom(const ObjectItemInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.ObjectItemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectItemInfo::IsInitialized() const {
  return true;
}

void ObjectItemInfo::InternalSwap(ObjectItemInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectItemInfo, _impl_.object_id_)
      + sizeof(ObjectItemInfo::_impl_.object_id_)
      - PROTOBUF_FIELD_OFFSET(ObjectItemInfo, _impl_.info_)>(
          reinterpret_cast<char*>(&_impl_.info_),
          reinterpret_cast<char*>(&other->_impl_.info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectItemInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[16]);
}

// ===================================================================

class ItemBoxInfo::_Internal {
 public:
  static const ::Protocol::InventoryList& list(const ItemBoxInfo* msg);
  static const ::Protocol::PosInfo& pos_info(const ItemBoxInfo* msg);
};

const ::Protocol::InventoryList&
ItemBoxInfo::_Internal::list(const ItemBoxInfo* msg) {
  return *msg->_impl_.list_;
}
const ::Protocol::PosInfo&
ItemBoxInfo::_Internal::pos_info(const ItemBoxInfo* msg) {
  return *msg->_impl_.pos_info_;
}
ItemBoxInfo::ItemBoxInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.ItemBoxInfo)
}
ItemBoxInfo::ItemBoxInfo(const ItemBoxInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ItemBoxInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.list_){nullptr}
    , decltype(_impl_.pos_info_){nullptr}
    , decltype(_impl_.object_id_){}
    , decltype(_impl_.box_type_){}
    , decltype(_impl_.box_state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_list()) {
    _this->_impl_.list_ = new ::Protocol::InventoryList(*from._impl_.list_);
  }
  if (from._internal_has_pos_info()) {
    _this->_impl_.pos_info_ = new ::Protocol::PosInfo(*from._impl_.pos_info_);
  }
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.box_state_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.box_state_));
  // @@protoc_insertion_point(copy_constructor:Protocol.ItemBoxInfo)
}

inline void ItemBoxInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.list_){nullptr}
    , decltype(_impl_.pos_info_){nullptr}
    , decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.box_type_){0}
    , decltype(_impl_.box_state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ItemBoxInfo::~ItemBoxInfo() {
  // @@protoc_insertion_point(destructor:Protocol.ItemBoxInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ItemBoxInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.list_;
  if (this != internal_default_instance()) delete _impl_.pos_info_;
}

void ItemBoxInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ItemBoxInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.ItemBoxInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.list_ != nullptr) {
    delete _impl_.list_;
  }
  _impl_.list_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pos_info_ != nullptr) {
    delete _impl_.pos_info_;
  }
  _impl_.pos_info_ = nullptr;
  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.box_state_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.box_state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ItemBoxInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.ItemBoxType box_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_box_type(static_cast<::Protocol::ItemBoxType>(val));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.ItemBoxState box_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_box_state(static_cast<::Protocol::ItemBoxState>(val));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.InventoryList list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PosInfo pos_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ItemBoxInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.ItemBoxInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // .Protocol.ItemBoxType box_type = 2;
  if (this->_internal_box_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_box_type(), target);
  }

  // .Protocol.ItemBoxState box_state = 3;
  if (this->_internal_box_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_box_state(), target);
  }

  // .Protocol.InventoryList list = 4;
  if (this->_internal_has_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::list(this),
        _Internal::list(this).GetCachedSize(), target, stream);
  }

  // .Protocol.PosInfo pos_info = 5;
  if (this->_internal_has_pos_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::pos_info(this),
        _Internal::pos_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.ItemBoxInfo)
  return target;
}

size_t ItemBoxInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.ItemBoxInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.InventoryList list = 4;
  if (this->_internal_has_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.list_);
  }

  // .Protocol.PosInfo pos_info = 5;
  if (this->_internal_has_pos_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pos_info_);
  }

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // .Protocol.ItemBoxType box_type = 2;
  if (this->_internal_box_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_box_type());
  }

  // .Protocol.ItemBoxState box_state = 3;
  if (this->_internal_box_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_box_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ItemBoxInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ItemBoxInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ItemBoxInfo::GetClassData() const { return &_class_data_; }


void ItemBoxInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ItemBoxInfo*>(&to_msg);
  auto& from = static_cast<const ItemBoxInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.ItemBoxInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_list()) {
    _this->_internal_mutable_list()->::Protocol::InventoryList::MergeFrom(
        from._internal_list());
  }
  if (from._internal_has_pos_info()) {
    _this->_internal_mutable_pos_info()->::Protocol::PosInfo::MergeFrom(
        from._internal_pos_info());
  }
  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_box_type() != 0) {
    _this->_internal_set_box_type(from._internal_box_type());
  }
  if (from._internal_box_state() != 0) {
    _this->_internal_set_box_state(from._internal_box_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ItemBoxInfo::CopyFrom(const ItemBoxInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.ItemBoxInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemBoxInfo::IsInitialized() const {
  return true;
}

void ItemBoxInfo::InternalSwap(ItemBoxInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ItemBoxInfo, _impl_.box_state_)
      + sizeof(ItemBoxInfo::_impl_.box_state_)
      - PROTOBUF_FIELD_OFFSET(ItemBoxInfo, _impl_.list_)>(
          reinterpret_cast<char*>(&_impl_.list_),
          reinterpret_cast<char*>(&other->_impl_.list_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemBoxInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[17]);
}

// ===================================================================

class LevelPointInfo::_Internal {
 public:
};

LevelPointInfo::LevelPointInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.LevelPointInfo)
}
LevelPointInfo::LevelPointInfo(const LevelPointInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LevelPointInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.skill_point_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.skill_point_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.skill_point_));
  // @@protoc_insertion_point(copy_constructor:Protocol.LevelPointInfo)
}

inline void LevelPointInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.level_){0u}
    , decltype(_impl_.skill_point_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LevelPointInfo::~LevelPointInfo() {
  // @@protoc_insertion_point(destructor:Protocol.LevelPointInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LevelPointInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LevelPointInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LevelPointInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.LevelPointInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.skill_point_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.skill_point_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LevelPointInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 skill_point = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.skill_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LevelPointInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.LevelPointInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // uint32 level = 2;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_level(), target);
  }

  // uint32 skill_point = 3;
  if (this->_internal_skill_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_skill_point(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.LevelPointInfo)
  return target;
}

size_t LevelPointInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.LevelPointInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // uint32 level = 2;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  // uint32 skill_point = 3;
  if (this->_internal_skill_point() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_skill_point());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LevelPointInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LevelPointInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LevelPointInfo::GetClassData() const { return &_class_data_; }


void LevelPointInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LevelPointInfo*>(&to_msg);
  auto& from = static_cast<const LevelPointInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.LevelPointInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_skill_point() != 0) {
    _this->_internal_set_skill_point(from._internal_skill_point());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LevelPointInfo::CopyFrom(const LevelPointInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.LevelPointInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LevelPointInfo::IsInitialized() const {
  return true;
}

void LevelPointInfo::InternalSwap(LevelPointInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LevelPointInfo, _impl_.skill_point_)
      + sizeof(LevelPointInfo::_impl_.skill_point_)
      - PROTOBUF_FIELD_OFFSET(LevelPointInfo, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LevelPointInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[18]);
}

// ===================================================================

class ShopItemInfo::_Internal {
 public:
  static const ::Protocol::ItemInfo& item(const ShopItemInfo* msg);
};

const ::Protocol::ItemInfo&
ShopItemInfo::_Internal::item(const ShopItemInfo* msg) {
  return *msg->_impl_.item_;
}
ShopItemInfo::ShopItemInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.ShopItemInfo)
}
ShopItemInfo::ShopItemInfo(const ShopItemInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShopItemInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){nullptr}
    , decltype(_impl_.can_buy_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_item()) {
    _this->_impl_.item_ = new ::Protocol::ItemInfo(*from._impl_.item_);
  }
  _this->_impl_.can_buy_count_ = from._impl_.can_buy_count_;
  // @@protoc_insertion_point(copy_constructor:Protocol.ShopItemInfo)
}

inline void ShopItemInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){nullptr}
    , decltype(_impl_.can_buy_count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ShopItemInfo::~ShopItemInfo() {
  // @@protoc_insertion_point(destructor:Protocol.ShopItemInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShopItemInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.item_;
}

void ShopItemInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShopItemInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.ShopItemInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
  _impl_.can_buy_count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShopItemInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.ItemInfo item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 can_buy_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.can_buy_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShopItemInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.ShopItemInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.ItemInfo item = 1;
  if (this->_internal_has_item()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::item(this),
        _Internal::item(this).GetCachedSize(), target, stream);
  }

  // uint32 can_buy_count = 2;
  if (this->_internal_can_buy_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_can_buy_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.ShopItemInfo)
  return target;
}

size_t ShopItemInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.ShopItemInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.ItemInfo item = 1;
  if (this->_internal_has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.item_);
  }

  // uint32 can_buy_count = 2;
  if (this->_internal_can_buy_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_can_buy_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShopItemInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShopItemInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShopItemInfo::GetClassData() const { return &_class_data_; }


void ShopItemInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShopItemInfo*>(&to_msg);
  auto& from = static_cast<const ShopItemInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.ShopItemInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_item()) {
    _this->_internal_mutable_item()->::Protocol::ItemInfo::MergeFrom(
        from._internal_item());
  }
  if (from._internal_can_buy_count() != 0) {
    _this->_internal_set_can_buy_count(from._internal_can_buy_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShopItemInfo::CopyFrom(const ShopItemInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.ShopItemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopItemInfo::IsInitialized() const {
  return true;
}

void ShopItemInfo::InternalSwap(ShopItemInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShopItemInfo, _impl_.can_buy_count_)
      + sizeof(ShopItemInfo::_impl_.can_buy_count_)
      - PROTOBUF_FIELD_OFFSET(ShopItemInfo, _impl_.item_)>(
          reinterpret_cast<char*>(&_impl_.item_),
          reinterpret_cast<char*>(&other->_impl_.item_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShopItemInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[19]);
}

// ===================================================================

class ShopInfo::_Internal {
 public:
};

ShopInfo::ShopInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.ShopInfo)
}
ShopInfo::ShopInfo(const ShopInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShopInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.list_){from._impl_.list_}
    , decltype(_impl_.list_count_){}
    , decltype(_impl_.refresh_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.list_count_, &from._impl_.list_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.refresh_count_) -
    reinterpret_cast<char*>(&_impl_.list_count_)) + sizeof(_impl_.refresh_count_));
  // @@protoc_insertion_point(copy_constructor:Protocol.ShopInfo)
}

inline void ShopInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.list_){arena}
    , decltype(_impl_.list_count_){0u}
    , decltype(_impl_.refresh_count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ShopInfo::~ShopInfo() {
  // @@protoc_insertion_point(destructor:Protocol.ShopInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShopInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.list_.~RepeatedPtrField();
}

void ShopInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShopInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.ShopInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.list_.Clear();
  ::memset(&_impl_.list_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.refresh_count_) -
      reinterpret_cast<char*>(&_impl_.list_count_)) + sizeof(_impl_.refresh_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShopInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 list_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.list_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Protocol.ShopItemInfo list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 refresh_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.refresh_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShopInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.ShopInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 list_count = 1;
  if (this->_internal_list_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_list_count(), target);
  }

  // repeated .Protocol.ShopItemInfo list = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 refresh_count = 3;
  if (this->_internal_refresh_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_refresh_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.ShopInfo)
  return target;
}

size_t ShopInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.ShopInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.ShopItemInfo list = 2;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->_impl_.list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 list_count = 1;
  if (this->_internal_list_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_list_count());
  }

  // uint32 refresh_count = 3;
  if (this->_internal_refresh_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_refresh_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShopInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShopInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShopInfo::GetClassData() const { return &_class_data_; }


void ShopInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShopInfo*>(&to_msg);
  auto& from = static_cast<const ShopInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.ShopInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.list_.MergeFrom(from._impl_.list_);
  if (from._internal_list_count() != 0) {
    _this->_internal_set_list_count(from._internal_list_count());
  }
  if (from._internal_refresh_count() != 0) {
    _this->_internal_set_refresh_count(from._internal_refresh_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShopInfo::CopyFrom(const ShopInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.ShopInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopInfo::IsInitialized() const {
  return true;
}

void ShopInfo::InternalSwap(ShopInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.list_.InternalSwap(&other->_impl_.list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShopInfo, _impl_.refresh_count_)
      + sizeof(ShopInfo::_impl_.refresh_count_)
      - PROTOBUF_FIELD_OFFSET(ShopInfo, _impl_.list_count_)>(
          reinterpret_cast<char*>(&_impl_.list_count_),
          reinterpret_cast<char*>(&other->_impl_.list_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShopInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[20]);
}

// ===================================================================

class MailInfo::_Internal {
 public:
};

MailInfo::MailInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.MailInfo)
}
MailInfo::MailInfo(const MailInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MailInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){from._impl_.item_}
    , decltype(_impl_.main_title_){}
    , decltype(_impl_.text_){}
    , decltype(_impl_.is_read_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.main_title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.main_title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_main_title().empty()) {
    _this->_impl_.main_title_.Set(from._internal_main_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.is_read_ = from._impl_.is_read_;
  // @@protoc_insertion_point(copy_constructor:Protocol.MailInfo)
}

inline void MailInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){arena}
    , decltype(_impl_.main_title_){}
    , decltype(_impl_.text_){}
    , decltype(_impl_.is_read_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.main_title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.main_title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MailInfo::~MailInfo() {
  // @@protoc_insertion_point(destructor:Protocol.MailInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MailInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.item_.~RepeatedPtrField();
  _impl_.main_title_.Destroy();
  _impl_.text_.Destroy();
}

void MailInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MailInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.MailInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.item_.Clear();
  _impl_.main_title_.ClearToEmpty();
  _impl_.text_.ClearToEmpty();
  _impl_.is_read_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MailInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string main_title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_main_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.MailInfo.main_title"));
        } else
          goto handle_unusual;
        continue;
      // string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.MailInfo.text"));
        } else
          goto handle_unusual;
        continue;
      // repeated .Protocol.ItemInfo item = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool is_read = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.is_read_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MailInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.MailInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string main_title = 1;
  if (!this->_internal_main_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_main_title().data(), static_cast<int>(this->_internal_main_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.MailInfo.main_title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_main_title(), target);
  }

  // string text = 2;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.MailInfo.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  // repeated .Protocol.ItemInfo item = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_item_size()); i < n; i++) {
    const auto& repfield = this->_internal_item(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool is_read = 4;
  if (this->_internal_is_read() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_read(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.MailInfo)
  return target;
}

size_t MailInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.MailInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.ItemInfo item = 3;
  total_size += 1UL * this->_internal_item_size();
  for (const auto& msg : this->_impl_.item_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string main_title = 1;
  if (!this->_internal_main_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_main_title());
  }

  // string text = 2;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // bool is_read = 4;
  if (this->_internal_is_read() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MailInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MailInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MailInfo::GetClassData() const { return &_class_data_; }


void MailInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MailInfo*>(&to_msg);
  auto& from = static_cast<const MailInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.MailInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.item_.MergeFrom(from._impl_.item_);
  if (!from._internal_main_title().empty()) {
    _this->_internal_set_main_title(from._internal_main_title());
  }
  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (from._internal_is_read() != 0) {
    _this->_internal_set_is_read(from._internal_is_read());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MailInfo::CopyFrom(const MailInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.MailInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailInfo::IsInitialized() const {
  return true;
}

void MailInfo::InternalSwap(MailInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.item_.InternalSwap(&other->_impl_.item_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.main_title_, lhs_arena,
      &other->_impl_.main_title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  swap(_impl_.is_read_, other->_impl_.is_read_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MailInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[21]);
}

// ===================================================================

class MailBoxInfo::_Internal {
 public:
};

MailBoxInfo::MailBoxInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.MailBoxInfo)
}
MailBoxInfo::MailBoxInfo(const MailBoxInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MailBoxInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mail_){from._impl_.mail_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.MailBoxInfo)
}

inline void MailBoxInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mail_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MailBoxInfo::~MailBoxInfo() {
  // @@protoc_insertion_point(destructor:Protocol.MailBoxInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MailBoxInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mail_.~RepeatedPtrField();
}

void MailBoxInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MailBoxInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.MailBoxInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mail_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MailBoxInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Protocol.MailInfo mail = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mail(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MailBoxInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.MailBoxInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Protocol.MailInfo mail = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mail_size()); i < n; i++) {
    const auto& repfield = this->_internal_mail(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.MailBoxInfo)
  return target;
}

size_t MailBoxInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.MailBoxInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.MailInfo mail = 1;
  total_size += 1UL * this->_internal_mail_size();
  for (const auto& msg : this->_impl_.mail_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MailBoxInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MailBoxInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MailBoxInfo::GetClassData() const { return &_class_data_; }


void MailBoxInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MailBoxInfo*>(&to_msg);
  auto& from = static_cast<const MailBoxInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.MailBoxInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mail_.MergeFrom(from._impl_.mail_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MailBoxInfo::CopyFrom(const MailBoxInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.MailBoxInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailBoxInfo::IsInitialized() const {
  return true;
}

void MailBoxInfo::InternalSwap(MailBoxInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.mail_.InternalSwap(&other->_impl_.mail_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MailBoxInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[22]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protocol::PosInfo*
Arena::CreateMaybeMessage< ::Protocol::PosInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::PosInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::HitInfo*
Arena::CreateMaybeMessage< ::Protocol::HitInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::HitInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::MeleeAttackInfo*
Arena::CreateMaybeMessage< ::Protocol::MeleeAttackInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::MeleeAttackInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::ProjectileInfo*
Arena::CreateMaybeMessage< ::Protocol::ProjectileInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::ProjectileInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::StatusInfo*
Arena::CreateMaybeMessage< ::Protocol::StatusInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::StatusInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::ClassInfo*
Arena::CreateMaybeMessage< ::Protocol::ClassInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::ClassInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::ObjectInfo*
Arena::CreateMaybeMessage< ::Protocol::ObjectInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::ObjectInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::CreatureInfo*
Arena::CreateMaybeMessage< ::Protocol::CreatureInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::CreatureInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::PlayerInfo*
Arena::CreateMaybeMessage< ::Protocol::PlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::PlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::MonsterInfo*
Arena::CreateMaybeMessage< ::Protocol::MonsterInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::MonsterInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::AbilityInputInfo*
Arena::CreateMaybeMessage< ::Protocol::AbilityInputInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::AbilityInputInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::EquipStateInfo*
Arena::CreateMaybeMessage< ::Protocol::EquipStateInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::EquipStateInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::AIInfo*
Arena::CreateMaybeMessage< ::Protocol::AIInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::AIInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::InventoryList*
Arena::CreateMaybeMessage< ::Protocol::InventoryList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::InventoryList >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::EquipmentList*
Arena::CreateMaybeMessage< ::Protocol::EquipmentList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::EquipmentList >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::ItemInfo*
Arena::CreateMaybeMessage< ::Protocol::ItemInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::ItemInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::ObjectItemInfo*
Arena::CreateMaybeMessage< ::Protocol::ObjectItemInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::ObjectItemInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::ItemBoxInfo*
Arena::CreateMaybeMessage< ::Protocol::ItemBoxInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::ItemBoxInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::LevelPointInfo*
Arena::CreateMaybeMessage< ::Protocol::LevelPointInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::LevelPointInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::ShopItemInfo*
Arena::CreateMaybeMessage< ::Protocol::ShopItemInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::ShopItemInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::ShopInfo*
Arena::CreateMaybeMessage< ::Protocol::ShopInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::ShopInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::MailInfo*
Arena::CreateMaybeMessage< ::Protocol::MailInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::MailInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::MailBoxInfo*
Arena::CreateMaybeMessage< ::Protocol::MailBoxInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::MailBoxInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
